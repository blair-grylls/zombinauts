{"version":3,"sources":["candy-machine.ts","connection.tsx","comp.gif","whitelist.ts","userSettings.tsx","PhaseHeader.tsx","MintButton.tsx","countdown.tsx","Minter.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","whitelist","Phase","mintPanic","welcomeSettings","title","desc","countdownEnable","countdownTo","showPrice","enableCustomHTML","MintWelcomeCustomHTML","className","React","Component","whitelistSettings","enabled","startDate","endDate","countdown","MintWhitelistCustomHTML","publicSaleSettings","MintPublicSaleCustomHTML","CTAButton","styled","Button","MintButton","onMint","isMinting","MINT_LIMIT","userMintCount","whitelisted","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","whitelistStartDate","toDate","whitelistEndDate","publicMintStart","publicMintEnd","WhitelistMintActive","now","PublicMintActive","useEffect","GatewayStatus","ACTIVE","disabled","onClick","token","variant","CircularProgress","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","PhaseCountdown","style","start","end","onComplete","classes","isFixed","renderCountdown","days","hours","minutes","seconds","completed","Paper","elevation","renderer","Header","props","phaseName","Grid","container","position","top","left","Container","textAlign","fontFamily","PhaseHeader","phase","useWallet","Panic","Welcome","WhiteListMint","PublicMint","ConnectButton","WalletDialogButton","MintContainer","div","Home","localStorage","window","setUserMintCount","setWhitelisted","rpcUrl","rpcHost","whiteListTokenBalance","setWhiteListTokenBalance","setIsMinting","mintingTotal","setMintingTotal","setItemsAvailable","setPublicKey","setCandyMachine","setPrice","useMemo","signTransaction","open","severity","alertState","setAlertState","connected","mintTxId","txTimeout","setItem","msg","code","location","reload","indexOf","localMintCount","getItem","parseInt","includes","cndy","getParsedTokenAccountsByOwner","tokenAmount","parsed","info","amount","getTokenAmount","curr","whiteListStart","whiteListEnd","publicSaleStart","getPhase","maxWidth","direction","marginBottom","src","gif","alt","marginTop","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","Connection","startDateSeed","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","getMathWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","Minter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"wYAcaA,EAAwB,IAAIC,IAAYC,UACnD,+CAGIC,EAA4B,IAAIF,IAAYC,UAChD,+CAqCWE,EAAqC,uCAAG,WACnDC,EACAC,EACAC,GAHmD,iCAAAC,EAAA,4FAId,SACrCC,EALmD,gCAO/CC,GAAO,EACPC,EAAoD,CACtDC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbuC,SAcpC,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAV,EAAA,sDACzBW,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEZ,SAAS,OACjBA,GARsB,UASjBI,IAAQD,EATS,uBAWvB,sBAAC,4BAAAD,EAAA,+EAEmCD,EAAWe,qBAAqB,CAC9DjB,IAHL,OAESkB,EAFT,OAKGZ,EAASY,GAAqBA,EAAkBC,MAAM,GACjDd,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBhB,EAAMM,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBhB,EAAMM,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BhB,EAAMM,GAN/CS,QAAQC,IAAI,uBAAwBhB,EAAMM,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BhB,EAA3C,MAvBL,wDAAD,GAXuB,SAsCjBoB,EAAM,KAtCW,iEAAZ,yDAdoC,cAcnDd,EAdmD,OAyD/CJ,EAAWmB,wBAAwBX,IACrCR,EAAWoB,wBAAwBZ,GAErCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GA7DmB,kBA8D5CA,GA9D4C,4CAAH,0DAiE/BiB,EAA0C,SAC3DC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQjC,IAAYoC,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQK,IAAkBJ,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQjC,IAAYuC,mBACpBL,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAInC,IAAYwC,uBAAuB,CAC5CR,OACAK,UAAWI,IACXC,KAAMC,EAAOC,KAAK,OAITC,EAAoB,uCAAG,WAClCC,EACAC,EACAzC,GAHkC,2BAAAC,EAAA,6DAK5ByC,EAAW,IAAIhD,IAAgBM,EAAYwC,EAAc,CAC7DG,oBAAqB,WANW,SAShBjD,IAAekD,SAASnD,EAAuBiD,GAT/B,cAS5BG,EAT4B,OAW5BC,EAAU,IAAIpD,IAAemD,EAAKpD,EAAuBiD,GAX7B,SAaTI,EAAQC,QAAQC,aAAaC,MAAMR,GAb1B,cAa5BS,EAb4B,OAc5BC,EAAiBD,EAAMd,KAAKe,eAAeC,WAC3CC,EAAgBH,EAAMG,cAAcD,WACpCE,EAAiBH,EAAiBE,EAhBN,kBAkB3B,CACLE,GAAId,EACJK,UACAI,MAAO,CACLC,iBACAE,gBACAC,iBACAE,UAA8B,IAAnBF,EACXG,SACEP,EAAMd,KAAKsB,WAAWN,YAAa,IAAIO,MAAOC,UAAY,OACzDV,EAAMW,cACHX,EAAMW,YAAYC,eAAeC,KAC/Bb,EAAMW,YAAYG,OAAOZ,YAAa,IAAIO,MAAOC,UAAY,IAC7DP,EAAgBH,EAAMW,YAAYG,OAAOZ,aAEjDM,WAAYR,EAAMd,KAAKsB,WACvBO,SAAUf,EAAMgB,OAChBC,UAAWjB,EAAMiB,UACjBC,WAAYlB,EAAMd,KAAKgC,WACvBP,YAAaX,EAAMd,KAAKyB,YACxBQ,sBAAuBnB,EAAMd,KAAKiC,sBAClCC,eAAgBpB,EAAMd,KAAKkC,eAC3BC,MAAOrB,EAAMd,KAAKmC,SAxCY,4CAAH,0DA6C3BC,EAAgB,uCAAG,WACvBC,GADuB,SAAAxE,EAAA,sEAIfP,IAAYC,UAAU+E,mBAC1B,CACErC,EAAOC,KAAK,YACZ1C,EAA0B+E,WAC1BF,EAAKE,WACLtC,EAAOC,KAAK,YAEd1C,GAXmB,uCAarB,IAbqB,2CAAH,sDAgBhBgF,EAAW,uCAAG,WAClBH,GADkB,SAAAxE,EAAA,sEAIVP,IAAYC,UAAU+E,mBAC1B,CACErC,EAAOC,KAAK,YACZ1C,EAA0B+E,WAC1BF,EAAKE,YAEP/E,GAVc,uCAYhB,IAZgB,2CAAH,sDAeJiF,EAAsB,uCAAG,WACpC7B,GADoC,SAAA/C,EAAA,sEAGvBP,IAAYC,UAAU+E,mBACjC,CAACrC,EAAOC,KAAK,iBAAkBU,EAAa2B,YAC5ClF,GALkC,mFAAH,sDAStBqF,EAAY,uCAAG,WAC1B9B,EACAzB,GAF0B,iDAAAtB,EAAA,6DAIpBwE,EAAO/E,IAAYqF,QAAQC,WAJP,SAOlBC,YAAcR,EAAKS,UAAW3D,GAPZ,UAMpB4D,EANoB,OAQxB,IAE+BnC,EAAaE,MAAMiB,UAV1B,iCAWfc,YAAcjC,EAAaE,MAAMiB,UAAW5C,GAX7B,mBAWqC,GAXrC,6BAYtBA,EAZsB,eAUpB6D,EAVoB,KAcpBC,EAAsBrC,EAAaO,GACnC+B,EAAoB,GACpBC,EAAiC,CAACd,GAClCe,EAAsB,GAjBF,KAmBxB9F,IAAYoC,cAnBY,KAoBVP,EApBU,KAqBJkD,EAAKS,UArBD,KAsBfO,IAAWC,KAtBI,UAwBd1C,EAAaF,QAAQJ,SAAS1C,WAAW2F,kCAC7CF,IAAWC,MAzBO,4BA2BX1D,IA3BW,MAoBtB4D,WApBsB,KAqBtBC,iBArBsB,KAsBtBC,MAtBsB,KAuBtBC,SAvBsB,KA2BtBhE,UA3BsB,gBAmBEiE,cAnBF,qBA6BxBC,IAAMC,0BACJlE,IACAyC,EAAKS,UACL,EACA3D,EACAA,GAlCsB,MAoCxBF,EACE8D,EACA5D,EACAA,EACAkD,EAAKS,WAxCiB,MA0CxBe,IAAME,wBACJnE,IACAyC,EAAKS,UACLC,EACA5D,EACA,GACA,GA9BE6E,EAlBoB,yBAoDtBpD,EAAaE,MAAMkB,WApDG,8BAqDxBkB,EArDwB,UAuDde,YACJ9E,EACAyB,EAAaE,MAAMkB,WAAWkC,mBAzDZ,wBA2DpB,GA3DoB,OAsDtB3E,OAtDsB,MA4DtBE,YAAY,EACZD,UAAU,GA7DY,MAqDN2E,KArDM,mBA+DpBvD,EAAaE,MAAMkB,WAAWoC,YA/DV,wBAgEtBlB,EAAkBiB,KAAK,CACrB5E,OAAQ8E,IACR5E,YAAY,EACZD,UAAU,IAnEU,MAqEtB0D,EArEsB,UAuEZoB,YACJ1D,EAAaE,MAAMkB,WAAWkC,mBAxEd,qBA0ElB,GA1EkB,OAsEpB3E,OAtEoB,MA2EpBE,YAAY,EACZD,UAAU,GA5EU,MAqEJ2E,KArEI,8BAgFtBvD,EAAaE,MAAMmB,sBAhFG,wBAiFlBI,EAAO,IAAI/E,IAAYC,UAC3BqD,EAAaE,MAAMmB,sBAAsBI,MAlFnB,UAqFMQ,YAAcR,EAAMlD,GArF1B,WAqFlBoF,EArFkB,OAqFkC,GAC1DrB,EAAkBiB,KAAK,CACrB5E,OAAQgF,EACR9E,YAAY,EACZD,UAAU,KAGRoB,EAAaE,MAAMmB,sBAAsBuC,KAAKC,cA5F1B,wBA6FhBC,EAAyBpH,IAAYqF,QAAQC,WAEnDM,EAAkBiB,KAAK,CACrB5E,OAAQ8C,EACR5C,YAAY,EACZD,UAAU,IAEZ0D,EAAkBiB,KAAK,CACrB5E,OAAQmF,EAAuB5B,UAC/BrD,YAAY,EACZD,UAAU,IAEZ2D,EAAQgB,KAAKO,GAzGS,UA2Gd9D,EAAaF,QAAQJ,SAAS1C,WAAW+G,eAC7CJ,GA5GkB,iBA+GpBP,EAAaG,KACXN,IAAMe,yBACJhF,IACA2E,EACAG,EAAuB5B,UACvB3D,EACA,GACA,IAGJiE,EAAoBe,KAClBN,IAAMgB,wBACJjF,IACA2E,EACApF,EACA,MA9HgB,eAqItByB,EAAaE,MAAMiB,YACf+C,EAAoBxH,IAAYqF,QAAQC,WAE9CO,EAAQgB,KAAKW,GACb5B,EAAkBiB,KAAK,CACrB5E,OAAQyD,EACRvD,YAAY,EACZD,UAAU,IAEZ0D,EAAkBiB,KAAK,CACrB5E,OAAQuF,EAAkBhC,UAC1BrD,YAAY,EACZD,UAAU,IAGZwE,EAAaG,KACXN,IAAMe,yBACJhF,IACAoD,EACA8B,EAAkBhC,UAClB3D,EACA,GACAyB,EAAaE,MAAMqB,MAAMnB,aAG7BoC,EAAoBe,KAClBN,IAAMgB,wBACJjF,IACAoD,EACA7D,EACA,MAnKoB,UAuKIqD,EAAYH,EAAKS,WAvKrB,eAuKpBiC,EAvKoB,iBAwKE3C,EAAiBC,EAAKS,WAxKxB,eAwKpBkC,EAxKoB,iBA0KuBvC,EAC/CQ,GA3KwB,2CA0KnBgC,EA1KmB,KA0KEC,EA1KF,WA8K1BlB,EA9K0B,UA+KlBpD,EAAaF,QAAQyE,YAAYC,QAAQF,EAAa,CAC1DG,SAAU,CACRzE,aAAcqC,EACdgC,sBACA9F,MAAOA,EACP2C,OAAQlB,EAAaE,MAAMe,SAC3BQ,KAAMA,EAAKS,UACXwC,SAAUP,EACVC,gBACAO,cAAepG,EACfqG,gBAAiBrG,EACjBsG,qBAAsBjI,EACtBkI,aAAc9F,IACd+F,cAAejG,gBAAcC,UAC7BiG,KAAMtI,IAAYuC,mBAClBgG,MAAOvI,IAAYwI,oBACnBC,kBAAmBzI,IAAY0I,iCAC/BC,yBAA0B3I,IAAY4I,4BAExChD,kBACEA,EAAkBiD,OAAS,EAAIjD,OAAoBkD,IAnM/B,kCA8KbjC,KA9Ka,sCAyMhBkC,YACJzF,EAAaF,QAAQJ,SAAS1C,WAC9BgD,EAAaF,QAAQJ,SAASwB,OAC9B,CAACkC,EAAcZ,GACf,CAACD,EAAS,KA7MU,wCA+MtBmD,IAAIC,KAAI,SAAAC,GAAC,OAAIA,EAAE9I,SA/MO,oCAiNxBe,QAAQC,IAAR,OAjNwB,iCAoNnB,IApNmB,2DAAH,wDA2NnBI,EAAQ,SAAC2H,GACb,OAAO,IAAIpI,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAASmI,S,gGCrZxCC,E,yDAAAA,O,2BAAAA,I,uBAAAA,I,kCAAAA,M,KAyEL,IAAML,EAAgB,uCAAG,WAC9BzI,EACAkE,EACA6E,EACAC,GAJ8B,qDAAA/I,EAAA,yDAK9BgJ,EAL8B,+BAKDH,EAAaI,SAC1CC,EAN8B,+BAML,eACzBC,EAP8B,+BAOyB,SAACtJ,EAAMuJ,KAC9DC,EAR8B,+BAQ2B,SAACxJ,EAAMuJ,GAAP,OAAe,GACxEE,EAT8B,uBAWzBrF,EAAOgB,UAXkB,sBAWD,IAAIsE,IAXH,UAaxBC,EAA8B,GAE/BF,EAfyB,kCAgBdvJ,EAAW0J,mBAAmBP,GAhBhB,QAgB5BI,EAhB4B,0BAmBrBI,GACP,IAAMvD,EAAe2C,EAAeY,GAC9BpE,EAAUyD,EAAWW,GAE3B,GAA4B,IAAxBvD,EAAamC,OACf,iBAGF,IAAIqB,EAAc,IAAIC,cACtBzD,EAAa0D,SAAQ,SAAAvC,GAAW,OAAIqC,EAAYG,IAAIxC,MACpDqC,EAAYI,gBAAkBT,EAAMU,UACpCL,EAAYM,WAAZ,MAAAN,EAAW,CAET1F,EAAOgB,WAFE,mBAGNK,EAAQoD,KAAI,SAAAwB,GAAC,OAAIA,EAAEjF,gBAGpBK,EAAQgD,OAAS,GACnBqB,EAAYQ,YAAZ,MAAAR,EAAW,YAAgBrE,IAG7BkE,EAAalD,KAAKqD,IArBXD,EAAI,EAnBiB,aAmBdA,EAAIZ,EAAeR,QAnBL,mCAmBrBoB,GAnBqB,wDAmBaA,IAnBb,yCA2CLzF,EAAOmG,oBAAoBZ,GA3CtB,QA2CxBa,EA3CwB,OA6CxBC,EAAyD,GAE3DC,EAAmB,CAAEC,YAAY,EAAOd,EAAG,GAC/C9I,QAAQC,IACN,qBACAwJ,EAAW/B,OACX,sBACAQ,EAAeR,QApDa,IAAAtI,EAAA,iBAsDrB0J,GAtDqB,eAAA1J,EAAA,0DAuDtByK,EAAmBC,EAAsB,CAC7C3K,aACA4K,kBAAmBN,EAAWX,MAI7BkB,MAAK,YAAqB,IAAlB/K,EAAiB,EAAjBA,KAAiB,EAAXO,KACb+I,EAAgBtJ,EAAM6J,MAEvBmB,OAAM,SAAAC,GAELzB,EAAagB,EAAWX,GAAIA,GACxBV,IAAiBH,EAAakC,gBAChCR,EAAiBC,YAAa,EAC9BD,EAAiBb,EAAIA,MAIvBV,IAAiBH,EAAaI,SAzEN,0CA2ElBwB,EA3EkB,0DA6ExB7J,QAAQC,IAAI,iBAAZ,OACI0J,EAAiBC,WA9EG,wBA+EtB5J,QAAQC,IAAI,WAAY0J,EAAiBb,GA/EnB,KAkFZa,EAAiBb,EAlFL,UAmFTlJ,QAAQwK,IAAIV,GAnFH,iCAkFpBvG,OAlFoB,KAmFpB0E,IAnFoB,kEAwF1B6B,EAAYhE,KAAKmE,GAxFS,wDAsDrBf,EAAI,EAtDiB,aAsDdA,EAAIW,EAAW/B,QAtDD,0CAsDrBoB,GAtDqB,qGAsDSA,IAtDT,2BA4F1BV,IAAiBH,EAAaI,SA5FJ,kCA6FtBzI,QAAQwK,IAAIV,GA7FU,oBAgGbD,EAAW/B,OAhGE,UAgGiB9H,QAAQwK,IAAIV,GAhG7B,8CAgGrBvG,OAhGqB,KAgGM0E,IAhGN,mDAAH,4DAqNhBwC,EAAY,WACvB,OAAO,IAAIvH,MAAOC,UAAY,KAG1BuH,EAAkB,KAEjB,SAAeR,EAAtB,kC,4CAAO,qDAAA1K,EAAA,6DACL2K,EADK,EACLA,kBACA5K,EAFK,EAELA,WAFK,IAGLD,eAHK,MAGKoL,EAHL,EAYCC,EAAiBR,EAAkBS,YACnCC,EAAYJ,IACd7K,EAAO,EAdN,SAeoCL,EAAWuL,mBAClDH,EACA,CACEI,eAAe,IAlBd,cAeC1L,EAfD,OAsBLe,QAAQC,IAAI,oCAAqChB,GAE7CK,GAAO,EACX,sBAAC,sBAAAF,EAAA,yDACSE,KAAQ+K,IAAcI,EAAYvL,GAD3C,uBAEGC,EAAWuL,mBAAmBH,EAAgB,CAC5CI,eAAe,IAHpB,SAKStK,EAAM,KALf,gEAAD,GAzBK,oBAkCwBrB,EACzBC,EACAC,EACAC,EACA,UACA,GAvCC,WAkCGyL,EAlCH,8BA2CK,IAAIC,MAAM,kDA3Cf,YA6CCD,EAAalL,IA7Cd,uBA8CDM,QAAQ8K,MAAMF,EAAalL,KACrB,IAAImL,MAAM,gDA/Cf,QAkDHrL,GAAmB,OAAZoL,QAAY,IAAZA,OAAA,EAAAA,EAAcpL,OAAQ,EAlD1B,sDAoDHQ,QAAQ8K,MAAM,uBAAd,OACI,KAAI5L,QArDL,uBAsDK,IAAI2L,MAAM,kDAtDf,eAwDCE,EAAsD,KAxDvD,oBA2DOC,EAAoB7L,EAAY4K,EAAmB,UA3D1D,QA0DDgB,EA1DC,OA4DC3K,MA5DD,+DA8DC2K,IAAkBA,EAAerL,IA9DlC,qBA+DGqL,EAAeE,KA/DlB,iBAgEUnC,EAAIiC,EAAeE,KAAKvD,OAAS,EAhE3C,aAgE8CoB,GAAK,GAhEnD,sBAiESoC,EAAOH,EAAeE,KAAKnC,IACxBqC,WAAW,iBAlEvB,uBAmEW,IAAIN,MACR,uBAAyBK,EAAKE,MAAM,gBAAgB1D,SApE3D,UAgEwDoB,EAhExD,8BAyEK,IAAI+B,MAAMQ,KAAKC,UAAUP,EAAerL,MAzE7C,yBA6EHJ,GAAO,EA7EJ,4BAgFLU,QAAQC,IAAI,UAAWhB,EAAMoL,IAAcI,GAhFtC,kBAiFE,CAAExL,OAAMO,SAjFV,0E,+BAoFQwL,E,kFAAf,WACE7L,EACA4J,EACAT,GAHF,uBAAAlJ,EAAA,sEAMsCD,EAAWoM,iBAE7CpM,EAAWqM,0BARf,cAMEzC,EAAYI,gBANd,OAWQsC,EAAW1C,EAAY2C,mBAEvBC,EAAkB5C,EAAY6C,WAAWH,GACzCI,EAAqBF,EAAgBG,SAAS,UAE9CC,EAAO,CAACF,EADM,CAAEG,SAAU,SAAU1D,eAf5C,UAmBoBnJ,EAAW8M,YAAY,sBAAuBF,GAnBlE,aAmBQG,EAnBR,QAoBUpB,MApBV,uBAqBU,IAAID,MAAM,mCAAqCqB,EAAIpB,MAAMqB,SArBnE,iCAuBSD,EAAIE,QAvBb,6C,+BA0BepN,E,kFAAf,WACEC,EACAC,EACAC,GAHF,mCAAAC,EAAA,6DAIEkJ,EAJF,+BAI2B,SACzBjJ,EALF,gCAOMC,GAAO,EACPC,EAAwC,CAC1CC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbd,SAciB,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAV,EAAA,sDACzBW,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEZ,SAAS,OACjBA,GACH,IACES,EAAQR,EAAWkN,YACjBpN,GACA,SAACmN,EAAQE,GACPhN,GAAO,EACPC,EAAS,CACPG,IAAK0M,EAAO1M,IACZF,KAAM8M,EAAQ9M,KACdC,cAAe,GAEb2M,EAAO1M,KACTM,QAAQC,IAAI,yBAA0BmM,EAAO1M,KAC7CI,EAAOP,KAEPS,QAAQC,IAAI,yBAA0BmM,GACtCvM,EAAQN,MAGZ+I,GAEF,MAAOiE,GACPjN,GAAO,EACPU,QAAQ8K,MAAM,oBAAqB7L,EAAMsN,GA/BlB,UAiCjBjN,IAAQD,EAjCS,uBAmCvB,sBAAC,4BAAAD,EAAA,+EAEmCD,EAAWe,qBAAqB,CAC9DjB,IAHL,OAESkB,EAFT,OAKGZ,EAASY,GAAqBA,EAAkBC,MAAM,GACjDd,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBhB,EAAMM,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBhB,EAAMM,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BhB,EAAMM,GAN/CS,QAAQC,IAAI,uBAAwBhB,EAAMM,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BhB,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjBoB,EAAM,KA9DW,iEAAZ,yDAdjB,cAcEd,EAdF,OAiFMJ,EAAWmB,wBAAwBX,IACrCR,EAAWoB,wBAAwBZ,GACrCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GApFlC,kBAqFSA,GArFT,4C,wBAuFO,SAASc,EAAM2H,GACpB,OAAO,IAAIpI,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAASmI,Q,6YC7hBrC,MAA0B,iCCA5BwE,EAAY,CACvgD,0GCh6CF,SAAStJ,EAAKA,GAEZ,OADQ,IAAIrE,IAAU,IAAIiE,KAAKI,GAAMH,UAAY,KA8B5C,I,ECzBK0J,EDyBCC,GACF,EADEA,EAEJ,iBAFIA,EAGL,mEAOKC,EAAmC,CAE9CC,MAAO,YACPC,KAAM,mBAGNC,iBAAiB,EACjBC,YAAa7J,EAAK,4BAKlB8J,WAAW,EAGXC,kBAAkB,GAGPC,EAAb,4JACE,WACE,OACE,qBAAKC,UAAU,wBAAf,SAGE,6CANR,GAA2CC,IAAMC,WAwBpCC,EAAuC,CAElDC,SAAS,EAETC,UAAWtK,EAAK,4BAChBuK,QAASvK,EAAK,4BACdwK,WAAW,EAKXd,MAAO,YACPC,KAAM,mBAGNI,kBAAkB,GAGPU,EAAb,4JACE,WACE,OACE,qBAAKR,UAAU,wBAAf,SAGE,6CANR,GAA6CC,IAAMC,WAkBtCO,EAAyC,CAGpDJ,UAAWtK,EAAK,4BAChBuK,aAAS9F,EACT+F,WAAW,EAKXd,MAAO,YACPC,KAAM,qBAGNI,kBAAkB,GAGPY,EAAb,4JACE,WACE,OACE,qBAAKV,UAAU,wBAAf,SAGE,6CANR,GAA8CC,IAAMC,W,QEnIvCS,EAAYC,YAAOC,IAAPD,CAAH,sOAWTE,EAAa,SAAC,GAcpB,IAAD,QAbJC,EAaI,EAbJA,OACA/L,EAYI,EAZJA,aACAgM,EAWI,EAXJA,UAYA,GADI,EAVJC,WAUI,EATJC,cASI,EARJC,YAS+CC,eAAvCC,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,cAC7B,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAkB,UAAGC,YAAOxB,EAAkBE,kBAA5B,aAAG,EAAqCzK,UAC1DgM,EAAgB,UAAGD,YAAOxB,EAAkBG,gBAA5B,aAAG,EAAmC1K,UACtDiM,EAAe,UAAGF,YAAOlB,EAAmBJ,kBAA7B,aAAG,EAAsCzK,UACxDkM,EAAa,UAAGH,YAAOlB,EAAmBH,gBAA7B,aAAG,EAAoC1K,UAgB1D,IAAImM,KAZA5B,EAAkBC,SAClBsB,GACAE,GACAjM,KAAKqM,MAAQN,GACb/L,KAAKqM,MAAQJ,GA2BjB,IAAIK,EAfEJ,GAAmBC,EACjBnM,KAAKqM,MAAQH,GAAmBlM,KAAKqM,MAAQF,EAKxCD,EACLlM,KAAKqM,MAAQH,OADZ,EA2BT,OAPAK,qBAAU,WACJZ,IAAkBa,IAAcC,QAAUZ,IAC5C3O,QAAQC,IAAI,WACZiO,IACAU,GAAW,MAEZ,CAACH,EAAeE,EAASC,EAAYV,IAEtC,cAACJ,EAAD,CACEX,UAAU,iBACVqC,UACc,OAAZrN,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAMM,YACpBwL,GACAzB,KACEwC,GAAuBE,GAE3BK,QAAO,sBAAE,4BAAArQ,EAAA,yDACPwP,GAAW,GACK,OAAZzM,QAAY,IAAZA,MAAcE,MAAMO,UAApB,OAAgCT,QAAhC,IAAgCA,MAAcE,MAAMkB,WAFjD,oBAGLvD,QAAQC,IAAI,qBACRwO,IAAkBa,IAAcC,OAJ/B,gBAKHvP,QAAQC,IAAIwO,EAAgBa,IAAcC,QAC1CX,GAAW,GANR,8BAQH5O,QAAQC,IAAI,mBART,UASeuO,IATf,QASCkB,EATD,OAUH1P,QAAQC,IAAIyP,GAVT,iDAaCxB,IAbD,QAcLU,GAAW,GAdN,4CAiBTe,QAAQ,YAzBV,SA2BE,qBAAKxC,UAAU,mBAAf,SACe,OAAZhL,QAAY,IAAZA,KAAcE,MAAMM,UACnB,WACEwL,EACF,cAACyB,EAAA,EAAD,IACElD,EACF,cAEA,Y,2BCjIJmD,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvB,QAAS,CACPC,OAAQN,EAAMK,QAAQ,IACtBE,YAAa,EACbC,MAAOR,EAAMK,QAAQ,GACrBI,OAAQT,EAAMK,QAAQ,GACtBF,QAAS,OACTO,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdC,SAAU,KAGd1R,KAAM,CACJ4Q,QAAS,OACTG,OAAQN,EAAMK,QAAQ,GACtBE,YAAa,EACbH,QAASJ,EAAMK,QAAQ,GACvBK,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdE,WAAY,OACZD,SAAU,IAEZE,KAAM,CACJD,WAAY,OACZD,SAAU,SAuBHG,EAAgD,SAAC,GAOvD,IANLjO,EAMI,EANJA,KACA3D,EAKI,EALJA,OACA6R,EAII,EAJJA,MACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,IACAC,EACI,EADJA,WAEMC,EAAU3B,IAEhB,EAA8BnB,sBAAS2C,GAASC,GAAOpO,IAAOmO,EAAMtO,UAAYD,KAAKqM,MAAQ,GAA7F,mBAAOsC,EAAP,KAEMC,GAFN,KAEwB,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,QAE/C,OADAF,GAAgB,GAAPD,EADgF,EAAjCI,UAG/CxS,EAAS,sBAAM4N,UAAWqE,EAAQlS,KAAzB,SAAkCC,IAAiB,KAGjE,sBAAK4N,UAAWqE,EAAQvB,KAAMmB,MAAOA,EAArC,UACGK,GAAW,cAACO,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACV,sBAAM9E,UAAWqE,EAAQN,KAAzB,iBAIF,eAACc,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAM9E,UAAWqE,EAAQN,KAAzB,SACGU,EAAQ,GAAR,WAAiBA,GAAUA,IAE9B,0CAEF,eAACI,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAM9E,UAAWqE,EAAQN,KAAzB,SACGW,EAAU,GAAV,WAAmBA,GAAYA,IAElC,2CAEF,eAACG,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAM9E,UAAWqE,EAAQN,KAAzB,SACGY,EAAU,GAAV,WAAmBA,GAAYA,IAElC,gDAkBV,OAXI5O,GAAQmO,GAASC,GACfG,GACD,IASDvO,EAEA,cAAC,IAAD,CACEA,KAAMA,EACNqO,WAAYA,EACZW,SAAUR,IAIP,O,SFtHCjF,O,yCAAAA,I,uBAAAA,I,6BAAAA,I,qBAAAA,I,mCAAAA,I,yBAAAA,I,mBAAAA,I,qBAAAA,I,iCAAAA,I,2BAAAA,I,sBAAAA,I,mBAAAA,M,KA0CZ,I,MAAM0F,GAAS,SAACC,GAQd,IAAQC,EAAmDD,EAAnDC,UAAWxF,EAAwCuF,EAAxCvF,KAAM3J,EAAkCkP,EAAlClP,KAAM3D,EAA4B6S,EAA5B7S,OAAQuN,EAAoBsF,EAApBtF,gBACvC,OACE,sCACuB,IAApBA,GACC,cAACwF,EAAA,EAAD,CACEC,WAAS,EACTnB,MAAO,CAAEoB,SAAU,WAAYC,IAAK,QAASC,KAAM,OAFrD,SAIE,cAACC,EAAA,EAAD,CAAWvB,MAAO,CAAER,eAAgB,UAApC,SACE,cAAC,EAAD,CACE1N,KAAM4L,YAAO5L,GACbkO,MAAO,CAAER,eAAgB,UACzBrR,OAAQA,GAAU,iBAK1B,cAAC+S,EAAA,EAAD,CAAMC,WAAS,EAACpF,UAAU,aAAawD,WAAW,SAAlD,SACE,qBAAKS,MAAO,CAAElB,QAAS,OAAQO,cAAe,OAA9C,SACE,qBACEW,MAAO,CACLH,WAAY,IACZD,SAAU,OACV4B,UAAW,SACXC,WAAY,aALhB,SAQGR,QAKNxF,GACC,qBACEuE,MAAO,CACLH,WAAY,IACZD,SAAU,OACV4B,UAAW,SACXC,WAAY,aALhB,SAQGhG,QAeEiG,GAAc,SAAC,GAIH,IAHvBC,EAGsB,EAHtBA,MAGsB,EADtB5Q,aAEe6Q,cAIf,OACE,qCACGD,IAAUtG,EAAMwG,OACf,cAAC,GAAD,CAAQZ,UAAW3F,EAAiBG,KAAMH,IAG3CqG,IAAUtG,EAAMyG,SACf,cAAC,GAAD,CACEb,UAAW1F,EAAgBC,MAC3BC,KAAMF,EAAgBE,KACtB3J,KAAMyJ,EAAgBI,YACtBD,gBAAiBH,EAAgBG,kBAIpCiG,IAAUtG,EAAM0G,eACf,mCACE,cAAC,GAAD,CACEd,UAAW/E,EAAkBV,MAC7BC,KAAMS,EAAkBT,KACxB3J,KAAMoK,EAAkBG,QACxBX,gBAAiBQ,EAAkBI,UACnCnO,OAAO,qBAKZwT,IAAUtG,EAAM2G,YACf,mCACE,cAAC,GAAD,CACEf,UAAWzE,EAAmBhB,MAC9BC,KAAMe,EAAmBf,KACzB3J,KAAM0K,EAAmBH,QACzBX,gBAAiBc,EAAmBF,UACpCnO,OAAO,eG/Hb8T,GAAgBtF,YAAOuF,IAAPvF,CAAH,4MAYbwF,GAAgBxF,IAAOyF,IAAV,4BAoYJC,GAzXF,SAACrB,GAAsB,IAAD,IAG3BsB,EAAeC,OAAOD,aAC5B,EAA0ChF,mBAFvB,GAEnB,mBAAOL,EAAP,KAAsBuF,EAAtB,KACA,EAAsClF,oBAAkB,GAAxD,mBAAOJ,EAAP,KAAoBuF,EAApB,KAGMC,EAAS1B,EAAM2B,QACrB,EAA0DrF,mBAAiB,GAA3E,mBAAOsF,EAAP,KAA8BC,EAA9B,KACA,EAAkCvF,oBAAS,GAA3C,mBAAOP,EAAP,KAAkB+F,EAAlB,KACA,EAAwCxF,mBAAwB,MAAhE,mBAAOyF,EAAP,KAAqBC,EAArB,KACA,EAA4C1F,mBAAwB,MAApE,mBAAOpM,GAAP,KAAuB+R,GAAvB,KACA,GAAkC3F,qBAAlC,qBAAOrK,GAAP,MAAkBiQ,GAAlB,MAEA,GAAwC5F,qBAAxC,qBAAOvM,GAAP,MAAqBoS,GAArB,MAEA,GAA0B7F,mBAAwB,MAAlD,qBAAOhL,GAAP,MAAc8Q,GAAd,MAEMnR,GAAS2P,cAETrR,GAAe8S,mBAAQ,WAC3B,GACGpR,IACAA,GAAOgB,WACPhB,GAAOmG,qBACPnG,GAAOqR,gBAKV,MAAO,CACLrQ,UAAWhB,GAAOgB,UAClBmF,oBAAqBnG,GAAOmG,oBAC5BkL,gBAAiBrR,GAAOqR,mBAEzB,CAACrR,KAEJ,GAAoCqL,mBAAqB,CACvDiG,MAAM,EACNxI,QAAS,GACTyI,cAAUjN,IAHZ,qBAAOkN,GAAP,MAAmBC,GAAnB,MAMM5G,GAAM,uCAAG,kCAAA9O,EAAA,kEAEX8U,GAAa,KAET7Q,GAAO0R,WAAP,OAAoB5S,SAApB,IAAoBA,OAAcF,SAAWoB,GAAOgB,WAJ7C,iCAMDJ,YAAa9B,GAAckB,GAAOgB,WANjC,UAKH2Q,EALG,OAOP,GAEEzV,EAAc,CAAEG,KAAK,IACrBsV,EAVK,kCAWQhW,YACbgW,EACA5C,EAAM6C,UACN7C,EAAMjT,WACN,gBACA,GAhBK,QAWPI,EAXO,eAoBL,UAACA,SAAD,OAAC,EAAQG,IAiBXoV,GAAc,CACZH,MAAM,EACNxI,QAAS,iCACTyI,SAAU,WAnBZE,GAAc,CACZH,MAAM,EACNxI,QAAS,mCACTyI,SAAU,YAGZR,EAAgBD,EAAgB,GAChCT,EAAawB,QACX7R,GAAOgB,UAAUyH,WAAa,KADhC,UAEKuC,EAAgB,IAErBuF,EAAiBvF,EAAgB,GAE7B2F,GAAyBA,EAAwB,GACnDC,EAAyBD,EAAwB,IAnC5C,0DA8CP7H,EAAU,KAAMgJ,KAAO,oCACtB,KAAMA,IAUU,MAAf,KAAMC,MACRjJ,EAAO,YACPwH,OAAO0B,SAASC,UACQ,MAAf,KAAMF,OACfjJ,EAAO,sCAbJ,KAAMA,QAEA,KAAMA,QAAQoJ,QAAQ,WACtB,KAAMpJ,QAAQoJ,QAAQ,SAC/BpJ,EAAO,YACE,KAAMA,QAAQoJ,QAAQ,WAC/BpJ,EAAO,yDALPA,EAAU,yCAgBd2I,GAAc,CACZH,MAAM,EACNxI,UACAyI,SAAU,UApED,yBAuEXV,GAAa,GAvEF,6EAAH,qDA2EZ7E,qBAAU,WACR,sBAAC,8BAAAjQ,EAAA,yDACMuC,GADN,oDAMKA,GAAa0C,YACfiQ,GAAa3S,GAAa0C,WACpBmR,EAAiB9B,EAAa+B,QAClC9T,GAAa0C,UAAUyH,WAAa,MAEtC8H,EAAiB4B,EAAiBE,SAASF,GAAkB,GAC7DxV,QAAQC,IAAI,CAAEoO,kBACV7B,EAAUmJ,SAAShU,GAAa0C,UAAUyH,cAC5C9L,QAAQC,IAAI,sCACZ4T,GAAe,MAefzB,EAAMxQ,eA9BX,0CAgCwBF,YACjBC,GACAyQ,EAAMxQ,eACNwQ,EAAMjT,YAnCb,OAgCWyW,EAhCX,OAqCKrB,GAAgBqB,GArCrB,kDAwCK5V,QAAQC,IAAI,uCACZD,QAAQC,IAAR,MAzCL,gCA4CGD,QAAQC,IAAI,+CA5Cf,yDAAD,KA+CC,CAAC0B,GAAcyQ,EAAMxQ,eAAgBwQ,EAAMjT,aAE9CkQ,qBAAU,WAAM,4CACd,gCAAAjQ,EAAA,0DACMiF,IAAS,OAAIlC,SAAJ,IAAIA,IAAJ,UAAIA,GAAcE,MAAMmB,6BAAxB,QAAI,EAA2CI,KAD9D,0CAIcwO,EAAMjT,WAAW0W,8BAA8BxR,GAAW,CAC9DT,KAAI,OAAEzB,SAAF,IAAEA,IAAF,UAAEA,GAAcE,MAAMmB,6BAAtB,aAAE,EAA2CI,OAL3D,OAGUkS,EAHV,OAOM7B,EACE6B,EAAY1V,MAAM,GAAG8B,QAAQX,KAAKwU,OAAOC,KAAKF,YAAYG,QARlE,gDAWMhC,EAAyB,GAX/B,0DADc,uBAAC,WAAD,wBAiBdiC,GAEA,OAAI/T,SAAJ,IAAIA,OAAcE,MAAMC,gBACtB+R,GAAiB,OAAClS,SAAD,IAACA,QAAD,EAACA,GAAcE,MAAMC,gBAGC,OAAzB,OAAZH,SAAY,IAAZA,QAAA,EAAAA,GAAcE,MAAMG,eACtB4R,EAAgB,GAEhBA,EAAe,OAACjS,SAAD,IAACA,QAAD,EAACA,GAAcE,MAAMG,eAGtC,OAAIL,SAAJ,IAAIA,OAAcE,MAAMqB,OACtB8Q,IAAqB,OAAZrS,SAAY,IAAZA,QAAA,EAAAA,GAAcE,MAAMqB,MAAMnB,YAAa,OAEjD,CAACJ,GAAckC,GAAW+N,EAAMjT,aAEnC,IAAM4T,GHzOD,SAAkB5Q,GAAuD,IAAD,MACvEgU,GAAO,IAAIrT,MAAOC,UAElBqT,EAAc,UAAGtH,YAAOxB,EAAkBE,kBAA5B,aAAG,EAAqCzK,UACtDsT,EAAY,UAAGvH,YAAOxB,EAAkBG,gBAA5B,aAAG,EAAmC1K,UAClDuT,EAAe,UAAGxH,YAAOlB,EAAmBJ,kBAA7B,aAAG,EAAsCzK,UAK9D,OAA0B,IAAtB2J,EACKD,EAAMwG,MACJqD,GAAmBH,EAAOG,EAC5B7J,EAAM2G,WAEb9F,EAAkBC,SAClB6I,GACAC,GACAF,EAAOC,GACPD,EAAOE,EAEA5J,EAAM0G,cAEN1G,EAAMyG,QGkNDqD,GAGd,OACE,eAAC5D,EAAA,EAAD,CAAWvB,MAAO,CAAEjB,QAAS,QAA7B,UACE,cAACwC,EAAA,EAAD,CACE6D,SAAS,KACTpF,MAAO,CACLjB,QAAS,OACTqC,SAAU,WACVK,WAAY,aALhB,SAQE,cAACb,EAAA,EAAD,CACEZ,MAAO,CACLjB,QAAS,sBACTD,QAAS,OACTa,aAAc,EACdF,WAAY,yBALhB,SAQE,eAACyB,EAAA,EAAD,CAAMC,WAAS,EAAC3B,eAAe,gBAAgB6F,UAAU,SAAzD,UACE,cAAC,GAAD,CACE1D,MAAOA,GACP5Q,aAAcA,GACd2R,OAAQA,IAEV,qBACE3G,UAAU,WACViE,MAAO,CAAEsF,aAAc,QACvBC,IAAKC,EACLC,IAAI,KAGN,gCACG9D,KAAUtG,EAAMyG,SAAWvG,EAAgBM,kBAC1C,cAAC,EAAD,IAED8F,KAAUtG,EAAM0G,eACf7F,EAAkBL,kBAChB,cAAC,EAAD,IAEH8F,KAAUtG,EAAM2G,YACfxF,EAAmBX,kBACjB,cAAC,EAAD,KAGF8F,KAAUtG,EAAM2G,YAAc3G,EAAM0G,gBACpC,qCACE,sBACE/B,MAAO,CACLJ,SAAU,OACVd,QAAS,OACTO,cAAe,SACfE,WAAY,UALhB,UAQE,qBAAKS,MAAO,CAAEwB,UAAW,UAAzB,oNAMA,qBAAKxB,MAAO,CAAE0F,UAAW,QAAzB,UACI/D,KAAUtG,EAAM0G,eAChBJ,KAAUtG,EAAM2G,cACI,OAAnB9Q,IAA4C,OAAjB6R,EAC1B,4BAAIA,EAAe,MAAQ7R,KAE3B,mBAAG6K,UAAU,eAInB,8BACI4F,KAAUtG,EAAMyG,SAAWvG,EAAgBK,WAC7C+F,KAAUtG,EAAM0G,eAChBJ,KAAUtG,EAAM2G,WACd,mCACG1P,GACC,8BAAIA,GAAJ,UAEA,mBAAGyJ,UAAU,cAIjB,KAKH4F,KAAUtG,EAAM0G,eACf,qBAAKhG,UAAU,gCAAf,SACG6G,GAAyB,EACxB,+BAAKA,EAAL,qBAEA,qBAAK7G,UAAU,iBAUrB9J,GAAO0R,UAGP,cAACxB,GAAD,UACe,OAAZpR,SAAY,IAAZA,OAAcE,MAAMO,UAApB,OACDT,SADC,IACDA,OAAcE,MAAMkB,YACpBF,GAAOgB,WACPhB,GAAOqR,gBACL,cAAC,IAAD,CACErR,OAAQ,CACNgB,UACEhB,GAAOgB,WACP,IAAIvF,YAAUF,KAEhB8V,gBAAiBrR,GAAOqR,iBAI1BjP,kBAAiB,OACftD,SADe,IACfA,IADe,UACfA,GAAcE,aADC,iBACf,EAAqBkB,kBADN,aACf,EAAiCkC,kBAGnCsR,WAAYjD,EACZkD,QAAS,CAAEC,eAAe,GAf5B,SAiBE,cAAC,EAAD,CACE9U,aAAcA,GACdgM,UAAWA,EACXD,OAAQA,GACRG,cAAeA,EACfD,WAhVP,EAiVOE,YAAaA,MAIjB,cAAC,EAAD,CACEnM,aAAcA,GACdgM,UAAWA,EACXD,OAAQA,GACRG,cAAeA,EACfD,WA1VL,EA2VKE,YAAaA,MAxCnB,cAAC+E,GAAD,CAAe3Q,GAAG,OAAlB,kCAoDd,cAACwU,EAAA,EAAD,CACEvC,KAAME,GAAWF,KACjBwC,iBAAkB,IAClBC,QAAS,kBAAMtC,GAAc,2BAAKD,IAAN,IAAkBF,MAAM,MAHtD,SAKE,cAAC0C,EAAA,EAAD,CACED,QAAS,kBAAMtC,GAAc,2BAAKD,IAAN,IAAkBF,MAAM,MACpDC,SAAUC,GAAWD,SAFvB,SAIGC,GAAW1I,gB,gFCvZhB4D,GAAQuH,aAAY,CACxBC,QAAS,CACPC,KAAM,UAIJ5V,GACF,IAAI/C,IAAYC,UAAU2Y,gDAKxB1D,GAAU0D,iCACVtY,GAAa,IAAIN,IAAY6Y,WAAW3D,IAExC4D,GAAgBjC,SAAS+B,kZAAYG,2BAA6B,IA0CzDC,GAtCH,WACV,IAAMC,EAAWrD,mBAAQ,kBAAMsD,wBAVjBN,kBAUyC,IAEjDO,EAAUvD,mBACd,iBAAM,CACJwD,eACAC,eACAC,eACAC,kBAEF,IAGF,OACE,qBAAKjL,UAAU,aAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,8BACE,cAACkL,GAAA,EAAD,CAAetI,MAAOA,GAAtB,SACE,cAACuI,GAAA,EAAD,CAAoBR,SAAUA,EAA9B,SACE,cAACS,GAAA,EAAD,CAAgBP,QAASA,EAASQ,aAAW,EAA7C,SACE,cAAC,IAAD,UACE,cAACC,GAAD,CACE7W,eAAgBA,GAChBzC,WAAYA,GACZqO,UAAWmK,GACX1C,UA3BF,IA4BElB,QAASA,oBCtDd2E,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5O,MAAK,YAAkD,IAA/C6O,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M,oSCGa5J,G,KAJyB,IAAIjQ,IAAYC,UACpD,+CAGoB,SAACsB,GACrB,GAAKA,EAIL,OAAO,IAAI0C,KAAwB,IAAnB1C,EAAMmC,cA0BXjB,GAvBU,IAAIiY,KAAKC,aAAa,QAAS,CACpDpI,MAAO,UACPqI,sBAAuB,EACvBC,sBAAuB,IAqBvB,IAAI7a,IAAYC,UAAU,iDAEf8G,EAAQ,IAAI/G,IAAYC,UACnC,+CAgBWsF,EAAa,uCAAG,WAC3BR,EACA+V,GAF2B,SAAAva,EAAA,sEAIdP,IAAYC,UAAU+E,mBACjC,CAAC8V,EAAM7V,WAAY3C,IAAiB2C,WAAYF,EAAKE,YACrDxC,GANyB,mFAAH,wDAUbuE,EAAgB,uCAAG,WAC9BJ,GAD8B,SAAArG,EAAA,sEAGjBP,IAAYC,UAAU+E,mBACjC,CAAC4B,EAAkB3B,WAAYtC,EAAOC,KAAK,WAC3CmE,GAL4B,mFAAH,sDAShBJ,EAAe,uCAAG,WAC7BnC,EACAoC,GAF6B,SAAArG,EAAA,sEAIhBP,IAAYC,UAAU+E,mBACjC,CACER,EAAOS,WACPtC,EAAOC,KAAK,WACZD,EAAOC,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClCgE,EAAkB3B,YAEpB8B,GAX2B,mFAAH,0D","file":"static/js/main.c76523d3.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | [number, anchor.BN];\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) { }\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export default __webpack_public_path__ + \"static/media/comp.97300d69.gif\";","export const whitelist = [\n  \"3jfXoQbnAbr1HXqARAqnykjo2kyV8z3pqSQ7JzaZsq9y\",\n  // \"49PjnxD9oFDnS68p5GhzqN4F7DPeKYbdPe4vGj7VxENN\",\n  \"73DocximkdZ9tMXgLGoick123otH1gjXySs5v1inGMyv\",\n  \"6Gv3XddrStwpUVfYxW2xAzEgjJyhybH6DCBxs5GKQTTr\",\n  \"6E5Ms7n5V4REEsGMYuJ81eLif3v8aMhYzmASu6ZrdfHT\",\n  \"33YsxGSpg9he2iS3qhL2rTWMheprq3r3aqmpxFefiMRW\",\n  \"N3duEQWvaqcq1V7waE9a6pGtrBBriyWctkEW5LFci5C\",\n  \"5r9YLAyPjH1CDQhtwaWGG7uK2hvXHhcjjxAceWm2KHVw\",\n  \"9GrEmiMRwxVRbyfEPuSvoMLhNMSg5nhcccCz7N5bXJh9\",\n  \"2FAW9JykdR5Zcz5U8CR3MFVGVUoiWDXHCStRGf33VwrE\",\n  \"GwvUxpMKx5fXroriAJRfuRnzgoWLYMnFNesosaAcgzCU\",\n  \"42extp8UxG9djizqBkoWbrEyPmFrh4YxkVRPZH8oaC8P\",\n  \"4ZLzgmqroN2Au6USfULhewVrey7ehbXnGWvUizB7GLz7\",\n  \"4zdmt2NDtpFnBQgRvFumJExa8GTJDLq55YZ6ZNBc7Kpt\",\n  \"EJv1uWYSSnNDRA9YjYNczr4ZbvSSVaLktASoRKTaKg32\",\n  \"CpFL29tfQi4szAj6MAQnLEoBuYC6N9TSAJi9cjZcDhC9\",\n  \"AJ4ChsbU2ByFLQPzebkDajAqzsnvBGhNYhA6a5hRh6rs\",\n  \"7AoozTPHT8jaS5YjGXEntihhsX1kEbv5RAT7nQptZ38N\",\n  \"9ieLNftVjxnFNyaYuMdXacNoBnRQUbsRggJcM7FrjRpF\",\n  \"WUaFjLHh76f1168o2esLHxTt2imqTGuUj7RZ6L5uUZ7\",\n  \"A8qncfGwb9K1aXtihVjCJEzXE8ynvzgGQcSSVyP5L2Sz\",\n  \"RUdBfj2yv4nh3xjd2du7qiBaZ6HTgaFjC69FPwg1o8P\",\n  \"5nBiWX9UK8eWfwwo9F8ehLNwcQZifrGbHzijiZ6J7XRX\",\n  \"N3duEQWvaqcq1V7waE9a6pGtrBBriyWctkEW5LFci5C\",\n  \"6p6ZeGCSyJi6HbMQcY4THejDjRj1tA8Hi3BkBXvydkWZ\",\n  \"H8UHh6BYifKgsf2Br3B354i9Az5nectaEuToJ6MFrPBm\",\n  \"ATGVq6vDnzW5fntBscJgTzb2q9SRPUEFyucC8X2efAhM\",\n  \"AsqQ4LNF54hLQFXys2xxjzsQWA78sHYKWuzNEDLhDZEg\",\n  \"4Gbxm1cvSoA5X9Zi4diuagmYonY8cU7YhLVVc4u6VKX4\",\n  \"BdypcXxPqJ13q5crYTDUtWvAsM2FXjk61KhaxYu1xvnT\",\n  \"5zrZsUcqVfo56jNZKvdhxati9S5yLJvd1Dn8Fc8midAV\",\n  \"Ar3bsYU3Tsq4ekLbzZRNRA9GUHrMkNDyTenon46KUXVh\",\n  \"6sA6umUrjLx2W6cywBxUKTiTVhuBBVrscujzSJo6HGYj\",\n  \"82tqJhvwSnBRmoB2P1VVAxtWeyGsPQcr9wBmMtostCBK\",\n  \"21hADPJuuspjdPPHC7KGutQfsv7BqM9sxFsngtgrudsd\",\n  \"8QpDLuTVnUy73fdTesfFzkz6XzB7cozb8p47gUdHYMMq\",\n  \"8h35fpRJwuh1Y98GHkeru7VUVb5bYXyG7f5bngyo2HHC\",\n  \"8xf7xjYEvUXHiTjZE66Jmv7sEwqNasJb5asEn7vmV6dg\",\n  \"FhhdVyYPHGMe5LRpMveaWLSjfMzLwUJEerE7KAQewuuR\",\n  \"AYf1trfpvPprUUMgkfxxF8Yg7NEU6Sacya6SaRKMENRL\",\n  \"AWVjWDgeFAxWvhGjdwj11bbvjJ5Q6MY256JCVD5LBiMD\",\n  \"Fpo38LdtQQPxnr7DHxBESPtC6gwr18RwVvcxgLTra8fj\",\n  \"43icNeq5TuBJMhtehaket88ZfyJjVmMgp31uD6nStHva\",\n  \"4qJV2QPveuxkwEX87gB3914pqXX9udF1J7jRo6nkxwXh\",\n  \"4htjg4WdGpmpTPiySgdgTQHzPeS8MWKsdrQvBWEEcMhA\",\n  \"8WuWCJqJX37fp5g5hsfCtdxL7LXmejkZMacpVw2dsure\",\n  \"4UB3A6UsgM3m4AmrbU9vKjnryGqZbbEQpN1KKGJZs2dT\",\n  \"69qddX8r3xKu2CeJnPdsmn63tUvhDNstNK64ArbXMsE5\",\n  \"94wMxdR5hdqEi4bRFUZ4KSA3PJiEDjqHm5wq7mj6hXYs\",\n  \"DfPWNtPzigRiJ3kP2E7mSJ1TMstMkGN9L7njXmcx3pBV\",\n  \"9YoPCz79KtACGRtt6ZReYWWeDySV7GY6KDnhDW6xTyAs\",\n  \"GUfCR9mK6azb9vcpsxgXyj7XRPAKJd4KMHTTVvtncGgp\",\n  \"7jFfmEm7bHDvj6SwAKF1i51ANmcQhfjMBupZqDgDWTRP\",\n  \"Mya9Vvt1TaKfkineox9SZZvRcGCFqBKaejh4DZ9bmop\",\n  \"Fnca8W5ynPykW89G8eDGrGMFtEmAhHBDZA1vGq8C5Z5w\",\n  \"H4rsKMxm5vsWRUJ6Tr7CL4rgg2EfTGVomJeavV6p3d7U\",\n  \"EDVkNuTuCckwscAzHQ1yjcmv5yJ1o51dZQ2Cc5iwQDr5\",\n  \"CJipex1bcHPmjusvzRa5R9aD87a7NaxGst3VHFZbbazs\",\n  \"DzM99BAEAfhF2EMqRu3hQgkrMYCH1pV7c2oVmRLXnLFG\",\n  \"9JAGgE72mB3bVbU6uvzZNNNijkUBAEu1Ww5o5AjfBSg1\",\n  \"9Dk1PzQv5Uw2QpffCHhNCRrTnKdVmw4zi7riKie1p6EZ\",\n  \"e42LcYSn6w1pYMMJo2dJcbfXGUK1QF9fwjay4j81mUX\",\n  \"9SPir4quAjPKktakjzd4wMFizYwN7yPTRhxqNKXU4miu\",\n  \"91BihdVu5EPsAF2oCxnmJhwHh8nany5WkwrF3ocYqMEG\",\n  \"FU4QU52s1rxaPpjvWmScKgtMxHL2TTRf4pXSnbscVLWo\",\n  \"4hj4WDFDwCLzjfhWFVxGzaW329YZT4xRd5jeg8Dn7YsD\",\n  \"DuF5d6ezm3b5LAqg6VMASyx8KC8B1GWMtEQxZ2xt9PW9\",\n  \"GMVzrbP6HHSrR63sHNFwGn4cBYqDiYBPaREzun3sJUAz\",\n  \"AMwdSHwEL1fJrPaueiKgpfxWum2VoSN95qEcapgys297\",\n  \"8x6ZDyxwfRmUpbaHHqh4tJYzHUfSWpCZ7613xLkrf19p\",\n  \"EtSe7tEsqFzGGTPNb6Me1CoQXm2GQkQWrjYYVFCmNyWU\",\n  \"6Vv72G8Jhw3LnEsRAst1bbrpKtEFGKiPqDfHSHnpDNXn\",\n  \"GWuhydxAdzd3JLD2KxpUh8bx892Wr3Q3tqFCBWDvWDiz\",\n  \"DmRjqmVEMmM29EHUzhUJYYg4BNRg3yxStuttBiwFvGcm\",\n  \"6Ex8sNgF4inzWtmg6TV467kw7XBarx2soL77bhWr62u4\",\n  \"7SL2CLWXDoQXncS5rmZwcDmPVk2uhCtJ15kDs855Vsaw\",\n  \"2A2jrj3x6PE5BZxbWZHxQCAQYhZsYnAMMusiZYsczD1r\",\n  \"DViDhrqvMfoN2kgLbVYvHD9jwxxHDstGzrfZvvCLSsHg\",\n  \"GGHfvbgCrhn3gDd7eh72eHrMYb1zfJxs6s1XRdYw9ozU\",\n  \"3MhejN7upBp22gzsjByPzAs3u5XwzJNx2DmVSmqmttyg\",\n  \"3QfmAoarWWeK2ApXrWwsxTGNPcrVy4Cgkj5kNAxJd6b5\",\n  \"55cacNbr6X4qN8WYQsDk8aXTyihyr1sy6xa83TLeF3RE\",\n  \"3Z7HpaBBQhmuz6bnc9jtTyaSjWSmZzUth1jmrTmzYFxk\",\n  \"HVkNEJocBJHdyAJErMj6Z6TPCv5c3hSqgC4LHNahM98T\",\n  \"6sor5rV55ctoFebRLWvyiBNcdETubwu5NY2tJi2Asks2\",\n  \"8VUgFAQaDTsCaUkXazQQsCvrtHJcNVgwD3dCqhiNSHnR\",\n  \"42SPGHY2fi6LxC1Ce3hwDLesbVnYTAuXdi5yb3xnmtJY\",\n  \"Bc4AizQ8U2GP9yoi8u5Jn93we1RZJbY2heRUF98X3cLX\",\n  \"Dgo9btjNER8odCqgTcnfW2sSJg41znAGBxyjPZx17C5A\",\n  \"9HaUnviJiZx4AuPykK2tpNAADPDh8MELC6U95mCaRBym\",\n  \"op9p8Cs4yFkTVsPbYiZmSFfYAzt7AYf8w6wwdsaE6BG\",\n  \"DvnewQpm7k9PpznvsCh9yuhBQjhdXeyLDx8ny46598PM\",\n  \"9ECc8RQjZPBhXwTHn9pyrJyNttAqw8vrKE3TCjkuEHKi\",\n  \"J4eKoEHFgnZWitZSeq2WkBnTB5XLf6WEumTzsybcco2G\",\n  \"B8XTArjHd35SotB6wicU8y2JsjECdE3x3nXpnezAEDdc\",\n  \"BaT8nhagg3PthmE14SCG8Zwcz9Ei6qykpFtiSSJZtuFh\",\n  \"48gqd8Cj5xtry1vHoQ8jRT1pjUDsgcHomCoQwiB6mcwS\",\n  \"AJnvFS7cWTLrHLjH8nXQmthLsQfV7Z4yVnrXgq4Nxao9\",\n  \"2jCKwVUKXvkP1eCqXoLfxHwiSH3k67fjXddT1yoAo6q4\",\n  \"5VERLanPm1YPwMf5agdSVhzBiYsTHHVqndMdXhuwQfjm\",\n  \"PrGDWSJeMBwwWk5opHYbeWqtoij63ZPHiYXDQWvH83b\",\n  \"78xufrnBW9fs1hZZ9yJZZ2iZA2P9CpBKUEuvFKfKNsdA\",\n  \"2ScGSiWDnr5c9XVMmAYXWXLoGonnphmQ9x5KSbHA9ZCP\",\n  \"C72tE7d9FvHC9z3ToQWMNVu3w2e4vPFRxmQF7yPprVkv\",\n  \"DQLSyZUt1X8UkBp3eZ6eNeHthJ5z5ipVAgft1BuxBF88\",\n  \"CRptsfC1zYgdFVHUkA3NfgzNchZw3DACMFDfQ5dye5p9\",\n  \"AE3po21fn4SFnxmVVMGt1Xa5KUxg2HVYnDYyLfw5hdC3\",\n  \"GULL1KiqyvVxxo6RbCkDxwWz268yrVmFtoGDvirQfk4N\",\n  \"2F9o5QRJhJhqRRATiUuBSbU74nNGyqxtZdfH6U8d8ubJ\",\n  \"HbyF44Has6hZdDCRjtZAGZHDS912WuNUeaFZBqKTauvj\",\n  \"GqPHGc3he7Hqh9RdoneQLPoKpJ2C6LU3UVxs5AHB6kc\",\n  \"E1miQg26u5rc5Kw3HQ19RHnV9TCJyBAf3Z9oXfQw62J5\",\n  \"6NdNB9pZr1xNWWriiXvssjxUWisSpfr51fZHzS5rREHc\",\n  \"DxD3wsYRisR7gWzqsMTyPKQDEpVbTfnXV1Dv6g8pifZ7\",\n  \"C4eBsRnzoGztXNxrpFvoVx7SswpPc57h4GeKrW2M73kr\",\n  \"Gre1bcZWt6F1US2MKNowJDXnoyNrpDjfhDvugoi8rkce\",\n  \"A9BZ5kjh7iKu7SMzA5WUF31Zst9V7fehwDZaoKs4NpSi\",\n  \"Gg5GyiVtAQMqUWUX1vXHkPE7cibmzEWxHUa7xiQ5FozQ\",\n  \"2zou3SCsv6STjVBLLLnTJjGHofXsKqsm3w6r6uV7tkcq\",\n  \"EUatkH3g5kK5TyxpyUGD9DJ1gtyceAMAqChi5nZ25FQq\",\n  \"AhKTWPuFvQ2MeHoXEPDE9MoEwxH6EsmNzENjPuN8nSpq\",\n  \"9qVsdnWmkJKPTfUMZ3c5eJzhXVD5AW8gK4e5Vb4B2DCb\",\n  \"GKxQ2f6zkSb6cnuFm1eDbWVYxUAo7C5mVvVSYRocLLqK\",\n  \"EMLQLJEbcnDUreonvyYNuhjezUBJXsjWxZUgeWq2Hqwp\",\n  \"2EtMPjMNWsnJN6DiPNsRoiWSx7xSggwfWxkEMfAVHcCy\",\n  \"8Rqry6tsJX4JumngxL8rtSmHDroD8BBQoy1fHPP5LYrs\",\n  \"2yRF1Wx76RmDpMKmCFgKa3UUmmtsfHLBxLHDyKTgVmKM\",\n  \"4RinVCULPBgb619Z1Um5PMQutYzHmnPYjoxTzC3mWgm9\",\n  \"6T91ozfhcGja2Xhiy1onLixZRksxtDuUmiZjy6BAdtqF\",\n  \"CcoBXF3qbTToppexNZrLvNpwozj7Sw3RHDxsLoGsGbfb\",\n  \"E9tJ5JPTVazdDwmQQNXpJux958Nbq3vMVTjFJbN8iS4G\",\n  \"FVhW193Z49ersvCy5DhTFjEKjviLv9GrcSKRpTHwBL5U\",\n  \"DwSJYp3qjKLX15fVyEwMMZp6xi43gCNyFS29o4juq3a9\",\n  \"3ZKtfDVA2MyzoPqkDXZxepUornXvMmaJq9Y9z8J5oCDP\",\n  \"AcLrq8WiMTcSQMtaaDMUnZrViWYAP26Vv8hW7EkDyWeF\",\n  \"FAm4Rc3Md5QdNyLLanifRV57mVxoJjzpthsSYBgGun5P\",\n  \"AshQj41gVUJBUM7DUjwERJYbmcrrkx9CZnF3QzmyNZVk\",\n  \"F8BeHVZUmH7iqhQCFkxC2XLv7gJ3RThFAc62pqBTZxpu\",\n  \"GxjpUKgE3tye1nd28S7V1fGtCJJPu2447pbS7WDoDK1B\",\n  \"98wQuaWWrT6qrdUPp4KQfBTWieYq2q17Bmyvy97LqARD\",\n  \"4vRAe16hUqoZfgKBJE3zaq6fAcrDpkoffB5AUeb8o8qu\",\n  \"Bc5WfN1D9vCsDhCcfQJpxUdMLNJV1vXRxZQ8Ke3BNyPv\",\n  \"2njav2QGPqXGTu9UDc5zKdkWPyheam1gbHebSvGbEvTf\",\n  \"7zJupEJpwdR6r4YKkE5Y8EnrLTeUHmKQjPsPueBQ5xx6\",\n  \"FYNvX3cgnbH9cxji7SgyUBupaiBbshndTrBAWovaD1hJ\",\n  \"13RYYCNXeJKgm1DhuX65ya5FbsXD9eLMAWxK77owP8KQ\",\n  \"3uYiwGuhfd5wbFkT3kiPhF6AWPgvBh2TYucMExVJzPKi\",\n  \"HGfw3ZqYb83r1FieoTrfgkFMUBkVWU5dSB5esfHLRPC2\",\n  \"GHdtxkiwh4NbzdnocZUcoa1K6uwqWfKkCziGeb29iuPd\",\n  \"BmJCBsBoR5fonj3ERRoVJUtVkv4N8ZxF7fubrxmHRgyT\",\n  \"C1rCHHGhPad3kxB5gGR7rze2xtuAHLKNJEJL6b7e1bC7\",\n  \"7RPsvU2anB3phkYhPigYDoQ6QVdVeNpyK5VnGGGHjNPj\",\n  \"5KiopUADRhAE7zgW17pvN1SAVGNbb88Ej4u8Ljwx1hbS\",\n  \"J2qqpUHcKrhE2Mv591YdT7k1j5cvZ2jaL5CMQb5A6FG7\",\n  \"BuGMfiEpMFUYNSQj9aSZ4wykJJ2B76yeC9jJ23fNdd7d\",\n  \"CQSQHCgVGddcfY5P4sx8hVcyymMhmx3ZYebmfZXM9vo1\",\n  \"455pxkNS5DuCgZDQQEUTvkENxCaGFk8ZGFuBvadNAjwH\",\n  \"4stHJ6DvikpcFxdJ8WqZMoL93qAsGa92j1zZfSXGFQ36\",\n  \"BMC47PZd8ocS7NhkHyPoqkHYTwDS96jKmMQ3EGWz7GTw\",\n  \"3D49QorJyNaL4rcpiynbuS3pRH4Y7EXEM6v6ZGaqfFGK\",\n  \"H6f9GcExQuq3mrpytdnieiircJc6w1Z9JWFSq7b7tGXu\",\n  \"8uFJPpmpgSCv3v27Y3LEkQhjbN8A8xZotEphSVMSqB5Y\",\n  \"5LGJPDN3s4qecEqvUJqsUmX4MvDLemr3vXnyB4T1JS9X\",\n  \"Hf3dXj2naM7ppHuPzKqyNqLG4jpWZHKmPW9GznXKJRsE\",\n  \"CxWyUjYb6hpfRnHQxbFm9yxZ1gJmvYxVhNderNUaMDhU\",\n  \"GTRbCGuJqaXxer2STjzmBcZ1QbSQj1poPoVGV8kUxM7U\",\n  \"3PswteHFvfEoaZKUyVgeCyHKYNnvi8DNa9mo3TBMabPh\",\n  \"AP98DsWpEHnpTmvRUydQ7Bq5sCd1KB9UjtTEXX5VwUc1\",\n  \"3EobZcvPCheGcvX4fXxAviRpaDdJEbcCJvUxgWZZjwZn\",\n  \"DpxAaBr7r6UwFsZqidGpTX5oR8Cpnue9yxtc4gUsemEV\",\n  \"8XGD8C4ci9sypLs13fLfQk5BEiqBDuTPRVAbJYKgBFmt\",\n  \"C9crZa2XpbRGnwmH2kECMj5M7bW7qaQf71EARDsBCafa\",\n  \"4oyr5MCWomw1g6JGmsUU6tcamrKetHnq6EsC9LvjULJN\",\n  \"BpLS5WmpcN3VA2LjGkYUqRHtAWy1ESZDi9P5JWhMZdDs\",\n  \"Boe7WfojzyLL1VEDJQ3EimmdZk9vmQRJfiGAKoyA6xoe\",\n  \"Bwe1cgLcTpVbXovw2GmVhjNxVRNEqThHRRp7JvfbG57M\",\n  \"P7qjmJX8786qaX5LzxgFiAeQCXfFfMegs5vjAatBgzf\",\n  \"Dp81iZBeQJd2FCgrHRDonX1aAcgiAUAGzf7MM1piSJjD\",\n  \"BXZKTvZvpVAdejhBj2nzhZEWFbBm1LZrXAtFx63wPwf4\",\n  \"3xt1u1qKNyhZpAu3nmpgZPeEboaMvfjD6mKxgQecw4r4\",\n  \"FpnX4LkydhDW3cp6aQrLbbDJM3uL3GfmDZzcoEwsekzj\",\n  \"6RGWMbrW147cqfRnA7fxmuGabnxukCTxFQybiYArNzSx\",\n  \"4oeWbPW9HSw84U1B8SEFc96VNycWkrDJNANk48EeFe9V\",\n  \"BMqbU7NCqxabS49QbSjkk7jxV3UihgdCLPb3PsXcc5S5\",\n  \"8wDB6CYeL2UCjWQ97A6CgQJg5LMbogfxehmercKok8EP\",\n  \"8EiFi4q1ytaUXn33NcnYf7g1jVetPocbeKJ5ZtcNYfjp\",\n  \"6QLQQPmconshhvGqQgZpD8P7iuH5pEr5iWTfh8kGDuAS\",\n  \"42iLndNZDnV5RS4M4FntXnPLLSPo2VriwJg5QtDCmNB6\",\n  \"9odBX3hiSVBG8VYacAPEhqTjVY3aCCpkFz2RiFaRA3uR\",\n  \"7Uytsv7Vrc7sjpnRcseS1ouMUzVwAiGpmqmTf9Nn4LqN\",\n  \"5GCYUxrFBGTrKAKmCh6s6vCAxpULHcgNViHuKdaUEUNR\",\n  \"2MWfYxsaiRqH8TdpFjVntNZpVjeTteJpR6i4vyueWnwo\",\n  \"ECGt2eE8kpBb27vRRfTtbSDvCxSkdkE8VxTBxLdoL2Kk\",\n  \"BTtR9zJ6t4sgDm3dkCZExmaA2CDR9t4F6Z7MpSpGg5Mj\",\n  \"2iXiEEE4g9RdajtaCZKcFSRQN1xYXu1F6YbPGaVzg6p5\",\n  \"4jqxMCMCdTv9gdEMJeQUM7UjLYqygLV989qS33Q2gddw\",\n  \"GGNbTVpo6mhWN5veBJBYUjecLmCpX34JyNYbj4UyiGss\",\n  \"BLEaqnxv9X14uAXoK56ubaG8wupmrFaJ2o3VGoJymiB2\",\n  \"HoQ2aNWuy6usz1ARnjjS7uor5dHiq3JuLe1ADVCfGs3n\",\n  \"47xEYTXB2GjgxZhaprBzxqfjyFtUHbcZTiNTKBsWbvgv\",\n  \"CkZx3hkJwgg991wABLmaoYS4zENVFou2ggV6DsUU5cJC\",\n  \"J6z6FEQsGSFgiCnyF8YTzpwvqQAnjY43nkFa6YvA6ejj\",\n  \"42o7mgFLJmvnp4SKfcNkGzqxW9dz54Bn55DzHXp4DYaN\",\n  \"7LfphdNtKmy48GZDssEZ4DqNSd6xuXWroddVfQMaCmHu\",\n  \"F9FDfSKDjH3x8Hdp16CQb5nH8yfAVsYd1tpJJaJZsv9G\",\n  \"G3HkMoaH8YcuscLQdtHgfqYXf2taMq1LCySMA54f3c4h\",\n  \"FUhpB3JTSCTj63f8R2NvMyxePAhDTytgGbS5AQ1dZTyY\",\n  \"ePuUhFAWgtUXt9PCZXiCfryKGFpxhdY4FecgQN2LZmX\",\n  \"HuvBS8z7sKuPXZpx2cJeNgK2i2iHv3bLLAy8Ro5GrnyD\",\n  \"Ewjp6VjCVFKKSmTu7Wpruygp98cKBnFWHbxqJcUjHjPQ\",\n  \"5ypboNhZf5yafwtGwUMQU8K5zTPAovYde42GHHK3NCL7\",\n  \"3dkCRNmgsJjfLBL4fBBwv4VkcAc5VAkrtgXnCL7kUWFF\",\n  \"5LsYixox5LC5iw1axsSMey1g9wyM9d3BK3MYTXu8pdsk\",\n  \"yBwafintsXmcnJxfZ5iped9JeGH7bfFC2oNoRRtEB5T\",\n  \"CWHGQdhQe6tgeswt3sHwpspPoeCEQxBQD7BUT4t1tKDw\",\n  \"9h7cb8S3kwCJdj3JMp79TxxTVPkPFCTZ7DzLXUesCXBT\",\n  \"9KKTW2JY5HNDxKkLkZDfcEr2nRc7FWSw8szqKjzekjpy\",\n  \"3xb6jCpX5x8DboeQoZREwpcvC7tNs1THpmG9ydSAJBMK\",\n  \"Vgrd4pGoSSN17WwQyP1pmXP1ZSKyvEBGMPmJczdrycR\",\n  \"DBG1mzQkEEVVFRvWrodRfJoryGgcgevpN2yohFk5vaQW\",\n  \"BQwyrNxctcnxbperxxPA55GnD9wpYmietNnqQGG3TSCF\",\n  \"58hPnAKuSgEc5Bwe9eVkr6ZLbmRQ5edXp3YFFLxEMaaX\",\n  \"Cz9Ggouh5Jv1zu2QPuti5znedQwdSFLA3r9MQ6H2v2GH\",\n  \"EBVKR5BhTmVxrBgzzvVX4DDX9QN4QsV5c3w2HGWdbYv\",\n  \"8ssv9X9jCVKr4DRNdWF3wEMDXY5nQw8ng17HeWvF8BcY\",\n  \"BRGxLVuCqJS6VheJnHNWaH148usQXqVPvNiAkci7qERd\",\n  \"9db9XH7Dm8MY6VVXGwSeTHiffjAAzEUrAxRgN8xvD8i1\",\n  \"14WarHTcfFZr3X5kxaY9ZT23iwuwjxFQd29WUgXz3GdE\",\n  \"FFF7G999e28cS2LHs8kECuhWPbrGxbYRhwHufrJ2i6u6\",\n  \"AncUpgSJfsMeRV8bd2Fe7NqKNNFoNg5KL1GapRP289UG\",\n  \"Ez2U27TRScksd6q7xoVgX44gX9HAjviN2cdKAL3cFBFE\",\n  \"9qSrkW59sw1mbhgo7doY4tLdVAg3AzYG3UTpELgNzSEN\",\n  \"6E9mKv3oEbZbfDUfv5VDjsQPzepgoMu51P4kCbneH8GL\",\n  \"D1etH3Mtd5nC11kqHodDgUyyrJsyRZXta66gatn5WzFr\",\n  \"8PWVnrnGdntY3qL69JMSBUjh64S7PM6tKZEaVhqLevqY\",\n  \"GCL18bUkAzwaBRcppJ7JQ55JMpxw4z73KEjb13Get8X5\",\n  \"7SREpZxew3YXP8VdhU5YpcyGNwEAYWxRY2esNeKbYnpd\",\n  \"G68kSCnZHywGLYCMRF7gbLanDhPYW9JDJDa6UeXdtmc8\",\n  \"8UNYTvDq5xcLH8Hx8W5hMEMRnCy5vGyZFP5ssKNnAZ1A\",\n  \"Chg139rW3Y8HMuMFp3wvW6E972bxuRFHmFqj5Db6vPfz\",\n  \"FeEmMVEjVirG9JWkiaNdCuwDGUVReUZQeyhF73tyTLoF\",\n  \"G9y4HBXzWqG4VvTZJ3Qa5c488P8zHtuMMkrv7SGS6wwB\",\n  \"HkJ83GMTxpRjRUHmG5rRpXY7MDUo7LAS566NvDosN9UE\",\n  \"96StvqZyFUPtyMr4o9s7K4V29RSNyRpVi76vNwxG5rUf\",\n  \"FRUY8Eq3AdxtN88BfwRccPpqcAwWSXaVgtLEt2pmiSQ2\",\n  \"9PAfAY2DFMwkAUaBnjSaBQarrujgDENzQPpYd99yFku5\",\n  \"FXoGoX46QZzBZXoxiEeQ2uakT4VYgzLxmvbbPEC4MYbM\",\n  \"3rPJjpnjK1ZKZN2gwdsjtKdKUsT9EmSiNV2B1W6YDBE4\",\n  \"Bgn45ZU5geo1KN9DeNg3D7z9U2dQHgF4Q3nL2WtMBDZz\",\n  \"8iW2qBbZikax31At2hgrdjMr6yzy2gBomF8fiAYtpjmz\",\n  \"5idkpyQmzsrHWEdK9hLMArmpGC6ks6QYZPhiGjBRWz5o\",\n  \"8dzBaVZ1uDVfBG7sWg6YbfPNLCmWq58BR8kJyoJLzKyb\",\n  \"khoYitzXPnmjgKtCRBLqmdYwUaLveJH2F1BX5YHkyyr\",\n  \"5XSsdZjtSRT8mQuh8aHa2Pm7mJDDa94WACG4ZbCyGfNw\",\n  \"AgdQVENxUyqb3A6hWyA1RC78Jck7UATu2esVaBSHoXws\",\n  \"JA1FViTGQ3Xx3f5hDgW5B59YbFbCsbrLaBnvRNbJ7ZJA\",\n  \"G9t8a8iUtxjHLAZfsQxPrFKaWNtJi6ai4iLHGS1hszpK\",\n  \"4YTx7gvVNbFrrX7rKVYnwtLVWbyeBRiva9MaEfCMMH79\",\n  \"5Rr5iFNZ4LRqkCyVb2nGHwkhc2C4R5aTC3wRMVGMdW7V\",\n  \"ADswst1saFSwuTBEhWm65Bn9W7XsA5jEPKXPmxXU9xCW\",\n  \"hzVzTWzzqQuFpfvwoBEDvTJoP9Kn3H2heq1SJoJKFQg\",\n  \"6DbiNXH3cBV2jd2NCK8iSZBFDPiwW3MwzZoURgBbYvY3\",\n  \"8AiU51z5m27oTwKT996jzp9TcUUKEffvNgaZQCHhR81i\",\n  \"pvXtbc1eUXoUsZRe68QqFDEUe5FFwLMzyZbxxLnurMv\",\n  \"38Wk3DNqBNCdheYYzyv81qAFrRbpRnseXqg7RkDwe58N\",\n  \"2YeFxPnzyrMzRz7ZyyfCyfVpJSCr7kRaVuHdh6RjKtvm\",\n  \"24qXdtSVfSWSqSvuMuhzefxUsQo3DQfh6WBUMNzc25is\",\n  \"CHCbVwPoDzQKSw1etpsMM2HRrnTAVAVstUgBejA44By4\",\n  \"6xTS2FiBieqv7XZKkpzhKy9n2U35UA9UuhmASvjiud9b\",\n  \"AgGqBABTBLM36gkqyBcJC3gFCcxGTbnL8TsNmVgKWnte\",\n  \"4A7c6Hkb5jED9dkEDhScjGm7NQqCuFSuXaaoyVjrWKEm\",\n  \"BMfCCphD94TX3D9Z4dbQV7qgmSAxJMYstPCsQniQvKt4\",\n  \"4Kcd92WqNzioAZbpF1hJvXua2FqfTwQpfXzokkyXSokg\",\n  \"9rigaUX5HUgpEKEHLWrnzoh5PUSmUEjE49J3tnhdhsRZ\",\n  \"7kpGDhSwN7EC9CRmsDRAGE5rgHq4HCcp6tPJrU9Ymgcm\",\n  \"BhursHnNmNsjuwvNggTmF4RZxTLu4s4wzBRicbo3us9C\",\n  \"Dt6TE5iLyad79zABLi6u2GJdfEfodBkhjAVT7bNJ1tQC\",\n  \"BEXrdsRV8HDWonj3vMNeANT91azB3nxAHTCNSiTTw9vf\",\n  \"EpYJ3sTerwWHimXppz53TWsTkrHFKpbAPvvC7QAjGHac\",\n  \"3wf7vAzLzLAwsoiAY56gjYx7mnequGNM86Pp9paDU9kT\",\n  \"9YuRyazsjB6ttwyx7ABsWQsfSrm91ejbeSDFSdDty4jq\",\n  \"3gpALrjzU556nEDu5uqpa7s5dZ1Tr7Qj3qgKUvcnR5xh\",\n  \"8tF6cAzbPdrYJ4mmDtgBX93A6rk14pUhD8M5Kw2cDn5a\",\n  \"D2ypGfmrgSDtxGBycd6jgM8kfpGpyvogMx6b4Y895aS7\",\n  \"ShR3beBzKQZtqhQRRExGobtV3oR9m55sY7pGRyocCsG\",\n  \"89hi8isQb8sc82ubwmWPY4A73F4UPN7by51WUer5DPBv\",\n  \"12qQR2ySQzZ4DduLXggRGUhrZdQBoPwDE8Mp23QdR7M5\",\n  \"2Uoqv8DWWViWtdyDmDg7mAx6WoFKtocCsbcuA6zgAKMU\",\n  \"2uaefYFqtqwpFmKThpu1FhJuSBh1Be9gEQz4EJh4dDtt\",\n  \"GCwXb9i6u9xctN4V65i8uon3zsibbhvZXyt7bJcWWF4Z\",\n  \"3xszSwfU66sE8rkmapoSqH5Hkyryesh76foJQ9J3RPGT\",\n  \"5mjmC2g7xHxQrbSH72ByKLXqvw8p9YiPDdTCwSSfvsNZ\",\n  \"HKrHeNaMbjMtjjcEEqLVnW2xk8VwZcidDC44DwxyFLKw\",\n  \"2mrKrHx48LRdtNxSYYogPB1WxZ2v3AErAfnjPPVH8Nax\",\n  \"AXWmJaF14gvkjUgA2ARo7EBsgZGMnisgu3KPWDNP3WsS\",\n  \"HGBMNebzvtYeCnvvLoQ8nftTG4uJh7pHQLEcvR2oi8nQ\",\n  \"CVmXQ2j7qyydw71Gi2ykHvRMXUW9KaipDwFcP5MjJbmT\",\n  \"BqGFNLdUhZRxAAd721EhGG8XwtiCvXVgXsvbLSPY7uNb\",\n  \"7eKFnq1SCEc1FNPafJ4SsQVpW513kTZm6KC31VbBL1Wa\",\n  \"4rWDuvgqU8xUYFBPMZhnJodWMp6zuaUPNWjHEtcvgPV7\",\n  \"5iDmDkEi3TCeTtKgvioaUngxNZs6Wdd3VPfgiggpPMBA\",\n  \"AAf8Hm5D8K3CrnP9D11aCrxy2mJW4PRXxwfWYEM91h1k\",\n  \"7FjSxRuappQThNuzRQrYHkCZ57AgCXK7PhM143BcvLNG\",\n  \"2QwzBUy1g5hgiZaZAS7yvVhf1QRVqhwqTXDZCzEWjkbj\",\n  \"D3hTkK8t65zFZ8LaZadqccwv89TyuQXRmpRscW9sjhFm\",\n  \"7g89gav3W5Vtgb5niU8HW8XGSbd3v9yJeWgRogTef6Yp\",\n  \"5UPJ4Wk1dbj9ZACMoF9ME6N5kSjketcnetycPmZoaqFD\",\n  \"F4MsMPcfyyKaoVzTN8XG5ToJ86noJ9dDqKGQVZpuG5Gm\",\n  \"FxTWwkkAUnN9XVNtEPEPmHWreTWvWeaDxSwWpFmtHqbK\",\n  \"GBrPVHfsgtScRiddnUv6UF4atyp8RJtwmvTwRbQ6dLyJ\",\n  \"CiiNYGQJKHTyDt4kbDJLBishBA37MkrZpJUwa94mzmfd\",\n  \"Fp4m8Zy16qn9rymXunRa3vNJt3hGNmDy3vtadMWKPAuL\",\n  \"87eoww3dXp9i1uUyD1WMWH71R1sf26ZJWm13Sbvcwvnr\",\n  \"HYhjJZ3ZaLd7mueVk7XjzDGw4kD1Gj2vAswdDGC7ktnH\",\n  \"3eSzPwENNTrC3UR5QsDRuc2XW3aXkr62Ro9NGfUjBqVL\",\n  \"2TMruiwTKYCaWqSiX6q4mpEA5bW1yqo8nxGNupH7NdBh\",\n  \"J8Gbz8Czdcr25gf8yxzr5Rdfj8myshz8ebhRvTkpujFE\",\n  \"AX8zdyE18mCWKDrAnwWmWcRxYLzvtSt5KT3mTgrTFio7\",\n  \"8LUuruHHgREReT7FhZ74pPc7s329PqpsXRYiuWte5sMF\",\n  \"fZSeJXyM2SbfxSFRYrQ3fB635DfPwqt7Kc6GRGUdeZD\",\n  \"CrZxQjw3MZ7hJiBP1YYN8trwy3wEHvTxbv9be9cHzrFQ\",\n  \"H5cBEawFdeoin1rPmFse6AKRtZu4nDULTX1jedBEvnY5\",\n  \"BeJPCYRGHCifgxC5G7NPzNywM7tnwzua9GBzujXYgMWr\",\n  \"6ceyF3EmPPvUf3pZKCRubauZcyVHqM29pg9eSYo7L1om\",\n  \"7SKHdwhjj2zfpJADEBEKrpUARRsx4b4JQFr9CVq6cQiM\",\n  \"F9mbLHXuGeRbpdwpPatj16bsw3PCPcjdobCtwwU6tHdU\",\n  \"5grXbAH4GDwWjNTmj7FZ26wujzKsbrGq29TdDxS4cfyv\",\n  \"DGC8NJsrN2TdeUia796AaRH2LbiMExAjWsnX5oaZ3NkM\",\n  \"BffyRDYCb3GyQbk5FwS9eGojLybxdDhon6h5KHtPgLfu\",\n  \"F9q7xtDGe3ucSfQcX5gpVPq2d713ogVQepHedBJzyV2R\",\n  \"GZFJtD3FutimCxiLg2QvRkziUuUeL9ZHAnyvuDv2xqyk\",\n  \"2sfvuHJqSNWXAcLqCSwu3nMDGiBqAEqASj1Ng58prs3G\",\n  \"9NhKmAM2Fp2R9CDBqcwdp1iZYj47FTd6WeQ4jA35A2Kr\",\n  \"HKApoRymijZ6iuNg67ffwGz7pdrfC6gr8yAdMTZCq3pZ\",\n  \"5Ucn9sEFqcwTRsWaZRQcyyHbfQvprokHn6rey8ZNqAA7\",\n  \"DuzKBAUrpnSB7Jb1UFTXCLTvLCbno1tUkeVogy6CWPFj\",\n  \"BNa3bF2m6xBejRNG9x6bwpg5etLeA2W2Y4EubyJET1RZ\",\n  \"Ecou7bFo8yLeYF4NWAEdQAbWMKiUBq69QbAhFEpHjx5L\",\n  \"HW2d6WGzNCRoevdybfUiZTMRgMFJCxJM4kpL8QhL49J5\",\n  \"6N6cGAUobX4CtK8fZnrxRk6LtAKuBcnP9pRLasMerkG7\",\n  \"FnEoqTAiuie4tKiwvb8hPgD7QPTWUWv3ZJ5TcbbG9usE\",\n  \"F7vEUvDWT8LMwvLKvXnTaUZShNSArSDDh16d3DD9EaTd\",\n  \"8AxrzXx18bgKdj7h6vKfcZNpyTEvW8P4b63jiQpK4eci\",\n  \"8ycpVkmGRwWi72sTLB2cj28pSugT88BRPtSEnNpkzb42\",\n  \"BjvnLUURbe99X9oy9mMWzdcmCBh31vbuRtAaf3u1a7qW\",\n  \"6PogUZ4h8HyUGm13jULSK61iGabPx7zbqYQhpBVJzSLd\",\n  \"8S9VV3GTi1w3edo8mwddu59DhWPDovGG1TvwSnx5jbSk\",\n  \"HcstZc4ZTe8QHzargPbHSrVhEkkWN2ek8vdttFxDHRAh\",\n  \"CNoVY4q7wXry4neSArHLm8GhVAu1pUeUB1kQYDn3tapm\",\n  \"Fp44UCSopfQSafvFEveuA3zwL1nzb8uUkc326RdY6vnS\",\n  \"Gh2JkMMVPT4JNmbyoyhsZgWuLMKBC9wbgz6dKn4qLRoe\",\n  \"FP4UkoyezgvYVc764QWp8PWrwRhqWQNdL2AGPsDVpcbw\",\n  \"8Wuz5q8gr8Az6EFek48MhjMLnqWGrCDKX6Vebh85djZ2\",\n  \"HZNGyDs28V7Pwd9h16QnMUEYHLZ2GnMJWWV5BDWQpX2R\",\n  \"8S29Kx3trgAADycwsMk57p3wGU7H1f8LMikYDi896f6b\",\n  \"AXsq8pm5ye5P71rVn8SXJ4DH1H2ZuKtrMB7SeU5LoE82\",\n  \"DJCucCoC4RgqdP2Qcp8fdzgNufRgR4oqPqfEBYoUpLre\",\n  \"6PCaVFhDcxqzkC8KcRZsdHVAP3n8BMM3JCH6miUwvSfn\",\n  \"5WB23aQX4Sz93Nw96ZLSyr13jMBDwGdT3XEdCtCdbUaJ\",\n  \"932oBMNJjMD1ndpcN3tgZxVZikmR7h5nSpSb9hzhG3WT\",\n  \"6YwPfhraDzmzKXpzh6j8g2QNv17cGXA7yMKypZ197xa\",\n  \"AqFT1w6md3AnVcM4sKiRvpGTxwRPm5x2sTEjSdySwDyp\",\n  \"9s4pEbqHKYAUyhjJPbmfCXc9Tb99gvqguGrwpt5xqqW3\",\n  \"Btq8SsuC4APeuKsdKCHhrL94MPpvuWaqN5XHJc6y8CV4\",\n  \"EKegqWr4JRV5TTFHLogjKdZyQ9nWtYW4gtv321K5wKDX\",\n  \"bf2kbwZrseGKf99xxT5ve1ZiH76mtRCpx8HhgoKmoX6\",\n  \"98zzpuCMqQ5g1GYMVZ2DB9bcaJRi2YDkJGgrSw4k2ceJ\",\n  \"BsbmjodG9QpCDqyJtddmdrPMttBLY5Xcu2S28DL2hjRe\",\n  \"FoBcGuHDy4W6cNHf85Lr6pJ2ncf6pxaQ6vUw6qf8CmMp\",\n  \"7YVXpW74N7UR33wNs3Zh3ayiEmVDAAPLJeqNt1S6onNd\",\n  \"2koncqghbWHSvJwWuYwW8gErSyEnjeKAKyetaayN5Zw4\",\n  \"AsYxr5Pj8fvAsouVRi6pyAbvoyeHSFc7kZKGZbmVuj3V\",\n  \"2LzP48oizsMxJ9C8VJSbqUvG3m9t3o9CZeZwtj69n5y8\",\n  \"5f8kML2J3AX3FeYiu2PNi4D2P8TgJPk8m7uUBbxMQWAh\",\n  \"DRNTmRgZE9AdWkLWunz5z3BDkVXfKxaqXKqA3U3KTpJa\",\n  \"AEUA2UVo9A42HbJMLJVSHtPn6aAFVPCFabpK5563fVt5\",\n  \"9oWtrm61NbkiKR6xd5uPDKM4M1nscrZLY5pS8wWtgNcC\",\n  \"5xzwZgtXDmZibkRHK5HsNSwAdt5mkK9zbz8V1Ez6XLdJ\",\n  \"5qf51fFN6MyB9qR1YpSWRj1xxKM4Wd5GcmVPF5xtCb9Q\",\n  \"Akij1c1HQ5AyEgwHHcPV3jExSM4HKdukRqZbYiAWWWEB\",\n  \"6okAHQn6hSjwWwrR89hy33cHF4du1LoKqJSn5GZsNaFk\",\n  \"5GfRthZdnnYYHpYdL5e28qN6M86Hc7CM2RGGwrt4SghX\",\n  \"2Z1V863KfWxKwoCmF7Cxpt1ywJAT3DZ7XBWv3Fud6xbE\",\n  \"8qjggboTZ92Y3yP31i24MYnD2ewqcVKXmqEdxV4kU1Nm\",\n  \"8Qf7JzjrQKKNjJbBkiFPY536QtkJX6zptx4sjCTdoNLh\",\n  \"EEiLycjZ7VQhXm6ZtuQZo1RASvoPmAD9mZ99j5JVaBe9\",\n  \"BtrYyM2kbAcbVPKybg9fih1voxSxEFGouao81b3FeJYA\",\n  \"REc1Yuczeh7xqHdGSPSWqdtP2fvmPQsCroB4nwFXBfB\",\n  \"C15yJAgL3bv9FyMaTc2yVTycXyJrcBvBjkxsiVoKQgoz\",\n  \"7k2oFkSJezzxT2ETyKgNZMWDJpqNxyKwCGDr678o9Ttu\",\n  \"7DZhfhWgmWcGiwA1CVvgh9KHE97QuuUTBQhC3bw3Wo8\",\n  \"jHHouT36Z7KkwDd13PDAHd8Zmxii2LaXjR7roGgxigS\",\n  \"CMZRccJPi8zFg43jcLduiuRMAnGej2niXRgHRQC79ghH\",\n  \"6zJRGVm7BTmnHoQHwaqHZ15ZqvWZT3rjqXLEuJhFxudC\",\n  \"2snfqBz6KVSCZG1rBXdHQ1f1udCGC1DDHGhLq5id7LHc\",\n  \"G7nGYUsXCREKSxoyhEwhHWUQmocQi2vMQqJX7MFdNFMY\",\n  \"G8WRBZFfxTn7nNNB1Q6Gi3VAQzLBNyHzUytxA9cYmNCv\",\n  \"HBaS6DfApXui3n9pTJXiqGS3ykXSi2AELuzsnAc29RmQ\",\n  \"C8aLbQZv86ZyBePF945Ei3aRD2biTo1W8HjAAgc9Nyqq\",\n  \"3ysZPciCs5RgMghVu1EZBSQuUCT8nha7T6q4qmc5hkFe\",\n  \"8jz8uww5DNyefZrmsgCHdCrhjk76kAnUbeDWf4ZUv1RG\",\n  \"9kEdofySaznFida6DxoNcbMNMhJmkT1F1mXUTakLtS6B\",\n  \"HYfzNhjQpiqg6GF9U7uzhHaBY9rEQicgsH6PqFTVRmfA\",\n  \"Et1gEPFYLw3BcPGJiybX8SoNqnBMmuiT9GfAhBFcsBwx\",\n  \"D9CVCzV2wcXt3XHdbc5V1wECJKLeCvvhuNCGLGMSaAMK\",\n  \"G22i9WWqsjuFYwQmDZ7RsTYLEZ1PaWdPtjhsafmGsQxE\",\n  \"BsfkJsqDyssuYdiE9rA7FnfLXdpd5fS8zUWAZ1xqP3Ga\",\n  \"8w2nYmAkMAdP3MSRdR9DuGn9UStwCPeBWmN1dekyEhDi\",\n  \"EcER6WiQWZw3heNNk1jf4rz2axS4qTPGSw8EgXusyQbf\",\n  \"GADd4Bz1JoTRLosPT4QiSuxmsT6FTXjY7tTLSPsxtBJD\",\n  \"98j3XHCRKKojikWJd9T2SEXq21hpWpD4uvDmiV9gpBcc\",\n  \"GqnWqsPCMpvCLuGCmkpEQP3QzSUsZy25Lq9LrFEsiguG\",\n  \"HCFJ6WmieNj4HU1ZqrZte1E3CoW3uGW9hqPhHdbm3mPW\",\n  \"2TemJhETbPZV2VVn8h1gjW3AucYafdVcavf3hT8j1ifz\",\n  \"5QaFxWoTn5MGXUwoTSgcrLfy1NQRhUc7UmQzKCtBYFWW\",\n  \"Fx1zFtUReoUCDCVSVvJgg4UgGGcaQysqygygvWidLEs3\",\n  \"aUf1Koz2HK6pooPSh4zYvQkkubcd62HdbWoB6PkRBtU\",\n  \"3wamvhAAcsCcZ3V5SyFWoAJGYeK54YDctx9ybPCThn3w\",\n  \"4VknbGhceswTrf9wPBqKjaTMxiZTwJTqHM3Kp6d6jiUh\",\n  \"8mvYGLi8N9iduL7pRJvi771Rhsc9XMGaFKLP7Poe4PX7\",\n  \"2jREFuXLGLh8ryH8dtspbwYj4Ubuy4RpBKZLd7gDdw8F\",\n  \"DVRs2ggXqxojDqYueKYDigM2GKbVdRdRfKE28cmmhB4Q\",\n  \"7nvjCeeeC89EU7EN1JDUV3azb98nf1cgc8XaPpNjkKnZ\",\n  \"8eqT4MGt72SDFYwPuhp63HBtvBuYnaKiNL29GQWemyES\",\n  \"AyaXw86rNZPK2Lr8yeDj5UDJYsdLL39AMk9Uk25KrPeU\",\n  \"BKB3UH6b6hWgYQSRy6z8iAzCKxgnZqHkT1jw6wyc9kTb\",\n  \"7bcQ3cuVGQSzm7UTbxgGAtnnNpF516sSMNH6WA7DpTSN\",\n  \"BEi965dR3bFqeBikEtzFD2Md44hvgmVbzggd6NtXR2WL\",\n  \"FR47DL5Rq94z9z5dstiJMWpg3A5qkE4oUquEwCdKnaAE\",\n  \"5FrWUbEzDFuD7p26yPLH55KzUBaZaSMGFfeWpeEijCFy\",\n  \"9stCCioZVnRxcCrkBY6VaRf2nECRzm6RLVfbzR4uVWHD\",\n  \"CHD1dsq4m8MMtuVEjFQJStktg4w6xu7YXzkSyggUERrD\",\n  \"Gc1wF8LKGZvTED4ergVv3imm1bsmkn7ArwoTqZJ9iuUk\",\n  \"GT378h9o9PgYSawCVuZHdMej8nQPDpEpJN3Lowe9s4X2\",\n  \"5Dy1F5WMHKvwZdJfkuhqDrcoYLxwAxyDkZMkJrVMwrdt\",\n  \"91fJczyKEdkF8mSJFRgJ6rbHAyKzZ27wJNTsLiTaxxt1\",\n  \"5bptKXWw8Mf35BLpQHcNWoor6B6bkrARQ2Xay43mmc63\",\n  \"E5E1u4cm28dKw2RitEEhSzhk6khc1ZLGvj2LrbzM4tzS\",\n  \"57gr61VFfyTSMBPB2eCgHcqCGenVjQuEiMgjmDAWyoHX\",\n  \"CvKVfxjLDJ2ewjGK6LKWrNmbS5VQX9XuTkk9Q5WagsP1\",\n  \"3N6XnKJ3xCSM6cJPSbiFqSStdLKYNXELPV8qi6HNwSU6\",\n  \"EbDKdHWBX2eHHS324vGAwXfZYpxxzfG3wxcjodhmZJWb\",\n  \"98K135b38yzd6kQxhsqb1qvZmkT9UAJRrmHNtiGZfYcA\",\n  \"5S86GEuaGomqhQoh3531BCL7hf7tsvqckjZnbpfu8pdX\",\n  \"5A1irdJDjBojrM8NmYXWpSqJpNvjNedMPgP2XAcKvFPP\",\n  \"5B7VZSF1FfxG4gKu2LCMz9fXsE8vGbNxJSxHwTheJ2mS\",\n  \"7RBSxWGH3okQ6wNwfNJds1Z7gZwtyNs84pbMmyEGbAtW\",\n  \"DXbS3VE88oJqL1rDKkx786vmbpmuax1rDDJFzre1TdJe\",\n  \"B35KXa9B8x5A9iNigsz32KYFfYovqJoph2oqfogfBe2a\",\n  \"47qkvVTkQBK56e1qKrjXxvMDGsUuwocj3zCGugWMFfBA\",\n  \"Czm2xtKW41XGAT9BHdVpc1Bjz2M6sVeyBMKg1z3LJkv5\",\n  \"FcpZhEAH7QWgP7qjEw4Z5wgvKe1pDiVfUa8XaG4ynV1d\",\n  \"D5iBrVXWrW4zNbarLzk4zFcVkr6FgFXN2FffHgFnYsMk\",\n  \"6UtdsujtfEbhsSmjak34qrBLV3LsAnVn3mynTwMXBBcP\",\n  \"CX3EFBEH5zCTqmwXTCoNnEb3eqcA7AKR11RZb9a9aYNo\",\n  \"2jDSUcYDMhr8RByfNL5kVAUTqWszKEMmkTPCaAND3T1K\",\n  \"3GYqFC16yQ3yMWpKJmyT2aWHuxeWEYuurdp8URcJvJAE\",\n  \"AZA1oRVjqBHFLvqxrbktRoi2Tf1U1ihKfqHvLSNMxDrH\",\n  \"3BYfVsvhbFoMA5PSWVE4YrPbGcgGQUHr1Rchue6BuCwC\",\n  \"6fZs6NDHZnQTHxZerj7oNwjyFj2KFM4quhEGt8kbuc9o\",\n  \"4udiWNH23YLjMYKQyKChj6CU43VXAgZkwsKotipnTExp\",\n  \"vBncZd7VNRkmDtBQUsPrQJmy4gfg66yX7tmfsCCrw5v\",\n  \"DWqHhWvqp96ZX7om6cqdnB5oQZfqfR99hEzSnokyutiz\",\n  \"BHBpHx2iwKae3pT83ceZQob6UrXckES14wCaNdVzcX1o\",\n  \"HgW4zWWNuxsZroyQ3HFZayNoAsMUNEYheHrShmfNsRff\",\n  \"4qoQQBqzjEBR9PY1BZU6sqpki29UPZ1uJcP7PUhKW7xv\",\n  \"51Hy4bb24YBu1WMMopEZ2YwYgXJmuqtxh5AZGgw9u1hF\",\n  \"Bp6fNQMFGxrqBKStrtzKKqPJ7GcybQV9qunuYNiWQVEg\",\n  \"FF6s5hZW38juiaDiYGnVb6NegskPcvRT7VF2kevuCZrH\",\n  \"FhHxLCDUDuCT4K3cqjJTWRRv22KMs6GS8VWh6j7HDYbq\",\n  \"7qxQpec6svATAQgxJB8nj4BsGegvKvA6g2R3KbGqL5Ua\",\n  \"FmWCoiz8ZmxvfREcsuB9bj8jyj1d7eQeDDRwxytc9xVp\",\n  \"ApUx2DBQYs2Z6PuqeVScmSpMjXfideGy3tFE8t7dJr3L\",\n  \"FxDsKXCVStxQZt7e9VikzLA3XGhxxPAhC5aGS3oermpB\",\n  \"9Anzc23H8ex7tKeS5bxAaouiKTN3zu9fqA5QFGD1ZB5P\",\n  \"RYHiXJFnRWPBPh39RCZH7huv8m1wwr6eNE1PvikmQtj\",\n  \"9gcDY99AdAFUbND2c9WYsZetD9YyBUorCN4Dz8ozcwQ8\",\n  \"69euGTZKFT75X55QYn8RH6Y547xx3HwhSNtHCY2akibU\",\n  \"9DCQJTRzvAD6H1KRFHVcSh8GJKZcozcNcmoWNjgDCvbt\",\n  \"DrpTSTd1t4H7Lt358Zps3sAsgPJvX2MRi5T2yD8Bb8x\",\n  \"C4uhcfELB8UvhiGd4dSNjZVq4NNXyKMsSfU1Yoz8AWX4\",\n  \"29FqPeVhmGFoMjxzWv9d9GACPMhTy3ybsfgjnE9zuEZw\",\n  \"9WW4oiMyW6A9oP4R8jvxJLMZ3RUss18qsM4yBBHJPj94\",\n  \"GLrM8Q8xgCPun3tfp1tyaDpH3JANk3RmJBjstmPZFntb\",\n  \"GtDQxvvUVcX1NzJL9Ar2A6F28ByNufFGiRUFnSmiLoh3\",\n  \"87QLcvBCVmfcKo8sVZfPEbRS8PzT9tsgmHuHxRvvrChv\",\n  \"HP2hfrDKrjZcxwyze5QaeVqu6cQ2H6mvyeAVNJ4MYeU9\",\n  \"EL7zeFuVnK66NEMj4RnKjrvAJXnAJwfEKEARQZhSgcU1\",\n  \"D2Hmmorw7jJEM4SzkfMW9FJzQQRBcxLxvVwtZ28U5Fbv\",\n  \"Bz3JnscAhTKBzXb8ADbaBG6Z5H6MkqqUobiVhMnG45vb\",\n  \"qz1AVwE4zmb81XbMj9sKS3SiHBFBJqNcvrk1aV5Uanv\",\n  \"9EjZxHtxbnDyCxqjS5mWxs9DyCFJfut7QJXRxnFHPfxH\",\n  \"A2Nhigywdr585nnac1kAz1oByejRRuVAsNz3CQNoHFaB\",\n  \"7kKGQiBevTKJ7o1codtF7aSQo57Ve79fKQr9SkjdcsR4\",\n  \"Ae2zuJxypjcMwRDrxAbEpM7cYUrxMEseZaSxBwQDKvtA\",\n  \"8PbBX9PahVdAvWJJmzjsTxsJvm5f6HnCEoVQJjBuVCm4\",\n  \"G4B9PwcNqpME6UxwK8WHZKN5u3M4CHHLCJAWLYExo9vy\",\n  \"2zDWjVPtL8pvKq3SrN2fE3J7omEDmXMH3KAJwQsMff8H\",\n  \"292FMqBbR4Z9eAYRhjmUYT9PU5kT4nMscp8ft2DM6arb\",\n  \"E6sUwEWcDPVQm9vXYvJLkJtHWAvu7nv428he6xPRmqg7\",\n  \"Ad6hmTsKyEzBMtn3dCP9VvFZRVFyRGXPHqtgFPg5Pt8A\",\n  \"EvgCyPEPdY4PqZtJyZ798pLcfGejrforham8MwSw4BAR\",\n  \"8y325sMvwXofhvTxKM9spvcEfeafZuFwKq37L4VpepLJ\",\n  \"J8XYdD7F8iMXzQxdXpcFtKYYxHfYudcvWqyJ6QpC7NkT\",\n  \"A1axwFKPsudu5EkMJ4DiiUgTGYX53ypbmPxFGqen5FFC\",\n  \"nKCZDj8SbugqY9zSmm7B2MK5FKtpFe8zrc5eVVXkE6P\",\n  \"7UEoYTn6juJXLhcU4n4Zw1TsTy1cCxm7RhRvhVALFywk\",\n  \"SPv9w5jMQ42Bcjojv8HezajAQbvxR1ZiaNXKXuqFSG1\",\n  \"4BQu169aBXJxERJLYjDzrojbsBvGGpba18CtDdA7iZzd\",\n  \"3A6enWx3PjcNXxtDkTw8WSTMR1DFTsrjZ8D5ogjdqtDH\",\n  \"8VvY77CyNNtVkzfNkafMFnbyCK7tUwEwNMujaWAJPzWV\",\n  \"CptKZfLSDP9EDdQWhsoktTSoGSurEwrwRViGL3mRvUNP\",\n  \"4AMtuZWP7iBzNw4CojWWtteedjtfFumwvUN5bZrmHfsN\",\n  \"F3XaTYfSfTCMyDETBaKnP5ZQQhszuRdzXfuJAN8QLpeq\",\n  \"9Zj8MJX1zT4qF6UFER1Ehx2LAzk7SJ32MnWLTsRG9nZE\",\n  \"5do5zMhPDzxYxjJePyYjUS7diQUGTRpbFSrYc4cxNdY6\",\n  \"79EjvY1d3ZLyzQEXvEmJpcvV7F4JrALbJX1xY1hJANuL\",\n  \"8pu9xwcdo2wmExtuVvN1Sexzk6c97qMUsEmNoeTGCxZs\",\n  \"HCHbmzniCWVBFMNA6sZJrdb9BN52oaWT9JQhvND274Bh\",\n  \"GryqvMoqZFnmTxVMduzUQt4RtCZZCTKRZwLNuL4KyKsa\",\n  \"uxCdmmqsAiFcLW3cUjMvoREocANkUWZULBHTkr7qA2V\",\n  \"8igeEdso58sscQ5nHDFPLabrYawh4qUvLTuQo1qynscC\",\n  \"HekXqjAAuwYVKYmTjAt8kq9u3iJT3EjL6qZCCxNKdMet\",\n  \"6QsRXz3diNaMLQQftgnx8gk2Hs2BVEuZWpyxhAzKAFqZ\",\n  \"GWRyrhM9Jsv6z7sDt9ibqYmz21dLmS4bSTyWU7LsfL8Q\",\n  \"J9YjxrgjjGrzMW55ZoSrfd6JNN9q3JkzLJPMgsYNd5zy\",\n  \"7HnbdaQ2mbT1PU4D64ECZqNGgi8M1wwxsKgcHR9QWm8S\",\n  \"35Y8mpZkqjpQsvrWRXsqKHyajK9hTk6ZJ2vQbcdBrxxX\",\n  \"82b4HHHLV15HGAQFqyRnersnvwNKzb87i869MthSMfKZ\",\n  \"Emr9gdQr74ad3rWoyJwPguWWzH4GuQe8KSFCuLV112eW\",\n  \"EaWEwr2Ad79y8yE6DTpRCWFpsjRqVK3dvyXDzhGAJBsp\",\n  \"HEC7shSagvRFQhvjpw8EG18u5jX1wxLKwBssKZmDRyuX\",\n  \"bkwTDZ763VZwbV71EZXxBbXE31LPmv2UeQTmXMDYBMK\",\n  \"7FMSCfiFszEAfCyEQC6RSDbAtE21NwxY2PZx2GX8Uqb\",\n  \"6QQ2nYoYPLEbwqfY4Ab6GsQ1tLr4PaWBRAgEc3TGtxL9\",\n  \"9mgUvt62SXSuS5TkxHSnq7eS5cCRftAKa5Edd5mcctgs\",\n  \"9kQ7PKqXePwfxDxQYWJeP3TJdbX7ZZuar7pvQVpjVZxX\",\n  \"CVi8mTjEP6iP2CYv6C2UGvsK26uy3PMQhUQDA77cyWHw\",\n  \"49ok7623xSe3MtG7Abh8LjEDmtnTwA1in8QsK24H2VSd\",\n  \"8NPUW9yXYxGmQaSzR9sKoYLtqabVVnddAKm4G81tapmJ\",\n  \"9EuPejLrErsY9yzDMmsdhJvyVMFqKvLK9kgXV9yHzZMN\",\n  \"7ZoSoL719ZT6tb7vTYuvf4gQHD1krqf7ipR3ciJRp6Pg\",\n  \"CnxTbT9Ac6ho6RELFLtnert36CeEKSYRLcC6pKweQtUP\",\n  \"2CDqybETCMK1sWAsEeE3KPRewVDFoq1GNAusEptxMKUB\",\n  \"7dAn5asNjgaqGQJuTo64gtAWGdjcXregudqkEWWXK8Pb\",\n  \"5KXPQmLVYmxpXK8Sgk5c73PrrEequVWGt56M7uypaKiW\",\n  \"AxzpzN34e1eR1y3VWPxCV2m1mnBM9nCyZqWszBHQ4Zve\",\n  \"216JkVehUKTwejzek3uktRAX6SePkFKuGMKbBWNnREJU\",\n  \"icNpxLJx17rjdHA8AVJQEcAnnbZd7J38BEkk7UbbbJu\",\n  \"7MxbcgBYCVPJWeYtsKUvSS1NkbWx87rG6VTyfdyVMv1m\",\n  \"BUUcwfXQca9aMcj9h3PFFSyiDxVSjcewnD3jAPv8x6sW\",\n  \"25hUzp2Wa2nyAU8JoBePXUCeXMyKpFomdhc7ymkMExKq\",\n  \"Aam8oUbGnLyaNzkTSo1ddAfqhavDH2iczX6gJsqHD2Uo\",\n  \"AzdraX1CAboGXtQuLdbuMCCUe6YexSzhCGxQfZ47mP5N\",\n  \"58SDvs4sASzYUB8GW57Ty2t5JvjvBhakzB7BfUuHyHsx\",\n  \"CkCRQD6EtNr7mB42QvNvrbNiE17TLtent7EeJT3tRkpn\",\n  \"GgtFfkPBUrZKCP3YRx3AzdZRjHA6sEhVaP66jx6nWCfN\",\n  \"8Ny5EAYo278H5mTXgzJ8rYHfwY895zPWaEv8Cc6X8qUC\",\n  \"4AeGMYZvZJmzoDTgcQe9aSzsFkh3ZzuNazBeUvjHccaH\",\n  \"8fcGm9ry5pbxGGC8mWpg8bp21jHhpfmjeknkerVR6m6F\",\n  \"Ef7gXFoU545WR5ubPkf9jiVMYQy6jPX11dSg4AkAAuRi\",\n  \"7N8fCtjYVKbvEfe1rSAaeCMSFHKaBHvcBkWKthBNEDcp\",\n  \"AjEv1CabdRfmAg5Q4HndYqcTCzrXTgRbMQ2CX8BkeCq2\",\n  \"BTZX6B7RToHquJJMPAQNqfdarK1ErfV92w6SgdbSagY7\",\n  \"B38bfqNXBbKxNwXaQHzEZuwPWhth227zrSeQahU1Mtge\",\n  \"6F5wYdNsK12coxC1ursyz3vPNhghN52g24yheiiWLCUf\",\n  \"7HGUvA3Nd8d6VCDWZPJpfrsKVeuaqKLnKtt4UUw8khV6\",\n  \"42KaJcdsrDwg1aHN814HYt2BVUpxoxFGHtQTbrJZehGk\",\n  \"2kANmbqf78L4mQSdm3ieo7F6G6uEcae9V4jmyD1T8PQw\",\n  \"D4cq2zF3Dpfpc7gZuWvKYpQDnWCkS4uwpoh7EDzTC683\",\n  \"sbnPXaSsu7isn489oRtXXPHZcw4SkKD4X6dZe9bzyGf\",\n  \"4wvRvEkyWNwLpXLxMvSKJpicnPP8BpGcVmZtSny1Mpsm\",\n  \"3GaNLm25r9cKoaDpcCLdGRHGo2sHYbpzbUXKaTkfftr8\",\n  \"8i8DmmCVPnmDrGCXNZAQdNG4cYw9uyaNPEMEdTRTkv6K\",\n  \"GHGu1sXJxMXR7bLt1ZxeATufkNYs6QhZDfw4ufKFKHFX\",\n  \"FuTZSpYKhxcxihbUGnoCgvvnFCR2s411SJLFGGtWRSVK\",\n  \"5aAPkEiAUxHRUuB59kh8FNitCqQTzJmSRBRT34PDajfS\",\n  \"EmKtUntFp6r62SMYGpjeRR8UsemzNb1ctn1bYkNDXmXM\",\n  \"3WygrWJgf2aQPA3McqdDa932M4t8hauf11iDFs7HnnYN\",\n  \"DxnprCEDQCouL3Uc8iSu3a62Hc3dTLUSkT2oSmsEmy6t\",\n  \"8763yZEdiDxfigtDrNoncoRWm95ZxmUfjH3FRhx2pNaZ\",\n  \"AfLFt2tfndsXvMkBGZVcmxCLtG8na5gEApwyTrvZspW4\",\n  \"FgkLaeaHfJ1v8fD5FPEJTabxMnZu32bFygXezPMByFiC\",\n  \"BaGgDAzaJXF9rHtcoX35DgxgUjuNUJgcbkU6CPpBqPE7\",\n  \"9K4DHdBiTun1WGjXwsQbivukMCUSvPekxe1FqQDZcpLJ\",\n  \"7ZT4k99UmbGHEcJ7hEnndEryTyeAFe9Gg8fBaEbcidqV\",\n  \"B7v7p2BzD4ZKXJH3YvpkSEdakrXmozcnfWpbJxjAtDru\",\n  \"ByEKMZMUNhJvR2wfboWaZBFwMeGj3mAo9vdvGpogPaoH\",\n  \"7euJUbsbEvGnrTbb2A1Xuc1QGkdL9Sk9fhSLKcsvDiwa\",\n  \"bbC5Da7V9gyzg2Awydwy1ZYE4ir6Mm1DB2JoHXJH1sL\",\n  \"6Ky1DmUBSoR2gsHg1nTYjtkVPgDK2CuZN86HuLCr6Q1V\",\n  \"3vipZF5ThSaE55jGnHE1PZhCoHvRfBHvihP3pQ8Ph7cF\",\n  \"5M1HPDR6GQWdtbsGQcEFEHGnQhPRgtfD1XSxCYJvj6dJ\",\n  \"tSw4RRB2Tt2KJR6VGnCdNvTD41KLWsaso2K7s4P6FZ2\",\n  \"8uDPyy9iWycUyFLAA3TDyPbV7oTQKfPutfvfRWM6Ny2r\",\n  \"GwRaoXLQ8p9hk4scSc1mvRcxeRNusfmCbUHkhXiQhUu3\",\n  \"7TfaVz1Dbn4iLVZJ6FmNV4kQdhX7rgPjatCJoXGoNFfh\",\n  \"5SwX5dYh8tfpBvCL6wFgj6KCmHx31eWgDn5JGthkFPkQ\",\n  \"3Errxjv4oDKRTeTQSBZ7Ek1KbL2ZkUN24CgamAkerJtJ\",\n  \"GF9nCK5YpRpkSvywdczw5MiRoyXnuVaXqaTYqdsBcgKz\",\n  \"5zJSADTz2L2YLqzuhg2BfJ6KaKnsx27SXbYLmAFiHdJH\",\n  \"Cg2BLuXnodAJTsbPFeJbnzpuTZiHSCA3K65kz7y9wtFR\",\n  \"BB4JciS5NMUwVMWc9mUpACKbhE2DQdf5yYYhN4KuHFgx\",\n  \"9Pmwc129XGvWM25ihe1HqFzsixRFEStarXbEQT5NAEo9\",\n  \"2mQuFSZ2oHhwQCB2jNr3o5XH2m3m5pd5jtmsSL2o398d\",\n  \"Cyjs4qe1dfCZcwvbjm3Btvnscb6VcLnW1g45uWvQhdUP\",\n  \"FNuBGFmtx63DSZLZ3HtBiarnj72RoCft3A7eBQAY4rdp\",\n  \"EgL14RCCPN99p8hg7akuEdf5p5RM1f9Num5awpwP16AA\",\n  \"4qZa6yxFokqLcw6xdbY7pqNSyoSVsf5crSFK71e96rwb\",\n  \"6yfE5BqV2xfPoyVDq9wqZW98UH3ceWpEUzo8cKexxT49\",\n  \"AN8YFRq5BWfdhXFCoet4MnoUfWvFJfBL5BjyWwmrtD2Y\",\n  \"AMVPwc9bWfv9gskXoXaPeFBVrnqNHbw5RaZ9dzSY3u5b\",\n  \"2YvcWECBFNmbgZmvfDmRG13Kqckd6uVf9hriDJfz3Gr3\",\n  \"2s9VGesQYbKr3LwuraMEa9sXbXz7f8299HPPAHgSaUdp\",\n  \"6YmnvebFemFqyhA2xMyL5ZdXm55aDEy3Wbdo77vDAtzX\",\n  \"C2evXHALfgbG7G1khpHqVtdywxKkEsj9MGf9ugY1hUKa\",\n  \"63MbnkLjz9Tti6gr4JfniuAc31zorhvRtx8wkCKbpZt2\",\n  \"CHmEjmHUwJqezvVuXpUrXVgzs4eu7fn8JJbvNJX3vbe9\",\n  \"HAJzBYmLY9pptkMyskCST8nSGas38uNTgXL53wjneJ98\",\n  \"GhyWR68dBePszb6EUimn6uYahYQZDVxyPGPqwQ6XiNgD\",\n  \"8LboSqXvbsw3E5bJKwA4ReLrGqLUp96gAx6hGfPebVYT\",\n  \"6ySseBZSu5x9VoS56pkfNVubws7jGMs8wJZqrfoeQr81\",\n  \"2ssyN3QeSZD6XotBEP3AcrgRL9t8CiDZhygfWoHq9nQc\",\n  \"D71sN9QXo6GiLm5935xkGVHXVem9bWCTtN8QcNTgpSE7\",\n  \"HarWhL9EFrB7Vs8TgKpHSbL6XfE6m7Qsy3Dq7BX82NQp\",\n  \"5JfFncWZ8kJZc9KSYr8wHHmfNH3NnsJWnVXqbVF8X7oz\",\n  \"8GgR7f5Q2WvLFHpvDr9JYTjumiu2e6GKdD2QmVjnAKpv\",\n  \"8mspjCjtHz1D6MZEsKLdPsRdoAss1RYcmZTHbtEkEE2E\",\n  \"AXGa9opUvkoGEZsLp92rFtBy48XqP7WzNV64JEUu5YJd\",\n  \"Efqx76Nyn9cnfWEGpfhUVPA9gYyttYWh95GiBDhp1GE4\",\n  \"99uUJ2ZrDkTW6Yhdj45F29GEagwfiQ2oudT2iK6SNK1G\",\n  \"AE2vuEv9ff283GNS4TNdCgugZ9ev9Y6ZDyTaT8w1dZFv\",\n  \"GoDFAQ5DEbwoHvg8R4q5pHYviZ5wmMovq2U2WsZD5sfX\",\n  \"9AAV5faHwDQHcm7BuwkpkGG2JKb8DaWrTNnjNLdsiLw7\",\n  \"FYgH6TXkRYjxTmcyfLSXxu2ydf1ZRrQYiWANAMoMhpmD\",\n  \"6FLnFfahvyYKHvpdnMijGntMPgRbtE8Lq1N5HaJQbmNh\",\n  \"J2fs92D2mD2hw4FkUAjhhLXD1Z4WoJ4o7szHR1TNkrQD\",\n  \"2qDeipkJGzJRG188mAk1RiRtV2JYnKV5XAVwLULVGuwB\",\n  \"HtNBVMkhKtXUcjbZRzRqfvz8nckj9bvVkV2wcpQE27j4\",\n  \"2x9178kSHPWF6Uuw1nUwcRLYXebum5989taALNDnEevV\",\n  \"9rPrMT8jn9UdnyDMy6gGhjVSzsunrxp4FTmoQavmKK3Z\",\n  \"3uH3ApV9jaBpSC4SFgsJUA2LnP3Ubx4Cu3Sh3HZxwjQh\",\n  \"3YTeKbgCXLdPm9JJAm9AVyvVzYJGk9RFNuEaMaUjiaaE\",\n  \"BVcWtMQMRY1o6GFpPhJ1D1sMMF5cMpCt9QB1hfxNsL5x\",\n  \"A25jJvQ5LcLe1wssmJK6XBiBG4EaZ9pUFQm7WFU99imy\",\n  \"5gsmMwiJWMbvfpRRXY8WGiDf2zAUoZ1NT1UmtCZ8baJz\",\n  \"E2jSURDBaceKp9cbHAjZSxmEgJM1gAXrevscH5srSSXo\",\n  \"FJ3nrgeGSm4TMqvZQYSfAZWZUiCoPCGWJa2AHvaYyE9D\",\n  \"Xr2aStPcZjFQ4PhX9J1vSMXvgsL8EzRSMBaDwj5dmmy\",\n  \"BWun2VruHVaf4WJipSi5qhEhEQk6GUBiPQCJPYBfXbFm\",\n  \"6ivosMwp6tfm4nCuZnno1WvBtwZMSoBs6vynU9YJveB5\",\n  \"ATizFu7PkWqUCFXuC5GDigcgG8BrBUqBHxbxjKitUEsc\",\n  \"LuXH8J3cV3GZMQ5BiXB5AT2BNd4miewQBu87EKgZdBM\",\n  \"66CpYszUaEf4UThkw2d7bA2asow86DRUNKv44iJMBzqN\",\n  \"G38khcBmLijUDoDmStcHPhYKuYL1Ns7zYQpHCUSvU7vN\",\n  \"4dqkGoq4VtjmSvoE9m7wEQWMv5qJnCLoCdEUG1ziiQ4G\",\n  \"AXpUQMpokSAYRasiieuoARQbbUeDvDKgKEXFE7a39JkR\",\n  \"AgtZPtcAwGrZd1dfoKFfXYG94sssNgEZ9VywUbeKQgFf\",\n  \"CP35Z5UJUEC7tvhQwnrwUGvR9W6ZJBC7DbBLbSjmhLU8\",\n  \"8mbMH9EKd9kQDyFrYiDJCV9VaWxWCzpZBQZLyYN2yNVx\",\n  \"4udS12TauV1Qy6Qycw22oHQqTVCXn1Xhat43nCKjvYDF\",\n  \"8BPKcjiarh8NQ3cDsE51GsbFyKBsEsMS1QvWsWc6kNbc\",\n  \"BLQJaxEGtRQcY9Uewcq1jkhmRLbMRCVMijmDyDzrfEH1\",\n  \"DqzCyYXUWiPy97pwBCk1br24G3k2B85yqgLa4BHpbcW1\",\n  \"ASoG6Z4R2bmnotvUnhkozL8cEsdqZEgYQBVBFA3oG7bu\",\n  \"D2t4PcHqDLNo33YWkcjV3P4Zea33sVV417cCShhyzToK\",\n  \"A2A4V8n4TULkmQUA3mzHfnHbJQrLwbgNm4p38MTeyjK\",\n  \"AYsFoYgdWQ51nfJi6jiTybMH5vfGaYVoXFfprtWRKX3p\",\n  \"DJzHQCowj7vtU8xwebar6qyq5yDwhPh9NGCYWAMYtfWY\",\n  \"57YQsQiy2xegHH3Y4QAtPa482fnW3GrLv8E1cT6KwfAa\",\n  \"Cn1KmTSM5bSV3bhV61JTimorzE893TzqfuiZhe9n56sv\",\n  \"4Y8usZp4XqkGaLLaa7XjVGUxjVKkjY8nauqQfKhhesMz\",\n  \"FiahC5txnLr99ZxGZu7gfDGLkjBSguaAC9MFzfeeQbY2\",\n  \"BwbiNSdtt43GqMRztCcp5SZVub898hQcFLc8eGLiz6f1\",\n  \"Ey6QJNsBQBNCKdmw7ccYv2jCmLApXWxckTsAUs3nNfyw\",\n  \"AaNfoNz7YtsEJ7ysnEtSGk1ZBVVSm3NkRLGtunoDptF4\",\n  \"CmL8F4AjvfnimLCugfqKKTKCVnUdwhusRs9MhRmYMfgf\",\n  \"9WJDUWrT1x6QMNAT4DTgUr4Y5qWiwq5WV7miAbhHxL2\",\n  \"9KQQ2s8YVt8WFuLLaEtFdF9JufCaTGeD1bD3kVup4G5o\",\n  \"AQZeeEVzU83PCaxX9ek6B4yH4mHBwL3vU6MrxnTU3wSh\",\n  \"5n81CUjR9tbNxMHxcsqwWYDRn8SZTog73tyu92Yj8QHC\",\n  \"DEn7N7QXC4mTDpQK6Qy265JSVkQgNnp9bEvdX42KgMQd\",\n  \"dvWuycL9Lt8m3KFucsNEgh3TgCwhTWozTav2ijmuR1R\",\n  \"612qFHHNa4XMmQrat21firGGD5ZZ1T7c1u6hdJ6hdFKX\",\n  \"EH3BvwhzA9tatT8nYS9x53m1e48Snjm5WHgnuiAEgCFK\",\n  \"4akaFAvxYwrw5V2v8E971FXUZ2YWhUaR78PMimQ8tQnN\",\n  \"86Dmd98KwhJ3oBuzCkcKJ1F1PduPSkadR4dE27tDRJPS\",\n  \"4KkbkSEZKsX2JgX3xsekZXAXeZp6KS4nnpPsTtmW7DV5\",\n  \"67Kdc3dChXHMZpfZsKUufdn9pkG31VH8YMM42FqwAGpi\",\n  \"8SuVgMve7dNd1wPvJRqaE6TWgX7mvGuN4fxmoYmV64R6\",\n  \"71D94FvV7Htcx5NAoXxojCbacd3vquGr8eSU4Sqr3sux\",\n  \"9q7GfmstR6r8jRS693gAYU9ah8CWtLWciSxkRjNcowW1\",\n  \"9yy8hGtoWjSbHazzbFqk6TSKLzxh7a3EU1SKHV4HhUHd\",\n  \"BSh697qfWe7vooC4ptaAEKivyWWxvF2YA3efQhW7Giwf\",\n  \"BBfEvpw675WHQKFwhQmdtYHBgwJnY5rXFqS6ukToAZm1\",\n  \"HNRmiMTZhxhVg84qzn8bnXKSb9dwGojejKsiMpmcrXbx\",\n  \"76KZyRuc88iSac5oBqT1mP25VfaoAmXU7vzbsB536soS\",\n  \"Fjcz9y3iuXkz5ceid7hQgYSC9BDuoke1SnoUp8HGbqym\",\n  \"67HwFVTBV3LnbapSsjDErK7ergq9zzJJv66btk4N5YcX\",\n  \"2KgSbEGLo64knHru5CDsf3Gsf5WjVXXr7a9oiaakxEzb\",\n  \"8PRgjxatYvcpVhoGYDX1Rsc6qmwy6gJ6KWPHeGEVbZif\",\n  \"FEWjv2fPGuna6FPQaGCggAB16iiFR932saui2o2Vajs3\",\n  \"2pRBxA8ojqyxmTF67AT8KRAvfrAosB6UJ3vMptL3eUhi\",\n  \"6ypgXY56fDEcy8R5UFs4kjn3EwzQEYKi132c3yAbydm4\",\n  \"3d3QoT4UQuE3vWfx7L6FuiAFq7xSW7oTBbumZWp8g4Dn\",\n  \"aCgTTpjvuP3YQRhRa1NWCXkJheNZMw8wVen1HXoduvD\",\n  \"Rzx2RHanGRjmGgjZeB3LXgL41rU7heohM7XU9P1bzHT\",\n  \"6RJ2f5PigfHxF6mc7QSmYHbLUmV1T6QQr7qR43En9yij\",\n  \"GfRHyp6CDwhQQ5yitq21NbQYXLEak1ku4eN5tnQGVq9J\",\n  \"3aDCo5XXVTZHC1vxLaCKNPumgLiwRYmNGfBEubCXD7Xv\",\n  \"8UHCn4xrzC9WuEiFHCXjuhv7jfFG1FrkYg8yYNvq4zPg\",\n  \"FWrcJg3LntBfwDV1pry9rwvek5GvPunufntvcK95CQot\",\n  \"6SB98zfzUooqbcwvEnrkWSrEYSsmFqL17aWLs5YeSXXh\",\n  \"4dyvN8YXrdvxDsEQEr1yLE1ARYcWT3mwZJK6J2zcdvTL\",\n  \"E8C4Bn5vPsm3H1wcJU7MkhTFFJQmvaSCYwNesYf76gou\",\n  \"CnNA8PLpMUQSQtCQx6eFDZ9TFLCunbhXwuxwYBZMtQhe\",\n  \"5wtk2yndd6uqC7h7HPu1YAZy29ExrzLh4C49EdSJboNL\",\n  \"A4uVQtFW2zKLL8YZbmjkTCspCQVSeBnhyPqjgPHxuZsR\",\n  \"8dJQQ6XsTmHN1o76oebxupM43dhstJXy751D5dXYPgov\",\n  \"7t1o4vY4akqqoBT9EFRRnGoaLCcg4UAfsHZgBvSLYRpL\",\n  \"AN4jNtgytng2zYTLxD8b8YhCCmxsacTag7iy7XuXauA5\",\n  \"3TAbPDmxQwQDgbdK6fG3Mbswgy2SCQ1xYvVejgudU2x6\",\n  \"E62ddjSQNrha4sm9uCfPpez4ZMPEJoV7yQirfSmyhJSE\",\n  \"4KUhKYZSmCmK8yvt7Kx4BfTCq7eSZ9MjadsQfEWQugkG\",\n  \"AiRqy1PSrrUXtjFS3qq8vtm74BzhrYJ6U2c8kFCKAQkg\",\n  \"73DocximkdZ9tMXgLGoick123otH1gjXySs5v1inGMyv\",\n  \"G6iSDZNxD7UEKSV1RViVDwxsQQBbDkqHEiaLbrSaJpJN\",\n  \"31n5MPG1afZNz1JMVkVticGtLCEkLY6sKNr7ZVL7vShS\",\n  \"GpaMbQbxbPeFGzPERgyiFmsRtaQjeKXqhazhai2MCKWi\",\n  \"CobvMzk2kioNfgYKZhmdKL98a1zX7o8Y36aoucgv4eKc\",\n  \"132G2UVUDQHSxwvTR7TjALix25VKdoS39q6dwVyQzHyr\",\n  \"6mXBHi8c95F6N7PhxAmkhT3Gyk6VRjPTNr5ouc11XwfH\",\n  \"Fuhfs9Nmfum9JbZy38JWQpDdv2tHUW5385PfihTB7Dcj\",\n  \"E5qCuRRBrM9ybD6RT99XLmbBqnshVXXzgsKYGX3teHWq\",\n  \"DnqMdqq86Ft4MdsXyFAXtJd55umoD6dLFdnpWK5E1KSw\",\n  \"6u7ihvmVwbEiXDW7Mz34b3v1zsbedffM62mznYjunghu\",\n  \"HES1F8jS5oFBikohHz2p1TvybCkTnQ3UDjNs3zdSw8db\",\n  \"ZoKkmwYymqqQZwG6MXm9k6BAWXDzEoZ2Jsi5FtA4t1q\",\n  \"EVx2d2vEQqyFwb8F9CiXJioWbWGiuRNX5ZqJNn26MjJj\",\n  \"6Qihq4jAEttB2uXH4sxKk1zjDR1VDDm9NxqtjCBPEHY9\",\n  \"J6qDiB5S9pe8dCtvBmTnxddvSAqGLZLKjVg82Fn2aY1r\",\n  \"BC6sfLZ7D1WbhXv9CWfeNdwJXpYbY31WBggwTHYxvrBP\",\n  \"Af9pSEUjC2m5d1WyXtd2VTYeHqKtCmGKz8bb73Th3oX3\",\n  \"7eCYLdFwrWZxM2b8o8r65YgBwb6kpyamcRSZsNm6cwCi\",\n  \"C4ecsj2SGKv1d4ABrUP8Nzc281mH9qsTndUsWtHDPQyj\",\n  \"6b3vcro7LwkPHgXZsGTUSCHj2iM8e18zrm78pDD35AEs\",\n  \"Gu38WNhcGkv3QRGh7A6A4cN2u6gUMbvvMRSfo5pJTUvL\",\n  \"B7JZR7qxRFF877UPNuXs6NaxTY69uNLviZtSLQSu1Jxg\",\n  \"3SBDHh8gaeWdYBvG1u7vTTtGGjpfzbxURooQBcX1yy1C\",\n  \"6t3DdxMLyLQRbM9VNrpgvZbzKrZLcWg3x9WwgCvF78mr\",\n  \"2bPK1quyN4k9as3BJnjwSzg4ioVhNedScXEt6rAFMSE1\",\n  \"2tzWuoL5PtXUcqoMmo55u2xNLYqKjAb1QMGKRNpi8EdE\",\n  \"7z8fg16A1KJRTd6Yw1qDop667MpYZ8T6RHJZ98jxjJWp\",\n  \"9AmxKkyFsQ4uoNXNuqNr8q6jJFDUQyHu1rJa982WJaNU\",\n  \"7HicWvHS6wG1EeqK7bZk4jd9P3qg5q2w9iiNiTmt3dX6\",\n  \"T9yiPGGokNrjjktMJ2BVcenfThGziQzbs7arZSriYHF\",\n  \"3tjPrBEnQLjGCRMWLsWsegu6AyYPx6Jr1PVtvUkRkQTF\",\n  \"DXQFoPcL2WdA33BsKPiJn6RyFvHccH5AG7mzFBM9qWjP\",\n  \"2nUywiot7s8RZZggLKRgMPYNATQ5JPiq7cCDgPqFpiuq\",\n  \"2oXn9bhNVhSwe2C92exrRVBfV49UYK5udKHvAyhhqrA7\",\n  \"6Wu2eBcJtPDHJq5bEZrPwmU9Dzy7YmA6k8iXHweqrZbv\",\n  \"EZaNoLm9ihJnefV39F5J3ytsr4LZNWF8FGnbeXGNCDTW\",\n  \"Dn69jWYsQrxiW8H6KV6K4pRNtLFpopqCgKNF1r9rNURG\",\n  \"Eo3ZBbLPadXR4bLJ3Z35WbrtnP1t7qovDPQDVJNqYHY6\",\n  \"CUYF8YGZr8Hm3Dpvh3wNo4SPK2yY9HoAAMPDe3gVzXZu\",\n  \"HacAXvMVHj6pzzCze5SuTrP4mAeZskot78jCgFrhPHux\",\n  \"FG7DgVhvP4VJJ7nbky3oNiBv2ANMuJopZxgNk7kbJ9iy\",\n  \"DA1GsbWddqwj3JS6bj3C7ru8hQC3a3oJFZVTg7BL6dVF\",\n  \"9rc9imJyMaLaXN4XwDnWKQgJWKBrGytbAgcJmRxtfMgi\",\n  \"ELeDq1sEAXatTuSRnzYPi7r54A4TkyJcPdTbujzZGdtm\",\n  \"98dmRm9RWYe75w6TdZRQkx8ygEJrswbFLgEccCqANZAG\",\n  \"4Ra3v9AiguDUD4hePpjAW9YUYEeiFYNoJR5j9BMf2KJb\",\n  \"hDiVvgZmzUfpAbE4GpCENL4tuXA3KX4A6gDduq9kVG5\",\n  \"4TSkHuP13dtnqUcRaEWTxXWnd5CkG1e3HChsxpM8VLRd\",\n  \"Dq3eECP3hjvy7MT155nfTvLWbzGUdUYJHbHSsikQ1uiJ\",\n  \"3XS11bvR7otPjkqu8eBzKgAwVXmonkWjkbY4BKK46Usn\",\n  \"Armu9uENojZud59k4dHwjNn7j8aTCBBhZy3T4AkeB6TD\",\n  \"Fh7jjFEgpEsbeCYompZJVEFQ4bCofLK7ed5te3LRtVFM\",\n  \"Cs9PLihnycHQoLcC6iQS8VAdJaZLjt62n2pUQcKDmpeb\",\n  \"G6jSiRmZLyigeC2Ug8BVJowXrYeJnjbKGzQyf9Bc5qcP\",\n  \"2TNkcqVCcLM9AmnDbbc46TyPNfwptHF5XuXroWnHKhGd\",\n  \"857BrK7u3cP5thrLKPgpxVxBCtXzHs34aHY9MvN6nhJe\",\n  \"5qhAkhunj5arzu5c7FZmAYFCuKA74h65BiSwt3ep6dYL\",\n  \"f8QgvxyvRGippbs6kfhWo1e81GTkibRvrimCGzarFtD\",\n  \"G7gbhkskqyfjd5S41i21GLFKcptAbM4ZGVx9nBgGV4J3\",\n  \"GvTDAxhqQ5gCQKRSpGq7fvaih132DCzmRbz7VyXsbnuE\",\n  \"HdUBB9M9QNApRoPjGxDRTBU31Ej3QhSGatrZtFmwVWn3\",\n  \"5tCAUHqen5FjZoo6EkzzdZh8QjssEScTdLc2H3awysEV\",\n  \"BF2iGrANa5qV6ibus7yocnuFvds8VNoHnLcuQqS1iBmy\",\n  \"CqZCNh6Q2swTMQyTTyXqV9esvSp6ovBhhNYe7xZn89c2\",\n  \"F8rUTtkdvczwViAEmrGizujGtyniXBNkoJMWEpiJiPR7\",\n  \"8Yxrbo5UFaZ6g5NYMTMwmVbnpaQoRKEBB9CGiGitU36N\",\n  \"4j1KXQNmsNngwVKK7nhRLvFvx5XrH4HKMXBWZGGjfF5m\",\n  \"FA6whsRcUwQXJ6mVDpr4kfuCJwtJhrxHF6kEaLeFbQhL\",\n  \"CdSCdVLjzcciAoiimkumrJGHAikyMuWs5eZNNFE5DjoT\",\n  \"5rDwFhQHHdcKgWXjDk2VCR7wEuLzJJLcn4LoQY13ajij\",\n  \"AjZgLfBC9HP28LWjX7tw6qWiUjDprbC2aqvZB82eXJoB\",\n  \"EZHWUZUavjuJa12cY5SKRMe1PjzMWzy4jEjgo2oiKQTj\",\n  \"HAuZfA2ZoLKyfwgv3ifdrvaSgj92XtgcJfNRuUDBrMBp\",\n  \"GJeGy2eKFHsFVk3GRkUDzZBHikFugbFpnyy6Mg2nqwEK\",\n  \"Cf7oQGeNXpTuLWurMFM6CVUXh3wsVcJAzYQjj4aexARB\",\n  \"6ZHdLHqMaUaP8EwkVNafYazRkndSx6mJDcovaQV2HtMq\",\n  \"3cACdhYR1b2f1NHXFuY62ULsePLPFJ2EAUEGGo99Tiwi\",\n  \"9q3xJ1Ys1P5rv9LxyvgFrer9Ch76jStVYKtNQSBsT3eD\",\n  \"AhfLPXJyE37BG1pYRzkwrdutUex4DzrXh2tadVisMRsG\",\n  \"CXQ7Q8yQaSmWUeSSXmZfrBXBRs8HPvscNUcrJ1MjywcU\",\n  \"8SqAHDpFRr4Y5LgJ9aizyGKL1r7dyFFw8A6MbREDXKtk\",\n  \"B2Av5uDZ3EB3Y7hBvntdEG7vwz2ok49zNK93pcMuLw8B\",\n  \"AAdLiGar5koXdeduEiSrXkPjNs8NyXgUKx8gyxMcARMj\",\n  \"9dg9QLCPBS8cboytUEsHFqjjt2LdxyLdeSPe4rWMsK4W\",\n  \"4cMGeLVcp3fhyDE62V7ymH2Q8RBUGxxL3pYZrLEToiFo\",\n  \"FpC3JAy2LoDz6QzvR7SBErq8W64WRt8xadrN5o9XGC5R\",\n  \"DvCKNXbv3DzPvabiCMEuaidAbRR47ko8kSYbyHpfAw2E\",\n  \"CVcVspXy91XrKb7XtSaNMtDviNUS33uSDtn5NigmbYcP\",\n  \"DUX5UPMkWxgeBTaKWnFncidKmJHMKPBeWwauK2rer784\",\n  \"FpmeyipydWBojd7L5twvZF8YNQrutvgJ2p4ut99uTFVe\",\n  \"CWehgX1hZcuZc5A17zQA1su9f12WEouV87hJzfxoRJ9i\",\n  \"5ief4tbZD4pub4z9pCZZrKQZa6UgYa7Z8V9Gcvr8DUd\",\n  \"DiGrfxN4iN1SS6JUtr1zq74RgdedogRL76AbZbTnQR1L\",\n  \"8XvcVqGMVBAAeJB9vqcc9wU4SB6LPegAuV7b6G1cjmLq\",\n  \"42NzodDpuDbU61VLLw96Wt3YPS1YNwwvmYoGAdDDqL4h\",\n  \"E3ySo8VYoishyzuvnqSmNLxVfCph52Mt5DR4Ce91Dc4Y\",\n  \"2kFL6crwKU4NVVkizXWLy4Dd9HpXEhaXNsdC1j3BTcUP\",\n  \"JBYCSTnYH1NP3KqiC9dXtbAM9sS3APQj76SatsNb4P9w\",\n  \"62CcBjtF6WCrLXQRyw7ezAQJYKwbiLk6aWyNGfuNUJTc\",\n  \"EToJtYEB1nbfEDicDapYNEyYCkUwWaN1fa7P298BFg4X\",\n  \"6Rhsy3X1raD38Nutez9r8BbvJzkoJexzZABhWAZhjXrt\",\n  \"32Ebs8CEDErwksDFCzKGinFctyrXGw1nchketskF1jGt\",\n  \"4gLF7f11RQXfTZeK2gVN2DNDwR77ydkFFZoX2Gb1jgbf\",\n  \"AYwB4R9pCGqoESNj2mCXi7ut9mQUgQcDUs2DihDkQgxC\",\n  \"E4nnLMcPpVuGuu4BGcTpSHKFvuZFiYcjCL33LUWuVx5e\",\n  \"Jqij2ZKBBH2LpFfNHUwLoRxAwkL92NP3PrtWithmkYp\",\n  \"ERPmyxpS5nmSefwa8GbCKruQoEDmgvP7biWTnHM1ui4s\",\n  \"FExi4xEeAwEY58TKQ98UEjrS8cQJUyPcNBB7QMzQfHKv\",\n  \"tJm9SrW2iqQLSqkks4DM7q9KJSNBUkfhAnWhCdTVqVk\",\n  \"EccjQbDfM2GoBKbhpgKQHsVuA6fT46J5pRk34sVMVkPb\",\n  \"BCjwojzyzfbXV93cTQPBBup3brf27a125B6Fea6gv9Qn\",\n  \"BiXCGAmx2EQGxNd72ihsapfWWPSqUzTkNYTW9d7P6N2N\",\n  \"BUuGoGaNaH75ebxHmUnvN7fSqJ7zhG1aQAbLmE8P7p2R\",\n  \"CKvMBDUtxRCS4bNe3YbNfhTuF1F8GRdrNyCZtyA32Si2\",\n  \"9oozLxzfmaqsbp9y9Gpu7oJRQn2vYTZzwRpiSV4cREja\",\n  \"AWPcbjKFoQho6fRaRCpN6x4eEGenkfixak9C9rkHagbU\",\n  \"DnGNgtAgfhs9FpyvAaB7DAkWCD2XxsaGTWt8JL1idJfB\",\n  \"8VWqou8DC12ukNTUEpNZnhuhx5ruLfSsfkj3YUPdYAHs\",\n  \"9CyxTUg5wmbskPUDi3BQV3LksMkrD1LQR7FXP4YLpiz\",\n  \"D38NNe294mtcLELkqxJkNSuRKAbbSp6sXtsW8wdxgJFN\",\n  \"Dn9f33aTHuGbiSXCtdgXpmFx4JQxh5R4qYYvbBJD5yzJ\",\n  \"3jHQp1Z5MJAZQcP5btXDDBPabqMSQrDR5jaTfKE7Uuhh\",\n  \"6iUnEmxERCBBLBbCFb1RrNZ7RB49TTDa8Wv2uHFeEoMY\",\n  \"863NN9tUdo3WrXBmwCGRXyHWYN55xmZQ3qYXxmgC35Bx\",\n  \"BVRHhHy2mjmXorx4Ldsguz7QW8pPsET5rCwjoeYPBWVD\",\n  \"5LNMopLNzcjgQTVAiMAMafsNmaDA8pusz2T2QFsjakbe\",\n  \"8CoDnJK7KajjWewtEyXcdiMThkJpzcoLzUNpbPRuqKXQ\",\n  \"9nw3ttmaBn3kC24ojyLgbTLUKDZVeCZP8CCg74QzAyqP\",\n  \"2rgAjXKM5bvWrFuipTzojmtmDpasfNPfTPzP64dReYJN\",\n  \"HW4vJRCPTFns35LmiDVnfm7TiFJeEyhtMUQAaEmk9Uct\",\n  \"2hNGKqbHB7CLg1cyfH29ZPPmEz1yGvMux8c6xEyzKsir\",\n  \"BWoEVCpEw16dY8SfYDHg5PMRb6JT8aWsvKdG9f84XRQd\",\n  \"7MWiu6Aom74h12uxDSEsN3emWvygFFatN7HjTqCc5ucx\",\n  \"DpZWVqkXXJ91W3H81numUuZRhYvRibFxfiMgF58hLT7e\",\n  \"HVzbgbwAphGJRKzwZxkK2mFLh212NpYFfjfx8HVAbkSA\",\n  \"6QSUWCdzGa9g2af7USprC2iTajbWxNo83kNmiWXbUrhW\",\n  \"GTPg7rFNBZdKMBumAiUbLpA9oSRCiiFSAnssn7kZbhuT\",\n  \"81yENwjWebTQ1rUXnbjtJudJXGA8ZMJd4uSkh8M5ierw\",\n  \"A9QdoE3zNB8B9ayUaViwSQY9SqdEtoyv4FFCYThzBhdk\",\n  \"Dh2WrEGiP8hbS2XEtbgJH8KMbvU7ZdvHxhbtSyGi3Qbg\",\n  \"DVatZigFQfkM4E62cX7H1sj5D7t95otdUv9JP5LpEkmH\",\n  \"D3NNEXLyMnSWYMRMPL77yaqMBd8X5qX4g33GGnN2xVJJ\",\n  \"5bz7tNrG8Hm2D43BA8BWuK1SB2ym5iAQerNwp9TxfanD\",\n  \"DGP6jg27MxJLN6Wiv9xAEgeUevfjg5d1A8FtZM338ztL\",\n  \"Ff8QtHE1Sfb5xeZr8rm5B5Db6bgKkhzLBoUJcKjhYyAx\",\n  \"H8KywKJddxRAU9U61N4cuJJvxXj2b7vpVxpgJLxMvVdZ\",\n  \"Bm9a66bu8yqPNkw23v6JEz5KN5tnG5e7Sgx974i6E6P3\",\n  \"ARVhD7UsVWatKbNfjebsG5wpttsknLxpSbfQgrAedJdk\",\n  \"87GMVr5Xvre7yzkHGTM7RFeaYPESdPpyFZe7tHJX2SuQ\",\n  \"2tjb8wny58PxQsJ9Kj3398ENRNreCaY6uP9cus7hoZDU\",\n  \"4AySjNAUAzH8unp5jH94Fx9C8fp9Z15ucE8ti23cELLc\",\n  \"CMNkYXiBsZBFat1eAMTqiDV5yeBpdDHYBufuSEniei2T\",\n  \"HQG4vfGE1ZrVTURtMBLMG3ZGrY9gPY4m5jZqLvEDrsns\",\n  \"6JJY64ogmH9Ru5in8WfyL5d2fLwiQACkDxqGBQCdyLh4\",\n  \"AMSD9EZQWbdaDhtteVdQqKLd3kivC2eDeUucLSZeJjDb\",\n  \"49LP64ATaBStyGVPwDwbNEyc8Gz6ayhtZjCbL8KtJBsQ\",\n  \"BJ6xfgXudM7so544Jj3EprnCgaw1CuZuHv9uzMv9Zwjm\",\n  \"2aqKvYnT62AbUtpfMptV11URGdCGDG911WhU5fSGwLxi\",\n  \"DsCPrpp8ZYndu2FuD7kdfFAimdMarvQ5CSpfMxkAvnRD\",\n  \"E64Fd5XoCXzeTPzqVcyCRsjb65dCpfkpTfxUP2Swx1LB\",\n  \"9xfuEnaWfRorVbQWAtiqyekuWjzAgrjNMSwtisiRhQgQ\",\n  \"6keW1nRnKuk4Jc3MHaGQKr2PYzzu8kkF4ZvVhL4rnsJt\",\n  \"47upWnfdyuDax4v42y3DM6QUfaCXdEWcb6aoJLHPJ653\",\n  \"DLUm7gdqFzbrZTyEq52Y9r8uhFrygYogjfwhmM6R1omJ\",\n  \"5xKDw3GJor8jK7JKdiajQEhhy4hnWf2VHQszhPj88eNF\",\n  \"GhUjJYrm8xNGRJfgBo1HxVUsK1x4UCL2WPZdxBfkpMbv\",\n  \"k5wB7ThMYA9aRJfCJd4pcoevxSddyTb7gcbaUdYqN9V\",\n  \"BkxyNcBFcBZefrN5mU4gh7wW8KazmW9p3nZWb84DxoF\",\n  \"EGGxPpRWMVW4FHSdv2r5bSj9bjP3aiVngodia6sH7HcL\",\n  \"BouQLaWJxLQ3nZ1WXPtZC85vKhcY5FJrKdk3LyApahdo\",\n  \"GDWgxEdweEMoHoCNxUnq5cUfBWqJqMdB5YnU4ui9aDBb\",\n  \"AkEMfmzfxSe9hDzKKmsbWezG6ReSB5cXLqGvbDW496jQ\",\n  \"BTp91aqhDQmAaxdRTAgVvojYKvj7Se762V8zfT5A3bs4\",\n  \"AZChXCKw23GmnvLzYaGWcU3DMiFJtZ231FvGVCnHih2D\",\n  \"Fjy9W7bpuzekhpLAnG91JPpBYL4JAbYTyMssHDwY2JML\",\n  \"CTEipp7HRCpYBWLi5ntG3yHR1k2BtLmz8xypsjydFkYA\",\n  \"53QQnfykYPRkuC2iHLzatALdg8DbYx5gSaQrrMaTAbhV\",\n  \"u9vekySRdNuwG7dnKsnmdY76Kd69WV7tJRjhpZYU5G8\",\n  \"BfaSs8kWsfyg9DaucDW7mH4kYsj1uLkU2CAnCrp2kpce\",\n  \"FKaVq6Hxbimp4GBNZAsrTo7vNKfHdA73Fn2ZKBqN6Bas\",\n  \"3WVT6F74hLZS29JM5T27DcHv41G9pBqRTJpf3fjhgdQK\",\n  \"6soixFKbtQqpYi6XhzWh9uuezE5ii1o8qovTL7sB2jSb\",\n  \"B6vZoRRcYrAsTjSoc8Qpm8AcWEf1EKQj7jTnPA8LHoH1\",\n  \"B112S8j8t1wzHAfGGRyYNu3J59kMrAS7PHYqHbFunUjk\",\n  \"4SjwntfDbLL2AsW5Qy7D3XVYet3JhCqipGUPxLHH7Cxc\",\n  \"Ce3cEmHBjTuKAKNtwNuBiuLPQ4USnLd8QJgdVzfUkQoo\",\n  \"4pWEXuX3DgbHznu7sJEHQ86iezQuSdyoqg9Eh2NaG6aH\",\n  \"9yPn5dTbPmFDkHTRU9w8EzAdCZH3BxsUVV7QnvX7MAso\",\n  \"EoLBaj8NwH2Aam45wdJgZgxQdtyLvr7ddD7TV7T1PuPZ\",\n  \"8ynGGQF8ssHahLW9TP4L3xd34vVuayVy4n4TaeoyZBQf\",\n  \"7zjdRz13tkFCszz2D9K1yMz5Lc5tdKA92uacnWsEbMQr\",\n  \"2jFE23HVHvewXJBzpguRFTHKA37e43BD117SuSE6p7GE\",\n  \"GXKhGfbaYcsoFGRvAgSSPye28wLoVCaypuUJyihrsFfx\",\n  \"6givV6ydtsKMkpRb16zJ4Yqj9ybuuMQsoLGRWPDZ2meg\",\n  \"KxjWMW3onVoUMKuaewUzUceRWrUUogo9wTjUhjgnvDf\",\n  \"7ynNP7Jo5iDfwokBBmJvKu2bMBSxb6Z68PkxkrFAwtcD\",\n  \"CWpnpNQK551fA2s2jXE5tJW56PqjBQj78DF5aUxdbb4B\",\n  \"9eBA6xeqU3FQVTXPe32bnj1wtMG55ktN7oKL432tMo3C\",\n  \"BmHma2eGX4BwZf6VnXt8uGey6RpTiDXmPTCCCTzdVVd\",\n  \"5MyTxxAxMuNsE5P28x7LVj2Dj8BPoyRLdS9xtK7jTMHj\",\n  \"GfgZBZKh1a3i7TjJkuYnueQwqwKzsph3gpvUufwxfeFa\",\n  \"GRombfX7YeyDAKjKYmQJEhvASLj54481UCWKgS4drRSH\",\n  \"AeaxUMdiuHn38rPJ7C5T9Vnm1PDAHHZa7ymjfZSgSu9S\",\n  \"EPBRE6vaCL92g6nGNtVdTdecsf6yJpBWki2zw5w7hCHw\",\n  \"C1eaucgJSKw7EhzxXt6Gb1RiSTaB3sF6Swuh9xharYgi\",\n  \"2CCgXKyJZHLZTu3ZpsE6btxgniXyLqp7MeJoiY6aaHwg\",\n  \"Cyp3eGWvhkGsu5n4nwHZMiBs7cmtTo5iUPqHiQ8gZtU4\",\n  \"8rsBZUHH4tsyquiAH1inHUDNe3SVYYajDoM64ouDnDeY\",\n  \"92fv5rxcvLycgu19i5k1vFGqMiYDYZquyztk8sKdNVe8\",\n  \"8JX3MCkXLa7ueBvFTPBfyCEuQQfAnLYRkPA67gXAtm62\",\n  \"7yXMA128gh4eEdtQ5JtCR6tJtRipTPRPqE2XUYhKVbRF\",\n  \"E8NCAX48D2HrhbAPjmWxx3fq6K1Mzq7hS5qWrgpd3Z8L\",\n  \"6daSPndWtAnrZE1m4mzpLJyXwdPr2tC7h7EDZ6cfB1Mm\",\n  \"A1gdZXnVfHNqLnF6rRbSmiqNbs7DJfFZEEgVDJnK4SoF\",\n  \"Bw59Dq267fvqN7JPjrKxoDPmfGSi7roUoXXGzJp4Brjw\",\n  \"7yVAHVFwQaqdtQVb3aMQYqUPEFKrkPdjSnYz2kRnzBG2\",\n  \"4owUf2XqpM5u1Z6V4GtpTN1WxBgBsPtj9A8pDWkYDN1j\",\n  \"Ap5EHqBJdBUtcYJ6SSmon6k3iCuzfxrP95qKbKsUGyDN\",\n  \"GnvQ4HYtK65ZUEZqJw1ssYKFEuzsRFZc4h3AGRp7rfzT\",\n  \"2Txwz1BXoVQr2rikb91ZR1mKfAXDBP2mmSaZxnA65JcZ\",\n  \"AJZoKJrcHu8w1bTNABUFMXpfEe5mAZpxfJsqcyK31QCY\",\n  \"3qiwLVCP3QEUE1Wuc22Yt6SLoAeZaBipm7dSKAy3Xm2o\",\n  \"BmbdAMewsQ1nDnKp3EHHZy5CYXCv4rmUgkHBhvngP4Gq\",\n  \"TA4jf96ikNJdnx7PQ9gPPGKg6U7czi6JjT1ECjFouVU\",\n  \"2JPbX3wyHBfcecyTtBA4LtfiRdUNY6JdKvWisqbCL7oN\",\n  \"ChDr3pe2nGy94uYu4MGweS3aziFmHC7JZ2XTmBFhNJV2\",\n  \"GB8MxMrYHHymqDyNH6GZqgaa3L5GzrReTrd8Kq4qCznX\",\n  \"5oBngPGHFVYdmGhgnSvaG2yNtK7BpBJAD4G9urAsDdK5\",\n  \"CbYL7PdaK6XrsRynJvjwic3d4qRz957GyWAb88wZ1yaH\",\n  \"7NC3TADPHuQ7dTJZxLugpxxv3YHF27fRwoCUyj1vUcy\",\n  \"9kkA1GUCwoyBctQcHZ23R8gNVLWuu1Vj5KTDLWmSBrwm\",\n  \"2HKP3wnDccS9978d3s8VpiaZCSYwjRg6C2Jy3VEnjF5F\",\n  \"56482gviZz1ZwbrDVHq861XVA4GdTcCNTb45hev4v2xM\",\n  \"H6y8yBzpLfNqQxQZQhXbBXBdXDh8p74GcDYUXfz9U5pa\",\n  \"7HDfUbPtyZnKcfFpR6AF39FEL2U9JdxnNER66Cwb1KQG\",\n  \"6wQ6LE6Z6qzwviY8xs1Q7s917mANExA5Mei6AnSsmGQL\",\n  \"BgF2JCQmjn8giXydgpzj4iE67Gfe64eeeLxFgjDvJ2GY\",\n  \"BhvoXWBkA4EogqqmzmetZ9UoZQzRotAWdruQXxBmcrki\",\n  \"CkwWi9x8GscLiPjGPGkLN8wS752t3DtbGBBnVNwy7yAk\",\n  \"3GrbKkHwmbNPSX2ivm2wy5nerXgmEaGa5PcWxynUogJr\",\n  \"HGvHae7XzXDP9qJo99g4w7NjQA2sNdHhVKhGJZ3nbz9a\",\n  \"EVb81xUjAPuDRKrsXUfHwxogDuX7xyMLMhEkQdsQA6c4\",\n  \"GcRtVx2BbdK5sp5dqpauD1C8xZ3p18oVmYKKnRXoz2Bw\",\n  \"4wxHTbEiPTB9EgHP4duBkmuDeaGsfGZhdnsqyKHAP967\",\n  \"AFbb9g2W8mjQVmz2GM2ad66GhFLcnD4vYoPbCs8w93zX\",\n  \"8VfPiyWbLQZH9DnWntfDL3BuqBvoVGTMr2SvaQMxS8zG\",\n  \"8rz1iTYgXMjipnhhuWyQQPUzk6iFfSp2FwdR2XxZHcUC\",\n  \"7VtRHAVZFE9iFWKjTshbr1sJ8CCnGzSFHHKMdjJfWgbo\",\n  \"3v97DCxNp2BPUrPSD5pebimwUgbmPWNNUmzzqab4bQNX\",\n  \"3d92HePeA9uxxthr8FwVNqdd7B6RRz3ys5yRV5H7qTCV\",\n  \"3rwVDgi2BXd9bHgRZABUBVjjJxd4Qtk53ERaSzYkH8td\",\n  \"2DM1YatKdz2AaAUVCp6XtGkdr9o1q8KHoYVsFvsByxm1\",\n  \"AY1VunjMiwPUFWt6bsJnqqVH3Jnpqpqni7o7dmpgjGDn\",\n  \"CN3TqUKxxQyBdA6xkzrw8BibgcnN1WirD8GCF281karR\",\n  \"FUzT4bYU1YVPEJQoy2Dvvg6k14KFTuFYBTogjrCBcHGf\",\n  \"58Fy1EXrRYNpd7agky3qtE4eU26i1V7D5fkpSyLP29VS\",\n  \"5jn5VMVSwcM1zYQpur1x3C1P9ZiWHsqDHbA7eZpMLy3W\",\n  \"7oGcLCuXwesN4aV2v9V1jGQ7h8gtZ37Tu46NbtDVv4D9\",\n  \"GNrt8NE2nJ7dLzNJqLBT5xWkxpFdgcHyFffcqiRmHSq\",\n  \"Fk1EKC3eG8PdN9erz85njQiHop2qvhVdQmxDgahCaWYb\",\n  \"6vUxqLT5uf8NA28EMQCC9Ffdab7rGVADRJFm3eSja1r6\",\n  \"Atx4mzkrL2T23dsHVpWeBYacCJzThN9kqbyDgbrSt6P5\",\n  \"9ck7uhXhq2EGKpzu3sDwQWeFP8uftYtGNMNqeFvpi9ui\",\n  \"5PTBCJeUe9uSy13MKdkancWkNq6PDtEM5PWgw7pHDBT6\",\n  \"FpF3wNbQ2Xb8FyvZKCkSRgbVDPHkj8tHFTRJM4KdUSJD\",\n  \"FmamYrSgGr1LWKyKcyZbaRG1b2jmUkrUC5pHSbLCRVkL\",\n  \"3qgxjRAwZKUE6csWZLd6pJDSzWwFVrppYBRUFrwgq8LW\",\n  \"9KWWUVtkYRemaAMnMXYE53mTA58ZHGrxi8PePYXqpbDs\",\n  \"Dv93NrAgUGY1AP4JvcZjBcqWgc64yom6mXHmxa3HJuEG\",\n  \"CdvQeEWTcmq89pkNxNHQS4iTgzT9Db3NPa3zPuYg2Gxy\",\n  \"HHPesmLeznQU7gHmbn9wibFeNAGDAEJ2ne5cLi1gNiG3\",\n  \"DL6i8xkYKCwc9ftGDisWCmjE4L5Wxtp2eoYLcaPDVD1S\",\n  \"2dMe5zwG2tGpTJ9egNnDuUT4ZFJzvkEuwo1PmCdK9D3Y\",\n  \"9oV51ffXvLUcKQuJZFkEwECdcBzFiUg4z8rpRYUo1MiK\",\n  \"DTWfVoTT1XJtTwNXT3fEUkfro48zSJ1fnLUoPnu7oGrW\",\n  \"HebDutse3BjuKRAPNmEuiQzLDRoFm3Ju39Sz6mKxXJgQ\",\n  \"4x3vQe8PvAK7vKbbTg9buicSPJC6xKY2cTJd41cYqwz2\",\n  \"3DWNxJbBG1BJ8gucd9xY3H96cox2rv86aCFY56jUbKyp\",\n  \"Dchvwmz7m5NapHLQRDWMn38ZSRTKQa3QFdhjPbPu6LyA\",\n  \"8qATQJHNezXEeHqQLrLNGB2P15j888cmFpGbdLjew5ac\",\n  \"viqCC7fBRi55KGNv8wfZBgf9SdZhdtDvadLv8x5QjLa\",\n  \"FN9CMkh8ZPQ5isLLdNoztGtSUYKh6h6pVT8D8iC2o69j\",\n  \"2vWGmSBi6RRpYtuJgjSba2DuX3QDBuuH6HvSwNsLxGZq\",\n  \"6YXQhpTcYevmUvBsH9J8MAjuv3hqWQpSFcu9YXGVp6Yv\",\n  \"GLpUniJsWQhAp5f5fHuCwxTaZbddmG274YN6ViaV6miR\",\n  \"E7cdntQy8epRJEfjs4BARSJZmR22Vhgw1rvaau9ttbHR\",\n  \"Gj83w8tSLjU49zPyGhgxywd5WXxrGy4SmcN6E9972qoH\",\n  \"7XLJ3cuRhVYAJ6ojVRfbBF4jgRXHAzVk1MuDpa8r8FbU\",\n  \"63g69LrCtz2aBQLqcq1C1D4tGE1DiMBanUySN7DC1K4H\",\n  \"83vmL9jXVDkryD9btX3Y3LEh6mZzon2w53z1Frsijn2t\",\n  \"7ssgJ9SdFF3cPDCeQDHpv48tQqqbb2jdUvKkywhgYBG9\",\n  \"3cK9H7BaEJUtURiWR5hGnaYRt5VCc8yQaeGE4NySWiC7\",\n  \"GjJGHDg4B7LRKtLSBtFazVY7BD88xoNWPsfQt8KfGcmh\",\n  \"GCjtVi8UeJULdYPisZcmNCUxeuBP9g6MBT7xPP32v4wk\",\n  \"2jsNv3PHuRKoSWoPGTjRRwSxyQ2mY3cjsjaSqKM7bhsk\",\n  \"7WbX2RtAPM9rytysN4TapZf4M7HeMwSmHdC76wtcWQHx\",\n  \"5N6rbqeyF6DtCwLarUJmQ5NLcrMJisAWumexCCgpB4ZT\",\n  \"HAeFrSmUhKsizyxcWobTH7wErQfKRNno5QRjtmc9Ev8x\",\n  \"26nBBiSTDQtptm5tT5cCrwsKL6vnviH9QWaEafM5N13P\",\n  \"HH1y82rrgMkEfYtXCisU2TK3YRkvUzb6dAS9tztDTdn3\",\n  \"7XquneeatEtkQy289fNKjBHXdBZqEdNhnP3KNN9qDpsv\",\n  \"FcjAaSd7WMa4dMxUfT2vGp15w7EBohonDxp3j9SquSoh\",\n  \"4AVJQj9ENXUvtoddMhfmX1JzRSZFajeci6EiAc1kMfjn\",\n  \"HEZugoTvnFLjP9ZVKpK943noQ69MU1gxJ3bU74an1iZJ\",\n  \"89nRu8LeFvvc8zj5UMjtZMyzLnsmZWonepsZj323gdzR\",\n  \"28MoW2fyRpk1z5N9JtqtjSPSnCMNje9iavcQ4RVk4HSq\",\n  \"8o5W1TQhvpXYCG7c2ycysGeETNmSqs3GBpzTkXymTcgu\",\n  \"5PGpf8akisZV1S5eWB6sNCUXZ13JK3rmuCdjsqXApheH\",\n  \"zuoZG8WLEBX9pcnaAo1mQceBGwbn1mw37YN98PWURsk\",\n  \"EKDB7EyLPD7a2Mqo7Kh8Y4aR7gD26VErY3yj41eZjwCJ\",\n  \"fKF8zMhyAXfCHSJALrUQVNVFSNGYFYaU3r8jCKBkU6Q\",\n  \"HVsDXsMbTz25QDg8jK6teYXwD6AxdgELF71DWFCZruE5\",\n  \"4FdByfLAZku1QCY6tbo2fF9SGBvzNjRoNgRzQm7ShJjo\",\n  \"Ghkz5VSca51VEvWfrTo7YfnmNsUqLYiEvR7vcDbs6xPY\",\n  \"iPnZs8u7Hx4fSjzRv8bBjnho6f7S5qdgSFuRKM56V1V\",\n  \"GvU2EDSyWebVkDQemw6y1iVthQkoAiV4LSpJaghYS7GC\",\n  \"6fxRNQvs6fSzjT8HTtp1fwjs4c8TzbfRprQUxWmoPfr9\",\n  \"6SnJ6wHrFZkVxrXovfvmhLDHhu4BCfYyceaE9v3GE4jy\",\n  \"H7asEY8XVFH2VccJ6iCmVQRectrPPgtEQGB25EtWNip4\",\n  \"6GFS67ku8A6Gcx4nAMiYULpj7YgtNGVDmNsfQC9GCbxq\",\n  \"Gz1ckBRxiaeEpmGdtYgPuwNrcW5FJSCziSFSBSJNvhbc\",\n  \"2A3mrK7fenbR2LWZx2o2HfHq7wVymdT7c1x5XwvGkEbn\",\n  \"AXcgvjKzL25x82e8Dv2nbFmq1va2LQt2YvepNJpkEYTm\",\n  \"HkWcWGJcuFv7xi4Ts72WwaaKph1wwWTAMyr8rjuFvLUp\",\n  \"fgCZEo7Y6MhUn3xuK1VUz7EvjaBEdNrERqFZ4VcDo8G\",\n  \"6SSYhvUA9YAN9uV5ieoX4uBtA4N49smYguV62Yw2HPP3\",\n  \"AZdJrhXraKiHktuUUFgcC24iobxC6pS64acHxBur2U1w\",\n  \"4avMjPpEehQNz9V7a9iYfCNeqksL43r16gXeZaBZrAf1\",\n  \"G9ztGs6cGtVYSX5Hr9xAkSJBJZow1NScQpJF78pAWjAQ\",\n  \"FmQ8keCgCXtQweQS19o8PDuvCYTvDptFTd8L5v9C4yB6\",\n  \"23NmFyHXKqpY6EmUCzDdfG7SF6Py4LHat8ATJo86hNn5\",\n  \"CWkmjZDrNDXd7mNPucqB2QPYzbztdX3k1mnpgELPqgCt\",\n  \"5oe1hCNL5PyjyCjrSgvnYeUKKaw4tfhJoGcTvk6B5hsL\",\n  \"81eg7veeFvFp4bnR4PNRvZkj6FgWbAertgxkWB19Jfr1\",\n  \"89jHD9CzzCNQiTN9Z9A7FyBFhD3on3ZCLLt1i8znx82A\",\n  \"EdqKYGJ5CaLGZtH9u3GQGYjukkXT22KW2ijKgAVub8L6\",\n  \"9QB82ZoKVsxRGtdNW2UqjgbQ16DJfmSzUc6zM4xXEHU\",\n  \"6QSpVyS5WrhvNnXBCbgGESmBtkMg5Ju4Hui9PfAyQBqM\",\n  \"Dkj3JBGywS7wHgcSRUdLjzkqrXuEbmQbkLJpWSbn6B3n\",\n  \"DxbNTUzSGsan22B6gY8iUixehx6s9RvMKfgLMSzJgV9t\",\n  \"DKMc6yhDW6XYMctRFiRwEpri1N6qf638hnExK7kr1MrA\",\n  \"DigyC1rADyXVyLzBL7rdQQe9LgC8qrXQQgEo2bsaNJUS\",\n  \"ANBFiDmAgethQoYfFvDSPU64RmHXeuHM7NQZpReWD38V\",\n  \"31YP3XvpYxQdYxiV7RWicmtw2ow8iYWyiFATurVwdi2z\",\n  \"GjbTEVYDwySJRjpQE9WrrP78zvgpA2gMkJD4pYnDzNhf\",\n  \"EA5cqkugEChbZEFPVcXSoD9qShUjiNeym7tUs17R1p5\",\n  \"9nL4ZDWHWwhYRrYYiUUgYxS8QTNFM4G8UkW9BjP32t4s\",\n  \"66Js7vpncVEnzzzdQwRJMfgtVhDqLzPbh3Rh3ruWKdq9\",\n  \"4L2RugiRLhj2NN5inxvkBEV8Xr46QhbG8PDKqZarvrGb\",\n  \"BEZ2mknT2e7owKmipbm69zKTWuKESecwsVokFsHhpod2\",\n  \"5bNr5eCDwrwpJfyfwKmkR7QxV8vnHZeEAgaVAoHSwd5L\",\n  \"7UzuDhxzHKYqxNZsWctvhYyAUtAAz8TML6P2KpQ4oK1p\",\n  \"FDVRgtrzamDRHaW8834NUd1gtq7gMuh8MHVDkEpaYLm1\",\n  \"DTA1AMuEiqKyzDFxoR2BGJtxL966UmH2vro3ryJsdogZ\",\n  \"5GKNpbr92879JrMshNTBpbTbHcws1H7SS4k8jEtWNiBe\",\n  \"A5L2DhnkptoVVuNA5NUmwvikq3MTea27Jutw8dCuZArt\",\n  \"2FeGhJmCLKGNuitMv2ghZwvZQxFFtyUqMTg3PrHCJYjm\",\n  \"7D6fQU9GJSaQMFMUfa6bjNZyfgMZrY8h55ZgfRtt3hzG\",\n  \"BAMQQSf7QE1xkqsSrw5s7zKcaMpgDijrW83d74QeAJGv\",\n  \"FvH2JvH1BTjQaj85RAAZ63RvD9PkT4pvsxjpCa9Fo4Zv\",\n  \"5Wt9H2bH8vnJEcWJrY8n9jPrxwJk1q6WuU2Y7NibX6pH\",\n  \"GBrRhUeFUSbGUjsGPWBj5kwovSXkEqpUt3sCp5Xctjmh\",\n  \"3aX6gTdF8GPFVHfeJJfL78AmFnwwB2Lj9kbePbs544oN\",\n  \"6SUHmiqBGG6y87p5RyQnpmqw2pRbMwLwKi4voYQmgzP3\",\n  \"6Axwu7jcRMkCm2JEr7oHTTW5RKnFfp2mJQUUvwSj1x4u\",\n  \"ALTdnSqKdxEQooXcBuoAdEFYt9NWo6wUBF4T536Yon5m\",\n  \"B4zQukmjSYLhisHjMbxYUmdghuupAaNftX6jdJzFdseM\",\n  \"2AFmPw9Lvw9bHuhQaPoE6dS6SWZJqB9vEocdRcmNDDrY\",\n  \"8LnJeiHefGDYunE1HLRucw5JDUvUiK1ENrRrE9mXDfb6\",\n  \"6EqzHg1doWKKNAk6rn5okXwdJB6ub9PJf6sHvXh2BM4\",\n  \"HK6w4Rfrq3cMkM5dKqSMJcrenyis7ZxCZPqPCpkHSB6c\",\n  \"FB9r7mEjU7DggufUisZRaizdi8ur5fAZbUHVeZm3m7QP\",\n  \"tJp4f8Gt8q57Na1hazCJnuhGUoNsc98hXMNWFTN571Q\",\n  \"GxxZjqxrcCbfWTYjLWgpPgXyyEjDSnUg82ABKCGrNGd7\",\n  \"EfSkTEj6BrXqfuxWsJnPafYgnVDTpoQNjpcLoNaEaf6J\",\n  \"93yTGmMejLaz9F98UtwWbwom4Do1RD698LHXwdv1AKWS\",\n  \"5W8w9xUTPWCpSm7XXEy1QkT5qmi4ZGB5FCvUH8gneQtM\",\n  \"8kYSZHNs9MtsBSrBWQHtnkkrnvuqYkLpmJXFW2cEYnkF\",\n  \"BnzZgzLSLhnjm2yydueqEuMft8LJYYQKyxyoywqHBMfA\",\n  \"CUZGuYD6L4AGnZUkU5aAsBGdssFHDiw7VM5waRrugSJB\",\n  \"At6XqhfSNqmiVu4xvCCEvscBYMWjLdfJZQLWeCN5Y2J4\",\n  \"AfKUygkEPjTR7REtbP8wfAwygTcyR2CeayfrRfrQejn1\",\n  \"5KUCzDpbdw884Hnq8y4TNf6ouPFkFRSsMEBnMqkKd11R\",\n  \"5ZKXB6w2PoxZPS5Mkjb82QdC4Ai7BJBc8dRq2SXGgwWG\",\n  \"BcQCDcW4Gzmi2r8CoWzVxtAhh13KotYhiqRv7HrYt6Ei\",\n  \"HSjpTeFA9HnpQMCKCxqkbMSsf6VvKznpJH4PeoVFRjWR\",\n  \"BuQJFo5keWEMF5Hqxfi6N6G9sahqCtx9t3TJLtUVmcU3\",\n  \"ETC4jjs2R1jYBqoRBjXF8QuUHfeXHUj23MMQGewCMUU9\",\n  \"4j3rT9Mra1eLATobhy8HUazWd6ucxKnYqasE7W1Qa1WT\",\n  \"EBZC2pLAJEjbTA9MjQc3FZ5rySf9puRsqDozYQNKgjVF\",\n  \"GrzBnKJBxtScXquWMc3MSBou2FnMwNxgAUk7ipftwGf7\",\n  \"3ZHSmbUd9MsYvn8DASuiusAppZ6ybHPEAmmDazu4ZViG\",\n  \"8B55ab9vtVSx4azWLQi7G6m1A8ZZTwy6wGken8QbNx5B\",\n  \"e9s6zJzwH8kHyeZEbnMX29f3DhQFP6ogNFNZfRrKnAZ\",\n  \"AzGnhWbC3xqs6EPmuptikELRedHo2NHUNeZmx9KFuEWo\",\n  \"GVRb68LqShV4uzyTyTyk377aagEzq17TzZhgnY2q238z\",\n  \"7RTuonRwiTkvMamGo3rDaoryUGb84hrTm4BEvJTy4zco\",\n  \"8ibKyvZb7DV6xczqYUhYSpk25vHWMZE5bchEU6m37AzN\",\n  \"5icUfL3JTpd9rQFyrQij5JcrayZuSxWPEKLEGioqEfqY\",\n  \"FJ7wp1hjrQtnBk6LyYRqWNJZRiyhRcNygTvmECDuQHyh\",\n  \"58DjVFor5dCEfm4PK4dUMkPCa8eCbiJ8w1CEAgSG8f2L\",\n  \"FVftjwhGyfzcGfTGK8SU8E55E3dCod7rQc2fymaR9vTe\",\n  \"G8mMX6KNNinBW3paaSY8t8vrsFVW6b2xZQsmZ2XEaP6y\",\n  \"6EBkxQyLPLXRnKKCXfXouaX1jVFPDMLKqwcD85zva8uN\",\n  \"EZLCXTifXytpjpqp6S4jnmdPtzVYcCEMPisCdB978bSf\",\n  \"5S5Ykc2HCf9zpCCsXqJ7SSmhZQZP7V9LS7XcfjMZ6UgV\",\n  \"A835Xf7MtaQqwpiKqLBhkPs3Lf2tR2j56S5BCjvJQqhE\",\n  \"B37zfswq6V5qmxJDxKX9QSiQ7VCq7xyQwgxp3TKECon5\",\n  \"rRP3hfs1SEhq2iXuFhCTimAy2CF2yPuMXi4m2xSNpDT\",\n  \"AVbjAg3t7LDme5e58vhYmBEWy5sQjgEcWCMAwmCMG9Rq\",\n  \"AmdzAzJN2YzQ8QofWvG1qY8txtMaBUYJoC62tpSAYSpm\",\n  \"2aEZxuVgrmgFNxHseRxccfPTkcTmAW5RMkRE3BoAy7Fo\",\n  \"HFyZn5dAFha6zJ8SE1QtDCxPv1sys11C1qev655tT3Px\",\n  \"A31mPR8ogRzqV1ZhVAoa6evCZTzLaUQYde7mhQjniP1d\",\n  \"CRa1reaXDpKsaHvtwdaBJLQLUviCbVeYRCSmuHiTaTVp\",\n  \"7C7HqnycDn5aU13NvPQnSWYxfKV5xQVTJ8SGQCy15oXZ\",\n  \"7UJmcF6RzXH1qMqTV8VvCVaH1zQShP6V8n8EcQWXm5i1\",\n  \"EFYcJn85RcKqShLNamgMT4fBkh2dvj8Veu7ZDMBtaES4\",\n  \"VPAbwCpJGRzdWugXhWrGVkfAwxnBQQAhAT2hJdbLoDm\",\n  \"6Q6QjpcJPTjhYeTEfbiXSVVL6fVuaFgNs2B2GeBJcBqQ\",\n  \"FK9CnCLRMEp32iczLyRgSL6j5bGr4v3gXZ6sjw2qd3NR\",\n  \"D19TSD6hU53XszBi83BzhdEru8n4MQDSQYNNdcHufJHH\",\n  \"2KGSqyoxYx8yQP6VxfFmJYguHiDVdaT3NqQoqw2TstEK\",\n  \"FhRWwFWuoTn4gEJBjPvZE4gs5axrboruGR4EnrfCVXWH\",\n  \"FQ39HBjnZ6WdmUsUjfTQZYx3BmqirbNXqmnn5uS1jELe\",\n  \"GKagYWmtyVMWsSwUUs1sPvqZ9Z4VWokFvpfse5UVSUxC\",\n  \"48XpYnf24a9VCtrsLKwnsak4Jz8R8Nm44V2DMCYqwQ6N\",\n  \"AwMRgfxKSAmbtedD9hDMYrs4mCjV5qEcRDnDWvDD7SVc\",\n  \"6QiuhuPbgnQLJyqt9FbofdptKHTLrDhi5fXXbAGY9epq\",\n  \"9nHfRsTSaukorWQNEgPhirApw3QSESzyCSzU6BCTWEEs\",\n  \"3U6MK76wTgyXiwoiSBdpX1nV3nFk2WEzQ9mZfuBhBm6R\",\n  \"7ZYgX1FW5e4bgFcxrJ8mZW5kpC7fhW5zfTJfZLLWa6qM\",\n  \"FJQDJLh5uChB27s9bCXCyTpXurJ6saAs9HbBDffZJUXD\",\n  \"D1QEPRL4AqaHoWFcqcPjebdygoa4cTkpdW9sJBHN58HD\",\n  \"g2RNqSLKpQCrZUi7W3Jop2gQrZY9V3TWUtW1qjXdzFk\",\n  \"FDP9iorxEr9pc2onipa3YJMep7PGYApoBg3it6ChrUFF\",\n  \"EVw4envG2HBWgRYHuCybduDFBmd63CJg5tVS3YxPfGHN\",\n  \"JDxmKrFMTwCSQUcNmQVA9aWDZKkHstFQiVqvSGuD9jgN\",\n  \"5d3qBPYc4Xv4iemRa2tHcc9h3JxnqN9cSQKjrfRt7GMN\",\n  \"5YXnrxVPBva8yKkAKPgvjhg3cU3tbmUdWtV2BPurtBm9\",\n  \"3fD8euVp234tjJBJN25rHF8QYwFzcmV4549rE4gS81Zd\",\n  \"9dbeH1Vs5nWziEeyiAGJvjArmJtPdmL4FeUkf66RpA1G\",\n  \"A27wiSBMcCApDUD4FH1ghcj2nebDUMs7t68iv8CD2dA3\",\n  \"4midKL99CNautgYtEs3YMbUGQqjuStgiS4USgG1PMawh\",\n  \"3Wg9o47hKHE5vt4FtFHCA7vNoxZ9NPbZLeSk4AZMxVLV\",\n  \"6nD13XhmXw7g9fhKr87Kif2VKArHRhHiRihdrKUAGGyC\",\n  \"82pgkiqb7Z2p1UynwvPgjHqDu5uZuZjbNQ6pvDwiJxXC\",\n  \"6b3R7D6UEJH5LvR2XJiXKBcVpBHFNB8UoMUNLCC6zVNQ\",\n  \"HRGWEcDoZtKtNLupE2yJKYZkVEMJsEnNxNcvaS9yvNdf\",\n  \"BsNCcDK2JsvoyWmXhrbmDEr4nfTJkPsiJSLrD18LUaFA\",\n  \"BqUGfMgejUJQg1iGP36yU8yEfKQZgrjpeAXg7evtefJQ\",\n  \"HG8eoaqenR3MKvBqtVnoaXqaGwKgkV91eoxCcWg4YDcb\",\n  \"31b9PX79a9eFXcibHyWXsgJViYmCK8BshfgZN8nBEXug\",\n  \"DfTE9zUd5y5pYvYTkaApVFcZkC6WJZv7CKPY38DUq2oz\",\n  \"2AWH5xCZwVme8NqjcizTeCeptqb4gxxNxF683VjTbFN3\",\n  \"2PAPRP2Z6mfNcpJX2ci5LJrZqSTf2g7zMZXsKm9Vfbho\",\n  \"W3zQWBdQcLdPX9YfUj3ddKLTYY2Q7GEYCSdNLVwaYdd\",\n  \"CxrUYYTW57areAvQHm7FX26YsnmzMD3t1LXm5o8TDtFL\",\n  \"5cwXsR5CycC9jwzN4uxBHxn7UVNLeEspAUzZHGFMK4k2\",\n  \"GswqfyqdVDyDv38dYk2Ka4FBLrpTccyUBwpPyPjtZFeU\",\n  \"CKW8esUkX4ngJ4bm7H26ANN1Eh6zGBWYW9Uz2WiZkFUM\",\n  \"C85kK7DeV44Cs95VmftmXXkKqmECBBTBahZ7ejnmLJVU\",\n  \"3CFWNtxodJyerpPhZUT3QtdX2gNMKomVxX6bq76smMLa\",\n  \"Gg1GtYfMSrP4q8ui2GSwU8wAUVZ4eYDN7JpRr9xsv4Et\",\n  \"EcTf2g5QDnsTBz4WCKwU7e8EoQi5zXevMXq4vZJKeuZv\",\n  \"F3Qii5bLzWRBNpHVqTWAXL6fu74TSHfgE3AAWyzxgpjD\",\n  \"FbuYkNNDrkTi4CwgKUwKzj2hHF9PwgF6TCdHk4dxsJ5m\",\n  \"4Lx36jJqGnt5Ps8G6fWGJrcQCEEApVu6na2ipZFpvkiD\",\n  \"9YeDq3FdSRqPE7qgxK4in4k7783nExH2m8oxZZktahKY\",\n  \"5d6wwK9zzdDw1m5Pn9uBHEFXzoQa5gb1j3iAaBdg1RpP\",\n  \"DWH1pXsHd7zztdNd2fgDmLi2XmefGM8FrFuA8Ds6ZnQR\",\n  \"Ami2Mx3WKH6Kdvb1ZFt67R4dnCMxs9f8TZaHELUNhnzP\",\n  \"JCtNG9hLJCZFC1nNLoScopryXYrAYW62zfy4Gr73wQLt\",\n  \"4nFfFa4U8fZe7MSQFQkoPxUomTkrQRWXQqsdp4v9ca67\",\n  \"5gZgmrUN8iYjsX2g9B9vPM7TcHdSX4JESEZdH21v3Lny\",\n  \"2gzec33GkaJeHLnveR1f8NHgL6zP6tXW5oxtPrCkur3i\",\n  \"6147rN6CoYDCtCh73cDT2W939UPthQeSen2ANxZtuvTQ\",\n  \"DVsN8UDgRxFEJXtFHb5vpjq3j1ekZRSAUCw7khgGPYSP\",\n  \"9RddUnTnpascwAj874Lzwx8LYrgTkoahStheMtrzWsAL\",\n  \"3ntqXXLHT7K8BKvNNpbxUvVWcMiNKiHQmFUQEL3o6ZMa\",\n  \"HsQPWr7dVbGCKH58cnHb9WjsFZTmvw6f9w77WSEtkBR1\",\n  \"9oSpejq3QvEZypSkQcDQgvjdpUoFR5cL1yUgL13STebZ\",\n  \"9WuAtU3gBCCkPB5haBnXzBxDgdTSx9TNR5f81KwVmgeJ\",\n  \"8S9MMUemgJfurXjjAYmWC8vMvxqM5KmsHCjhxxEZ7mE8\",\n  \"J8CwUYU1TPSW58Wkr8BFT8AQGEowSqV3cKtwGjjFwdrD\",\n  \"CESHHR8oaH3zkiK91LPxsPc9XAiAQrxy6CYjVAWUU7MP\",\n  \"Fa7epBTTuagzQXViBHpWK4WQ2wAch35o8t7uxBJJpXZg\",\n  \"5Yo8cBkSqLa2V67cRoQoFC9FCLvqNZMyaGttyopon4e9\",\n  \"HZcqD4ze31JTQL3NFRNFHCpNpzZgNjQXLD6jumkrwGkP\",\n  \"6d44eUps2YaUr2RxqjsPR7t9n6VM1qhTFdJJcxvvtLRm\",\n  \"AzzPpFmyZeJHY4V1aK9t8GS3L3cR7892wZ5acj21tFUc\",\n  \"6BsJPCeHcdMj3qhSQkWRyAARj5iSeGCBA71Ry7H7yEEb\",\n  \"AP46pwp8vPe4JSCG3Ph6GH4VmM1rdS3Ws3MaQRLk3NZE\",\n  \"AMfAUPCEYftph3aDxjHtV3Se9dacm2dpbofwhqw1HGmv\",\n  \"4nJxBQkQX5ENxmuuPX2DFNknWMSAKebkFqd1tuDtsYdh\",\n  \"E7sJKe29HaUTU21yzUxD9sMR5P4pLLB2dfXQAMxHFbV6\",\n  \"FhagLwbFkBCxKfCka4nPM8eWk7DRHqDdVt32E2mx4aTc\",\n  \"FDBHtSuXYMDFcJpNt5AMAQCXRVFdpJQ8ZczH9NLZxEXD\",\n  \"A6vGdYFMMw9ujhFqWKzFDYri9MnRNU98vxpovpJHr6C6\",\n  \"9HtKvGgJr2dCoFRnpE9YhpwVetTrNMcfZp77TnJGxjt9\",\n  \"HJQjLzdzBAHxwfdpyPNaFMp3RYFjKeUthagJ7rbCGLiP\",\n  \"4b613DdVtj8XSEBFjo4EQNF6hMzD9AeFAoSaxqbLt4uF\",\n  \"72ch4L4B8yFQyzzTpo5yr5EDuckr3RckBkgjqhPRMDaR\",\n  \"Btu444f8SysWQWeLu2FmLaMd8sFbqoh9vNtPCYAEQvqp\",\n  \"7ZvSHiWf1PaBeYSrHYrtik1VjfDJY1dKnL7nf1XzjNfu\",\n  \"2eAEanAzNMtreFRioAGdmnxJUvefRQSHSUaBpNADJfnm\",\n  \"3AJAWP8oxfRBtQFpypMqS4Wx3vPEKHZ4kc63es5cgtg4\",\n  \"AHfQzoSG854vmv9tT2eyNzg9resa6CNupj5jkueDKbVd\",\n  \"CpprTuc2Y4o51ypLDppmkp4S61aAbBFDh62ovZNsHDB1\",\n  \"8gcKsMr653m7SUabE8GpchdPcgRqJsk59hpjWADrJL7y\",\n  \"9V1iq1o5Yw4GuckbcoXgM4cdMpHc1Ls2MQd75ZFCTFKA\",\n  \"6YvjANAJd4BJEYjRJZtBjVqXz7o6B5B1X7CiZ4jkdPGV\",\n  \"Epjnotaze2y6AYfKBeUaZRTcVbDbGAVEJ3UfPoT3kboh\",\n  \"9HzZEepop69v7hSuaTYaDuQSshDsv1arH275KPyN7zoM\",\n  \"2Eqon1Nw9n3UcFibVFRDThxwF3oJEwvjbqVurj1MNYjL\",\n  \"AKGYVVMejNAyAuh1P8tQDihcmSi8KX5v7pGL1gQZ7Bg3\",\n  \"Ah32U6j4NpyxtQnRR1tQj3csaJBgGQD58FrzZg4uBDsK\",\n  \"F8zxaoxybruZCzCJBev5j4Fnb6VdphmmjSipmvTnxNVV\",\n  \"DGm2mdUPAnawSToUgAFcD9bJ8huNvKiewcqX2Wq7ejZW\",\n  \"EwhhKvL7Y3uJdpCwGus6TN24VxLYJLAFmYLSCUjQ1CdA\",\n  \"7dMskWAgwv4EyQykEbnieDNZs5xDrJN6Ma6LKY5xyd1d\",\n  \"8W2MUyFUMr9BFUfLSbxb1X6wnABTXTNZWma5kazmGjUq\",\n  \"DyBmey5vLMC42bFE7cugCwaaWreyDgxJW4rdVgaZMT2r\",\n  \"Fd32SgWGkvg8PWnGewTzoME8MmfbbBNJ9GQSCUKPe7mH\",\n  \"5CCWXpAya4U5QvFTQRmKXF6rEGg4wmd7BDs5rdHoLCiS\",\n  \"Hph34GZ5VfDDw1eF8LWRwCVVbEpqJFSZ4NhUwr6UJoBD\",\n  \"9gyH6gXfMPvqu3hbyAUzDzTyu8J1fEdPrVk1MUrYkDPe\",\n  \"6xMkiCjEAEXLYRYMBKFEULaFBFRWi62qcAWcpejBuaK9\",\n  \"5NNwr2tLhnmfosdJHqfSezEsVbPFg8RgZ6xriV6aiiqQ\",\n  \"5cV3triG1ciV3c8LuvBVufgksQw77Suz3jbE6rKRK3Lt\",\n  \"7sVmZevGQXaHVFKdzRwuSaVCiNRAaD89UFCQLH7dDuG1\",\n  \"GbRD7oTDUMnTxc1LAGCpZPnusGmwXGC3Gpr6Gu4MMo8z\",\n  \"DgfGicsyFjh1hJEdr5pmC9A6E5uupxRspDMiENgEUTU8\",\n  \"4nLkYEnXZL7iT2xkfDzFwCfeuC2M8Lnh2H88HxqjY4fp\",\n  \"4LXQsUSLu8YR7tFdEr7kFTVCQfg4r7MvuR9TxQMSk6FW\",\n  \"CurZ5v2nfhhxqYbpbCiwhvk8LBVTzwhaiYWtduRJm3tV\",\n  \"J49LajNUJ4spdWaHsgo99eRcUtWEBx76aBDXGXTuYsEo\",\n  \"FxrVeACiHz4A8ByjFexJ5vjBj9FduA46b7dfwqRN6mCi\",\n  \"3UZr12QqZF9aHH1t6BzmghjYaJ7k8z9Jijp2VzdYX1Vm\",\n  \"5GNZi7KpxwHk3bfgzLQTaSj84sYkRy6FnadH2xvCthfv\",\n  \"755nYy94JaYX9z736Cb3pfszYJX52sAeAJ77tnhDXZaQ\",\n  \"61vJ11osuJfALNyYZvLfe6adBKMAG2Gtug3DoWCKgLaE\",\n  \"491CBJvrv3g52np1ykHMNn47UqY4PwZb8knmdqaZ5szx\",\n  \"7xPf7FgstQdEMZQTSrCLWGKti7mKrNK1Emv3vxapZs4c\",\n  \"CbuUgaUDh5nhEPGnkYBrwAwQAhAqLk7s82QcicenqYJP\",\n  \"7eKRArYxhtphJQJyCEaRNtyq3sFp5GKeNcBdqYgSHKMA\",\n  \"pEjWAvQBBp8KMPk43R2QzTjApq2MCzz2MFVVQr7MQGW\",\n  \"2wksHmTRZzPZJHJgjaU2pr6NgjsGvpwahPKD8MrekYUH\",\n  \"GYwLTnLSXByzcgFM6tvLxEgogTNadZeX3VREhtQZd6CU\",\n  \"H2i6UhjoxJ7LumVM3XWEfhQ1shFfS7svBb1o6PMjJJvm\",\n  \"5HfLPTirnPguDLnULHtBnxTLJ9JbMAZ6MW1DZqjVKZX1\",\n  \"AeFaaoXHX77u1MhaTG8rpe3BaEzQTuNixDZwJAVSBmDW\",\n  \"HUw1tHLKz5TNNtSwDE5vDfpbxEmxchTCZV6VM7q6qAw3\",\n  \"AbNU79FzaQuHGSRjBGuMP9Jd4qLUQtEaTbVYVUQD5eQr\",\n  \"2588tgfvYzedFmzL4JmQZBGbu8nnDGTFNKqdd646A86U\",\n  \"FmwKr4XpoHPoaNw54wkSbVwerRcQMpadX8QrPLD3CLVq\",\n  \"5Phz5TrEAbrRTT3d2R9z5xMvHvQwLopk8o3H9niziR98\",\n  \"2GQY4qrjQRH5bptTYXKB5mDLVUMg5oAwAADskEz3eXN7\",\n  \"6rtTjm6QC66cjL8zoMPRM3FBKTFok2AVk2PjhYUq6PCL\",\n  \"57Uy2o2ir2Fb7ZDuRVMhKADHQmX2jGBwF7s5MxH8GEgo\",\n  \"9Ub1dxuCh53axZTXxC5Q45myf8TeVpr7XKJ3e3GHNT8a\",\n  \"2oBzn1x8g4NN7yb4xhm3czQf4fU1XMwtiqYzsn5gYpia\",\n  \"YsWxr3QbwRuSeVjoDhHNDyGzHz7KpHptokYd9S7v9pu\",\n  \"Cn7PJrxNQpvJGfxWudJTfK3V8mDZP77KwRVnU4xo1gLp\",\n  \"4mjbtkPRjYSEHRANaYA6quoeCEnaMKncEDVjnfc2tvtP\",\n  \"H9kymAsoerB9knXpo2uhSFBavAMQj16vVF3YhqR5thfB\",\n  \"6LeE6ijBpkuppVW1MauCTJGmMhajzenUxiA8eveq2Upb\",\n  \"3a8GxrkJ2RKqo3tyjPTX64ddaAm69dsSGpgcJ3XBUDnn\",\n  \"42HEixDL4UEa5mYfgXQDxFTCgGKRmAvWpeDjYV6SaNsb\",\n  \"DjUGwKj6MKwcfa5Dp5V2QQqpV4sxumoJhB8vtL23Kk2T\",\n  \"A4txvYDxY7td2ZHc1ptLE9b7mvDJYYaY2QNqq2C8dRbW\",\n  \"GEBdqMDeLot889rdotFmuW1Rts21WxZeyiPehTRN3LmR\",\n  \"FiwEck6iYopDPNcYFZhJbjPFehPNhKkKmHUwQCruMNAB\",\n  \"9q3AtVkaDfzCA3yDEW6Syfa77DvzAGB66o5UJBUdVyWM\",\n  \"Ev1XWVA4QqqxX1SNf6UyoHHdeNZcNAnqZjLPrDDkjWfa\",\n  \"DkdR8t3N2ERJsjJxA2jXDWQAzWzpjtW61EFSSVQPTN54\",\n  \"98JHmbkaZk59eUxNhrkJzw6ivsEvhGe8WgPGkMJN3GmF\",\n  \"HyKmCuKAAe9Tttr6FSgbxLJGUjf1PTXtsRwiC3EfDaf3\",\n  \"5HRbxzheZbLM1pARddipd9C37nMQFgrJtwi8tFPGraa6\",\n  \"CyoLHjsRAqDd9cM22v1Kt1jCRB85CMJRvWuFGW51eZqu\",\n  \"FYPRkHXM6bmsHrssZ8LpV3TsDB7RwNxroiDy4JLhPyjF\",\n  \"7XTA9fghWkcT3rC4Upmi7egFqGhUBtCnJwNuRWHF3cVm\",\n  \"EPST55SEwYTQWbzVSYza7vG9FwWf4stUr83mCp9yjx2R\",\n  \"AQxFje5GazjLx3nvfn3cbdofZ5mvZY81fPpfUnJ4Dujk\",\n  \"2MVXE5TcVFpXDkNUWXTeJTdiLxSHSJXTX2Lb6RYs1xkf\",\n  \"FeJJekKJGSUdPsSVGbg7B16N7KcyYAmxBEBWMkpMP8yK\",\n  \"FPr4oNdrxxtbZKuG7XSPcdKXZRdGh1T2k3MneX3BBmhL\",\n  \"4wAuLV6Lq7Ct8weroXK7bSPufB2Y8NwsDcqAwf38mcsa\",\n  \"5EKmdKQPtqCjRfWgSmGiz5HqyUbUtqS89YivKN2AL1cp\",\n  \"6ir5nFYYKHJDoG8baRNCJdoNWnWyK8LmUSu4wP4zhT7a\",\n  \"HoUyXM7qsCupb6rocFh6zmN7MPubBJdvEZmRoa2FLLuz\",\n  \"4D5649CWrzLpf3JYmSVsjgmguEjNk55LVPR5LzhZkWDy\",\n  \"CQzFuXar1pP54yYtwaXfuvmgo69M8piQMLPgDTJhVUK4\",\n  \"FdqnigoaDtUkjiWCkYgHBP5GdRHKyW8mCntMEHvn1gci\",\n  \"9MQyoRDq4K9QmkG85dSCZVABMGrPCSrCGPuJrJiB9xGn\",\n  \"6cJvGsfTfT76zqzYt1jjv8i1iL2esRN27jeyA6skirTD\",\n  \"DxvWEDKaUAMBwHVF22kCxG2jRWgMLdcWWUVdDjY9EJrH\",\n  \"6ouKGmG5yBAC8Ew5VzdH2kKg37gDMN4Ui6N3Zw8456Ub\",\n  \"5rubntf2k4f8uqAbdtRC5H4xMoQNwLpYtRW1qLUqXpNB\",\n  \"D9aHsar8wFqEhCHtd6TJ97nRKDg8CcWALwhJSJxroDGq\",\n  \"6GUY9W4vQkqhBqih3s7TtWiWbJvPQp1c1Ws8WHfXbTj3\",\n  \"6vYKESjFUuVd9JhrwqqGdwNUrjgBD2odZSUHoB6VLaTQ\",\n  \"86ipPRf8fJfXL9v83DqKqXm5MCPDDMHMWeKA3zHGuYq3\",\n  \"3YUN1P2JQhGC9Sw7kGaLdCXHayuQNbXxot3t16vkCKQX\",\n  \"6u1iYkGXQ9H6zA1DKgweCeT8Mqd33Biv6Bkt2w9fToeh\",\n  \"DYKeWbVeF5k6TTVy7AcqRkJZYTAbfgTRUMULi6ipWCby\",\n  \"GcRM4svUzci7Jva581iw5B8vrJeVokrbpUYQfau1f2kx\",\n  \"9d2opviFHkT1rrPWqEsEMEv9A6YcAzgiLnCL7Bx2R5w3\",\n  \"AQPCAwbdncdXqStMbYCknfvMHpRdaCxvNkpscFD31My7\",\n  \"3qg288NcAX6uUPb42QVFVFJkh3qkEJ2nkwG1k49Q5a4v\",\n  \"4JfbNTivceRRZCQ2LSUE14wXf4EnrnewWJLyAb1SJex1\",\n  \"Ha3prkBa9qbi1TgpbVwS5QF4RkokbxcHXTbC6zrXRPDp\",\n  \"HATFqoHQgDMfSEryx3CUd9JvD7iEzginL8LzyZ6Fd4Vp\",\n  \"BPk7yhrUQWaj1Kdp99JHhP32xRcssFwUBPfbJBdGPCQZ\",\n  \"Fy9EQmi4UuLE5CM3xyYmGzhShh8CKgdVHC9kFehV6yCx\",\n  \"GE6koqMxaUa8dW8xiKJAMUPRNpumNbUMqVn3kBceH7gf\",\n  \"7H7toAbzXeh1QFTSB3mikYyvwcPXhbyLWYd4fNzH1ASh\",\n  \"4M1BKtLiCwzR8JsHssmnbLCGpwNxifHD38N4rHVrqWNC\",\n  \"CfzKueam3DcCmNow4qWRMumb5hmtzzscYz7gPEnXZdxa\",\n  \"CWWcyodfDGCBT8Dron7s7UHUzfqu2rz1FQGkvoq5zXWJ\",\n  \"6i1vneWnVrLZuiy2RUBDCwE4ZVUYuex4we5fj3LK7Zxo\",\n  \"JCN8GRwG8LmCu9BkbWX8JU8Q68Cz6Y4A7KgvphQK9HYy\",\n  \"DWU25qumSib93w87rqPy5avtyec2HG8zy1ArsJz4FhEF\",\n  \"EqkkquPFUXBCd6FdV5SbkJGpnziNf4nVn26X6rb2qcMC\",\n  \"5z25aN2MjrnYzXQz39EAfgnVGX9D4kc3wDYaZk2D5xk7\",\n  \"cpE694zexQdR4xXftQkLN5MZaWQaEcJ4q5cp59h2bVE\",\n  \"Hz3V6DkgjMpSjhZqhyfEgAHc3JLvyH5d9HeKPwLDXQtz\",\n  \"8tnXdve8YiWwU4ae9xAWWPJjqJGgc5M8ZhyJs8bpYur1\",\n  \"9i2LSrxwccYTaqvV5VychM846K1cnfmhwjaM4PRzgFyy\",\n  \"GbmGDgimi78wxFNdpkdz94wv8tLewWcxcuzoxoSD3tXx\",\n  \"GuyyUGMJ1YM57m9t8Nf9EMBRTJa7fkAhyjraf5pwFKzn\",\n  \"EevxA2E82VAkfn2dK19zMhaKNVbVcTeV97XmgWzoyNSC\",\n  \"GE4zBT41q1ukzF3jFUVvXq99jY3KfJp6ddshntU8PX4y\",\n  \"9Yz1NdNWeqz2rGpvwwdJ1TY2wUjv7ozUKTQntWSNn9cN\",\n  \"H3ZjfwPhMyQz3dUEAHDZGRJ9jysUouGsqvETQ94E7bgN\",\n  \"4vCPhmPNguVf8h7pczz4edS4dz2yjS6XqVXjhxhsUs4u\",\n  \"3DmvAXrncj75EoMmF7Ui9vhPetHgws4YSjqbMeDy4QS6\",\n  \"BZytbeA4HNp5UgieFyXJ7smoQZRUjiJVsvZMH1wLF3VD\",\n  \"GvoV9MPeVNPu1Q9T8Cw4azxVDimuN9sfyV1N3GWnckNP\",\n  \"3mqgUe7AeXq3ajrHLJB6ztZpQDFKmjGecrBPff52u4ey\",\n  \"8EfEbdTHjcE86hEXgCgmmZjp61ev8qZ73VS1Sn7ZTNnt\",\n  \"EF1dV8NZuaFKY1mKFL5Xi7YQoHixu2KRW5NibZ8iG7by\",\n  \"8GP6yisMJtwVsceYshj4hhQoLvjFozjuepYCGekMEeFW\",\n  \"CAEMsU39JmZ5ZuDw4F8k7EbrYgeVDpAcLD5YS4MYMNpp\",\n  \"FFLcHjkyDVRhNkLYDtN2Yi1f57P2t4VFYtAqYSP12uyV\",\n  \"Fnp5ZFA7abVMoJcfj4wNmTsKqP5pxuSpcXes2arSsPqU\",\n  \"3JxTdiFkr85HH9ad5A9hyDdeeBj9emQwcwR5WM6rKy6R\",\n  \"73dhXMkAtXgrnzCX4Gp7Qih5e2rvEN3LbSVeC4vjqbVm\",\n  \"2z5kVfW1JSSQ9UYgCYVcMxmkkEHi9TwwfHyaVgQbMDQ9\",\n  \"4X9oC4EESvEzx9wnDNgSk3qufxHha4EHwosatYM8JbsP\",\n  \"5BzDWc6MVWx2QxS3tSFLspdEHJLUYjogBByBUrZzcwU6\",\n  \"7DGACBrKkPpR9zigXdhBbRmXiVGQdohoKcT2mTBPmp5B\",\n  \"F354X5wMChPW6n5JMSVQpenF3WZciEt21BC6Tmf6h7zx\",\n  \"3KKDArTAFmhWXEHkqfmDXLXJnnPtoijn5Gj8VfNnReq2\",\n  \"DkSFXerjgbyN6ik3ruwrZPFDoFCgpXp7qWufrtw67oa1\",\n  \"Hu3V9uPLweQdikrunzPWvcdJRc1SZ2iPLBxciMcbyHPB\",\n  \"4JCxdFquLjudKmb7y2AXr55hTVjfdt9zQ6dkNzWH1wuT\",\n  \"6o1SXsGZaCfQ32AdSbb29VJvvCa9g6LvryzcvpkU3wnw\",\n  \"9oJ6n6cpz6ashcSXuHpAhH5Umv7zBAe9vsTkR1cZPG1p\",\n  \"19xhEpxnhTV3T8K4HV79nXtDN6V9pFceNRwTFKxzDhW\",\n  \"FT5vBdJZ2tyYYuV5VgwA84uNoqNZFan43DCQaagjYW8r\",\n  \"WTzUyVZGXPPFkCJs4Z4e7sB9DSq7Xw1Vw2Vpw1wVmZv\",\n  \"7aiwSPahY9HdeELENVfzYZuV7YKFBNwX5eb6SMrJ2xmh\",\n  \"9QAmo4qpD2BPx5SbM1PtvXgyaNKEsBY2Skc6BKXLpzaB\",\n  \"H3v3PCmZ2Ks3mBuMFGDEpDX8TLC1mfKceLMtJvUC7QBr\",\n  \"EYjVcz5aQYQ5qbsPFbbuH5rbzQ8yEzD8GgRnS9Q6Ve6E\",\n  \"Fi2oADup3ExpZRaTQvbWBwyytJxiXA6rqTwJPGx3nsaj\",\n  \"5Z5eRSw5uBYqgERyHLLJQ4dBAvvm9HpcrPF42zBcCDFT\",\n  \"3wtwUcNxkJz2viEg9H5tbGRxyfWe32HGg6QayhjLcaGr\",\n  \"Xq7tSWJxizGZdcdgpjmaLYnMoVuGvThX6vNMYbWETc2\",\n  \"HxPDMPwsPkXK9zZP8XSqRGFyucPfmaqshAUctA11sfTY\",\n  \"DQ8qM9RJobBFSnBduukuNC7CNacGYppYTd8hHxcJFovs\",\n  \"2GwFYTFSQgXchwKquiwKiTAeGHrpqwpgCU4WXGokUeFM\",\n  \"D5Kb7BdfJPW2hKfUbvFAxdyWTMT6w4amw7Xg9qe6QyoY\",\n  \"Eap8rRgFBEi3Y4W8zFpw4muTuvKteTqjC7BTrWNe7QoB\",\n  \"5hfzH6e8moZqhxPgHDMzDsRmaXVDZCgAL2tdHcXPcspb\",\n  \"H8Pn8minEzy99QCXo35nKZH7FSbXE2EJo2rjo518pXjL\",\n  \"GvCr2tfTPEdk1cm8TDaWHEscNaqkzKiQsEpDxpWsUZ8q\",\n  \"C1kU7FPDNgdyPwaANcukET1fuoNWS5utnC8L21DyBorX\",\n  \"C4LJ9eW8pfVpKSmTt9QXPm1kk8THSgbaFd5BRPbUMU3d\",\n  \"FG343SGydQUKTpEDByUyjdaKe5Ry3993ARRNvt3HLtML\",\n  \"2H41wHZyN9A5zUauD5M3xLHUn7Zkbw9qEAiDgx2ZbWev\",\n  \"xH5Ux2ejKfGLFLCmwrsMWye3CUNE2JafN2zW39DNP9Z\",\n  \"84xbLftNwBYGiFFKEPWUoccV7ma8X431Hr6mYo1Zrahs\",\n  \"Dyr6uqsyQVCRsihxp6YVG1Sj37ujC1uPXAKwBE8gvmjA\",\n  \"Bd3xnzzKNdibEhyESggJ1fm2XZjjBKD4FUvs7AXhSdzz\",\n  \"DNQgPmTH5yhBDjKcRfjLDvyvFveZmu3wNVsSgcyibfEV\",\n  \"32tGS4GXJGs3UCbkRipNnMu4bAr8Mar9wzQbU3qmXcWK\",\n  \"BUTqpwacJbzQEciXpTScojbhrRNzJSSqtwFGuTt7bRNd\",\n  \"HH5oT2AvhS2iyd4J1jGoaWiCbC5zzbpmehCsKSXdcjnB\",\n  \"G2Npz4AAPKr1GzvSK46nWXDE7qsDsFbQvH4MFkiZyvFV\",\n  \"3nweqaLakBWKmAPc3ircwvtfMrskwKXemTTyRfHpMKFz\",\n  \"BSJLJTfh5vMyTn9q1Ga7Hsn8Ly5yEF1d5dEf6rpgNKsQ\",\n  \"AScRAnatji2Vm61Wx18xmgp71tqxZWUgKLiPGiqLeM22\",\n  \"44vSpAdP7ALAYdt2khD6Dn9YVR66qyMfF5n26XYsJ1jQ\",\n  \"2HKmEGg2eeqGpWU83yhAoxM38ous4msCmAThyyjh11ba\",\n  \"Bb7c5dRST9xCt3NFgBfwpCaYeWxFHYRc7FgAN2hnzGsz\",\n  \"CWmzbquKZzeYDt84TSPJjVXNvnqGvV7HmCMTTzkb1Tyb\",\n  \"Guq2gwRvY5HM3LApdHFe4KMQsFko7Y7EQW2CVnjTeSYf\",\n  \"FYqk5awYe4i7QGwn9qsC3DZfXQvWXUnrszGvmNDcwQFo\",\n  \"EpVH4CFJBEdKpe495EbfaLs78x9qUmJgBvuSCijfCpas\",\n  \"4HPDandYu11td3N1fuuMuNJsvfFWvh3jPLT5SP4GPAZX\",\n  \"JCtTfKbezsseJ8ohHiLzQtayV9L4KYAm5a96xtA9L27i\",\n  \"9x1ia1tAHYevGfV9jPhoJunqGucqFyLQdQgogys4UiEm\",\n  \"44Pt51L5zNFnnGXn61xk1QZ9xc4WbbrJgDDxxJdFkMd7\",\n  \"SWFspZGWVWy3HF7dxNsWbVQaZVMJpxc9w3p72T6gAzS\",\n  \"66B9Cuo7PnPex983VxzvxgyfeiwbcReoqrRidnYVLAx8\",\n  \"JDmbBjzXDWmxPr71X14sSbrdomWgmBiJ9YDrouad19F3\",\n  \"C5uGWfC3gXE9s2s8hYuQxssWYDEUNmJJxCc7BCPxF3TX\",\n  \"8qkWn3XmMqJKqRopiDqkmP2We7MUciNjW9jQoSuDrge4\",\n  \"GFtTzDxJ6VqVnhrUzbkVEXN5DoobWQVZHAmHJJMKGB3X\",\n  \"QnKLm79ezqHi2Wu5HJdkXpqLeQuyoGnA3QBMrtK5aLC\",\n  \"4ZAqwNf32nEySnGHpFJwM2JGekVjm8an3Ts6b8uBbbEG\",\n  \"GNsaUNhXZbh6QVK2pJM5bmG5U4TWs6RK3hj6qrDQ6mgk\",\n  \"86EvWd2opz9EviZdDgE53X3SjYYSujV7KCfyGEHftqds\",\n  \"FTYKo5iDgZVcFFyyZFWyVhVpgmPSn2xyC4Dgn6XQGbRn\",\n  \"4Bbh1iLDCwCq47tMSgCNu2yvvHFyQxZxqPJ94BZ2G4sJ\",\n  \"EvWCgopcTEsPRpLTVeFYkLMDrMKjawqMumVd55cngyn3\",\n  \"AuJeWTSiJBz2CbYSZ7DcDMz5TAcNy6awKUZ3udnHLnUs\",\n  \"EkYaGUB1UFk2Wdn42b2LSk3skvRFKnioXFTX4mGfahA6\",\n  \"HaLJxEo78RMGWAqFsfEonpBFw7CBoehk8jgiFHtnxyQX\",\n  \"8PVarSfxPa2gviLhYxAXd6egCZziMPTQkEVmBFLkuggw\",\n  \"D3s8NuLSxhvEwpnQ9wMkgEx3j2Hbw6FcFfA2Nh1p78dF\",\n];\n","import * as anchor from \"@project-serum/anchor\";\nimport React from \"react\";\n\nimport {\n  WhitelistSettings,\n  PublicSaleSettings,\n  WelcomeSettings,\n} from \"./userSettingsInterfaces\";\n\nfunction date(date: string) {\n  let f = new anchor.BN(new Date(date).getTime() / 1000);\n  return f;\n}\n\n//\n// Below are settings that will trigger the UI of the mint box currently. This is a basic\n// implementation to start with but incorporates whitelist minting sales by turning on\n// the mint function between to dates. This will allow users to mint while the candy machine\n// is still in it's off state allowing minting via SLP tokens.\n//\n// You can play with the settings below and also the CMv2 start time setting to trigger different\n// the different UI modes.\n//\n//  This is the current UI set up below and the new phases.\n//\n//    Welcome\n//    Whitelist\n//    Public Minting\n//\n//    any settings you are not using need to be set as 'undefined' without quotetation marks\n//\n//         title: undefined\n//\n//    for dates use the following format\n//\n//        date('1 Jan 2020 00:00:00 <timezone>')\n//\n//\n//\n\nexport const mintPanic = {\n  enabled: false,\n  title: \"Minting Paused\",\n  desc: \"We have dectected and issue while minting. Standby for an update\",\n};\n\n///                             ///\n///      Welcome Settings       ///\n///                             ///\n\nexport const welcomeSettings: WelcomeSettings = {\n  //Title and Description\n  title: \"Zombinaut\",\n  desc: \"PHASE: COUNTDOWN\",\n\n  // Countdown Timer\n  countdownEnable: true,\n  countdownTo: date(\"06 Feb 2022 05:59:59 GMT\"),\n  //Example date below\n  // date('29 2021 00:00:00 GMT')\n\n  // showprice\n  showPrice: false,\n\n  //Enable Custom HTML\n  enableCustomHTML: false,\n};\n\nexport class MintWelcomeCustomHTML extends React.Component {\n  render() {\n    return (\n      <div className=\"custom-mint-container\">\n        {/* Add Custom HTML code for Welcome Here! */}\n\n        <p>Test 1</p>\n\n        {/* End */}\n      </div>\n    );\n  }\n}\n\n///                             ///\n///   Whitelist Sale Settings   ///\n///                             ///\n\n// The white list does NOTHING to the candy machine itself. It just enables the mint button\n// on the site so people can purchase as long as you have the SLP token's set up for you\n// whitelist. If your candy machine is not set up for SLP token whitelist purchasing then\n// all transations will fail, all transactions will fail for people who also do not hold the\n// SLP token. This also does not stop people minting directly from the program.\n\nexport const whitelistSettings: WhitelistSettings = {\n  //If you want to use the whitelist feature enable it.\n  enabled: true,\n\n  startDate: date(\"06 Feb 2022 06:00:00 GMT\"),\n  endDate: date(\"07 Feb 2022 05:59:59 GMT\"),\n  countdown: true,\n  //Example date below\n  // date('29 2021 00:00:00 GMT')\n\n  //Wallet Title and Description\n  title: \"Zombinaut\",\n  desc: \"PHASE: WHITELIST\",\n\n  //Enable Custom HTML Below\n  enableCustomHTML: false,\n};\n\nexport class MintWhitelistCustomHTML extends React.Component {\n  render() {\n    return (\n      <div className=\"custom-mint-container\">\n        {/* Add Custom HTML code for Whitelist Stage Here! */}\n\n        <p>Test 2</p>\n\n        {/* End */}\n      </div>\n    );\n  }\n}\n\n///                             ///\n///     Public Sale Settings    ///\n///                             ///\n\nexport const publicSaleSettings: PublicSaleSettings = {\n  //start date and end date must match your Candy Machine Config for public launch!\n\n  startDate: date(\"07 Feb 2022 06:00:00 GMT\"),\n  endDate: undefined,\n  countdown: false,\n  //Example date below\n  // date('29 2021 00:00:00 GMT')\n\n  //Title and Description\n  title: \"Zombinaut\",\n  desc: \"PHASE: PUBLIC SALE\",\n\n  //Enable Custom HTML\n  enableCustomHTML: false,\n};\n\nexport class MintPublicSaleCustomHTML extends React.Component {\n  render() {\n    return (\n      <div className=\"custom-mint-container\">\n        {/* Add Custom HTML code for Public Minting Here! */}\n\n        <p>Test 3</p>\n\n        {/* End */}\n      </div>\n    );\n  }\n}\n","import * as anchor from \"@project-serum/anchor\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { PhaseCountdown } from \"./countdown\";\nimport { toDate } from \"./utils\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  publicSaleSettings,\n  whitelistSettings,\n  welcomeSettings,\n  mintPanic,\n} from \"./userSettings\";\nimport { Container } from \"@material-ui/core\";\n\nexport enum Phase {\n  AnticipationPhase, // FL, AKA Phase 0\n  SetPrice, // FL, AKA Phase 1\n  GracePeriod, // FL, AKA Phase 2\n  Lottery, // FL\n  RaffleFinished, // FL, AKA Phase 3\n  WaitForCM, // FL,\n  Phase4,\n  MintOff,\n  WhiteListMint,\n  PublicMint,\n  Welcome,\n  Panic,\n}\n\nexport function getPhase(candyMachine: CandyMachineAccount | undefined): Phase {\n  const curr = new Date().getTime();\n  // const candyMachineGoLive = toDate(candyMachine?.state.goLiveDate)?.getTime();\n  const whiteListStart = toDate(whitelistSettings.startDate)?.getTime();\n  const whiteListEnd = toDate(whitelistSettings.endDate)?.getTime();\n  const publicSaleStart = toDate(publicSaleSettings.startDate)?.getTime();\n  // const publicSaleEnd = toDate(publicSaleSettings.endDate)?.getTime();\n\n  //Countdown, WhiteList Minting, Public Minting,\n\n  if (mintPanic.enabled === true) {\n    return Phase.Panic;\n  } else if (publicSaleStart && curr > publicSaleStart) {\n    return Phase.PublicMint;\n  } else if (\n    whitelistSettings.enabled &&\n    whiteListStart &&\n    whiteListEnd &&\n    curr > whiteListStart &&\n    curr < whiteListEnd\n  ) {\n    return Phase.WhiteListMint;\n  } else {\n    return Phase.Welcome;\n  }\n}\n\nconst Header = (props: {\n  phaseName: string;\n  desc: string | undefined;\n  date?: anchor.BN | undefined;\n  status?: string;\n  countdown?: boolean;\n  countdownEnable?: boolean;\n}) => {\n  const { phaseName, desc, date, status, countdownEnable } = props;\n  return (\n    <>\n      {countdownEnable === true && (\n        <Grid\n          container\n          style={{ position: \"absolute\", top: \"-30px\", left: \"0px\" }}\n        >\n          <Container style={{ justifyContent: \"center\" }}>\n            <PhaseCountdown\n              date={toDate(date)}\n              style={{ justifyContent: \"center\" }}\n              status={status || \"COMPLETE\"}\n            />\n          </Container>\n        </Grid>\n      )}\n      <Grid container className=\"mintHeader\" alignItems=\"center\">\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <div\n            style={{\n              fontWeight: 600,\n              fontSize: \"40px\",\n              textAlign: \"center\",\n              fontFamily: \"open-sans\",\n            }}\n          >\n            {phaseName}\n          </div>\n        </div>\n      </Grid>\n\n      {desc && (\n        <div\n          style={{\n            fontWeight: 600,\n            fontSize: \"30px\",\n            textAlign: \"center\",\n            fontFamily: \"open-sans\",\n          }}\n        >\n          {desc}\n        </div>\n      )}\n    </>\n  );\n};\n\ntype PhaseHeaderProps = {\n  phase: Phase;\n\n  candyMachine?: CandyMachineAccount;\n\n  rpcUrl: string;\n};\n\nexport const PhaseHeader = ({\n  phase,\n\n  candyMachine,\n}: PhaseHeaderProps) => {\n  const wallet = useWallet();\n  // console.log(\"D\", candyMachine);\n  // console.log(\"Wallet\", wallet);\n\n  return (\n    <>\n      {phase === Phase.Panic && (\n        <Header phaseName={mintPanic.title} desc={mintPanic.desc} />\n      )}\n\n      {phase === Phase.Welcome && (\n        <Header\n          phaseName={welcomeSettings.title}\n          desc={welcomeSettings.desc}\n          date={welcomeSettings.countdownTo}\n          countdownEnable={welcomeSettings.countdownEnable}\n        />\n      )}\n\n      {phase === Phase.WhiteListMint && (\n        <>\n          <Header\n            phaseName={whitelistSettings.title}\n            desc={whitelistSettings.desc}\n            date={whitelistSettings.endDate}\n            countdownEnable={whitelistSettings.countdown}\n            status=\"WHITELIST LIVE\"\n          />\n        </>\n      )}\n\n      {phase === Phase.PublicMint && (\n        <>\n          <Header\n            phaseName={publicSaleSettings.title}\n            desc={publicSaleSettings.desc}\n            date={publicSaleSettings.endDate}\n            countdownEnable={publicSaleSettings.countdown}\n            status=\"LIVE\"\n          />\n        </>\n      )}\n    </>\n  );\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  whitelistSettings,\n  publicSaleSettings,\n  mintPanic,\n} from \"./userSettings\";\nimport { toDate } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  MINT_LIMIT,\n  userMintCount,\n  whitelisted,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine: CandyMachineAccount | undefined;\n  isMinting: boolean;\n  MINT_LIMIT: number;\n  userMintCount: number;\n  whitelisted: boolean;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n  const whitelistStartDate = toDate(whitelistSettings.startDate)?.getTime();\n  const whitelistEndDate = toDate(whitelistSettings.endDate)?.getTime();\n  const publicMintStart = toDate(publicSaleSettings.startDate)?.getTime();\n  const publicMintEnd = toDate(publicSaleSettings.endDate)?.getTime();\n\n  function whiteListSaleCheck() {\n    if (\n      whitelistSettings.enabled &&\n      whitelistStartDate &&\n      whitelistEndDate &&\n      Date.now() > whitelistStartDate &&\n      Date.now() < whitelistEndDate\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  let WhitelistMintActive = whiteListSaleCheck();\n  // console.log(\"is Whitelist Sale Active? \" + whiteListSaleCheck());\n\n  function publicSaleCheck() {\n    if (publicMintStart && publicMintEnd) {\n      if (Date.now() > publicMintStart && Date.now() < publicMintEnd) {\n        return true;\n      } else {\n        return false;\n      }\n    } else if (publicMintStart) {\n      if (Date.now() > publicMintStart) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  let PublicMintActive = publicSaleCheck();\n\n  // console.log(\"is public sale live? \" + publicSaleCheck());\n\n  // console.log(\n  //   candyMachine?.state.isSoldOut,\n  //   isMinting,\n  //   WhitelistMintActive || PublicMintActive,\n  //   !candyMachine?.state.isActive\n  // );\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      console.log(\"Minting\");\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n  return (\n    <CTAButton\n      className=\"minting-button\"\n      disabled={\n        candyMachine?.state.isSoldOut ||\n        isMinting ||\n        mintPanic.enabled ||\n        !(WhitelistMintActive || PublicMintActive)\n      }\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          console.log(\"gatekeeper active\");\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            console.log(gatewayStatus + GatewayStatus.ACTIVE);\n            setClicked(true);\n          } else {\n            console.log(\"requeting token\");\n            let token = await requestGatewayToken();\n            console.log(token);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      <div className=\"mint-button-text\">\n        {candyMachine?.state.isSoldOut ? (\n          \"SOLD OUT\"\n        ) : isMinting ? (\n          <CircularProgress />\n        ) : mintPanic.enabled ? (\n          \"Mint Paused\"\n        ) : (\n          \"MINT\"\n        )}\n      </div>\n    </CTAButton>\n  );\n};\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.5),\n        marginRight: 0,\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: theme.spacing(1),\n      marginRight: 0,\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    }\n  }),\n);\n\n\ninterface PhaseCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n  start?: Date;\n  end?: Date;\n}\n\ninterface CountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const PhaseCountdown: React.FC<PhaseCountdownProps> = ({\n  date,\n  status,\n  style,\n  start,\n  end,\n  onComplete,\n}) => {\n  const classes = useStyles();\n\n  const [isFixed, setIsFixed] = useState(start && end && date ? start.getTime() - Date.now() < 0 : false);\n\n  const renderCountdown = ({ days, hours, minutes, seconds, completed }: CountdownRender) => {\n    hours += days * 24\n    if (completed) {\n      return status ? <span className={classes.done}  >{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style} >\n          {isFixed && <Paper elevation={0}>\n            <span className={classes.item}>\n              +\n            </span>\n          </Paper>}\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      )\n    }\n  }\n\n  if (date && start && end) {\n    if (isFixed) {\n      <Countdown\n        date={start}\n        now={() => end.getTime()}\n        onComplete={() => setIsFixed(false)}\n        renderer={renderCountdown}\n      />\n    }\n  }\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    )\n  } else {\n    return null\n  }\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport gif from \"./comp.gif\";\nimport { whitelist } from \"./whitelist\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"./candy-machine\";\n\nimport { AlertState } from \"./utils\";\nimport { MintButton } from \"./MintButton\";\nimport { getPhase, Phase, PhaseHeader } from \"./PhaseHeader\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport {\n  whitelistSettings,\n  publicSaleSettings,\n  welcomeSettings,\n  MintWelcomeCustomHTML,\n  MintWhitelistCustomHTML,\n  MintPublicSaleCustomHTML,\n} from \"./userSettings\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  left: 0px;\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: #0d6ebb;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  // * CryptoCoders mint limiter\n  const MINT_LIMIT = 3;\n  const localStorage = window.localStorage;\n  const [userMintCount, setUserMintCount] = useState<number>(MINT_LIMIT);\n  const [whitelisted, setWhitelisted] = useState<boolean>(false);\n\n  // const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\n  const rpcUrl = props.rpcHost;\n  const [whiteListTokenBalance, setWhiteListTokenBalance] = useState<number>(0);\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [mintingTotal, setMintingTotal] = useState<number | null>(null);\n  const [itemsAvailable, setItemsAvailable] = useState<number | null>(null);\n  const [publicKey, setPublicKey] = useState<PublicKey>();\n\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n\n  const [price, setPrice] = useState<number | null>(null);\n\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      // document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            \"singleGossip\",\n            true\n          );\n        }\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n\n          setMintingTotal(mintingTotal! + 1);\n          localStorage.setItem(\n            wallet.publicKey.toString() + \"v2\",\n            `${userMintCount + 1}`\n          );\n          setUserMintCount(userMintCount + 1);\n\n          if (whiteListTokenBalance && whiteListTokenBalance > 0)\n            setWhiteListTokenBalance(whiteListTokenBalance - 1);\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        // console.log(\"anchor wallet not found\");\n        return;\n      }\n      // console.log(\"wallet connected\");\n      if (anchorWallet.publicKey) {\n        setPublicKey(anchorWallet.publicKey);\n        const localMintCount = localStorage.getItem(\n          anchorWallet.publicKey.toString() + \"v2\"\n        );\n        setUserMintCount(localMintCount ? parseInt(localMintCount) : 0);\n        console.log({ userMintCount });\n        if (whitelist.includes(anchorWallet.publicKey.toString())) {\n          console.log(\"This is a valid whitelist address!\");\n          setWhitelisted(true);\n        }\n      }\n\n      // try {\n      //   const balance = await props.connection.getBalance(\n      //     anchorWallet.publicKey\n      //   );\n      //   console.log(\"Sol balance is: \" + balance);\n      //   setYourSOLBalance(balance);\n      // } catch (e) {\n      //   console.log(\"Problem getting fair launch state\");\n      //   console.log(e);\n      // }\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            props.connection\n          );\n          setCandyMachine(cndy);\n          // console.log(cndy.state.whitelistMintSettings?.mint.toString());\n        } catch (e) {\n          console.log(\"Problem getting candy machine state\");\n          console.log(e);\n        }\n      } else {\n        console.log(\"No candy machine detected in configuration.\");\n      }\n    })();\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  useEffect(() => {\n    async function getTokenAmount() {\n      if (publicKey && candyMachine?.state.whitelistMintSettings?.mint) {\n        try {\n          var tokenAmount =\n            await props.connection.getParsedTokenAccountsByOwner(publicKey, {\n              mint: candyMachine?.state.whitelistMintSettings?.mint,\n            });\n          setWhiteListTokenBalance(\n            tokenAmount.value[0].account.data.parsed.info.tokenAmount.amount\n          );\n        } catch {\n          setWhiteListTokenBalance(0);\n        }\n      }\n    }\n\n    getTokenAmount();\n\n    if (candyMachine?.state.itemsAvailable) {\n      setItemsAvailable(candyMachine?.state.itemsAvailable);\n    }\n\n    if (candyMachine?.state.itemsRedeemed == null) {\n      setMintingTotal(0);\n    } else {\n      setMintingTotal(candyMachine?.state.itemsRedeemed);\n    }\n\n    if (candyMachine?.state.price) {\n      setPrice(candyMachine?.state.price.toNumber() / 1000000000);\n    }\n  }, [candyMachine, publicKey, props.connection]);\n\n  const phase = getPhase(candyMachine);\n  // console.log({ phase });\n\n  return (\n    <Container style={{ padding: \"3rem\" }}>\n      <Container\n        maxWidth=\"sm\"\n        style={{\n          padding: \"3rem\",\n          position: \"relative\",\n          fontFamily: \"open-sans\",\n        }}\n      >\n        <Paper\n          style={{\n            padding: \"34px 24px 30px 24px\",\n            display: \"flex\",\n            borderRadius: 6,\n            background: \"rgba(21, 18, 39, 0.8)\",\n          }}\n        >\n          <Grid container justifyContent=\"space-between\" direction=\"column\">\n            <PhaseHeader\n              phase={phase}\n              candyMachine={candyMachine}\n              rpcUrl={rpcUrl}\n            />\n            <img\n              className=\"mint-vid\"\n              style={{ marginBottom: \"1rem\" }}\n              src={gif}\n              alt=\"\"\n            />\n\n            <div>\n              {phase === Phase.Welcome && welcomeSettings.enableCustomHTML && (\n                <MintWelcomeCustomHTML />\n              )}\n              {phase === Phase.WhiteListMint &&\n                whitelistSettings.enableCustomHTML && (\n                  <MintWhitelistCustomHTML />\n                )}\n              {phase === Phase.PublicMint &&\n                publicSaleSettings.enableCustomHTML && (\n                  <MintPublicSaleCustomHTML />\n                )}\n\n              {(phase === Phase.PublicMint || Phase.WhiteListMint) && (\n                <>\n                  <div\n                    style={{\n                      fontSize: \"17px\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div style={{ textAlign: \"center\" }}>\n                      Description - Zombies have taken over. Humans are\n                      desperate to escape earth to conquer a new planet. There\n                      is only 1 man who can do so. ELON MUSK and his space X\n                      rockets! 3550 hand drawn Zombinauts!\n                    </div>\n                    <div style={{ marginTop: \"1rem\" }}>\n                      {(phase === Phase.WhiteListMint ||\n                        phase === Phase.PublicMint) &&\n                        (itemsAvailable !== null && mintingTotal !== null ? (\n                          <p>{mintingTotal + \" / \" + itemsAvailable}</p>\n                        ) : (\n                          <p className=\"loading\"></p>\n                        ))}\n                    </div>\n\n                    <div>\n                      {(phase === Phase.Welcome && welcomeSettings.showPrice) ||\n                      phase === Phase.WhiteListMint ||\n                      phase === Phase.PublicMint ? (\n                        <>\n                          {price ? (\n                            <p>{price} SOL</p>\n                          ) : (\n                            <p className=\"loading\"></p>\n                          )}\n                        </>\n                      ) : (\n                        \"\"\n                      )}\n\n                      {/* {formatSol(yourSOLBalance || 0).toLocaleString()} SOL */}\n                    </div>\n                    {phase === Phase.WhiteListMint && (\n                      <div className=\"card minting-info text-center\">\n                        {whiteListTokenBalance >= 0 ? (\n                          <h1>{whiteListTokenBalance} mints to claim</h1>\n                        ) : (\n                          <div className=\"loading\"></div>\n                        )}\n\n                        {/* <div>\n                        <p>Mints to Claim</p>\n                      </div> */}\n                      </div>\n                    )}\n                  </div>\n\n                  {!wallet.connected ? (\n                    <ConnectButton id=\"test\">Connect</ConnectButton>\n                  ) : (\n                    <MintContainer>\n                      {candyMachine?.state.isActive &&\n                      candyMachine?.state.gatekeeper &&\n                      wallet.publicKey &&\n                      wallet.signTransaction ? (\n                        <GatewayProvider\n                          wallet={{\n                            publicKey:\n                              wallet.publicKey ||\n                              new PublicKey(CANDY_MACHINE_PROGRAM),\n                            //@ts-ignore\n                            signTransaction: wallet.signTransaction,\n                          }}\n                          // // Replace with following when added\n                          // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                          gatekeeperNetwork={\n                            candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                          } // This is the ignite (captcha) network\n                          /// Don't need this for mainnet\n                          clusterUrl={rpcUrl}\n                          options={{ autoShowModal: false }}\n                        >\n                          <MintButton\n                            candyMachine={candyMachine}\n                            isMinting={isMinting}\n                            onMint={onMint}\n                            userMintCount={userMintCount}\n                            MINT_LIMIT={MINT_LIMIT}\n                            whitelisted={whitelisted}\n                          />\n                        </GatewayProvider>\n                      ) : (\n                        <MintButton\n                          candyMachine={candyMachine}\n                          isMinting={isMinting}\n                          onMint={onMint}\n                          userMintCount={userMintCount}\n                          MINT_LIMIT={MINT_LIMIT}\n                          whitelisted={whitelisted}\n                        />\n                      )}\n                    </MintContainer>\n                  )}\n                </>\n              )}\n            </div>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Minter from \"./Minter\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getMathWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst candyMachineId = process.env.REACT_APP_CANDY_MACHINE_ID\n  ? new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID)\n  : undefined;\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSolletWallet(),\n      getMathWallet(),\n    ],\n    []\n  );\n\n  return (\n    <div className=\"background\">\n      <div className=\"content-wrapper\">\n        <div>\n          <ThemeProvider theme={theme}>\n            <ConnectionProvider endpoint={endpoint}>\n              <WalletProvider wallets={wallets} autoConnect>\n                <WalletDialogProvider>\n                  <Minter\n                    candyMachineId={candyMachineId}\n                    connection={connection}\n                    startDate={startDateSeed}\n                    txTimeout={txTimeout}\n                    rpcHost={rpcHost}\n                  />\n                </WalletDialogProvider>\n              </WalletProvider>\n            </ConnectionProvider>\n          </ThemeProvider>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './userCSS.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey(\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\n);\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      tokenMint.toBuffer(),\n      seq.toArrayLike(Buffer, 'le', 8),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport function formatSol(sol:number){\n    var formated = sol / 1000000000\n    return formated\n}\n\n"],"sourceRoot":""}